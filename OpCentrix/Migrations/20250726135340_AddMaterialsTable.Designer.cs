// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpCentrix.Data;

#nullable disable

namespace OpCentrix.Migrations
{
    [DbContext(typeof(SchedulerContext))]
    [Migration("20250726135340_AddMaterialsTable")]
    partial class AddMaterialsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("OpCentrix.Models.AdminAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlertName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessDays")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("1,2,3,4,5");

                    b.Property<TimeSpan>("BusinessHoursEnd")
                        .HasColumnType("TEXT");

                    b.Property<bool>("BusinessHoursOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<TimeSpan>("BusinessHoursStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<int>("CooldownMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(15);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailRecipients")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("OpCentrix Alert: {AlertName}");

                    b.Property<string>("EmailTemplate")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EscalationRules")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastDailyReset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("LastTriggered")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAlertsPerDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(10);

                    b.Property<bool>("SendBrowserNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("SendSms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("SeverityLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("SmsRecipients")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsTemplate")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("TEXT");

                    b.Property<string>("TriggerConditions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<int>("TriggerCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TriggersToday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AlertName");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastTriggered");

                    b.HasIndex("SeverityLevel");

                    b.HasIndex("TriggerType");

                    b.ToTable("AdminAlerts");
                });

            modelBuilder.Entity("OpCentrix.Models.ArchivedJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("TEXT");

                    b.Property<double>("ActualPowderUsageKg")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArchiveReason")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Cleanup");

                    b.Property<string>("ArchivedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("ArchivedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<decimal>("ArgonCostPerHour")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CustomerDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerOrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DefectQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DensityPercentage")
                        .HasColumnType("REAL");

                    b.Property<double>("EstimatedHours")
                        .HasColumnType("REAL");

                    b.Property<double>("EstimatedPowderUsageKg")
                        .HasColumnType("REAL");

                    b.Property<string>("HoldReason")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<decimal>("LaborCostPerHour")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("LaserPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("LayerThicknessMicrons")
                        .HasColumnType("REAL");

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MachineOperatingCostPerHour")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MaterialCostPerKg")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalCreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OriginalCreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OriginalJobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalLastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OriginalLastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PowderLotNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("ProcessParameters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<int>("ProducedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualityCheckpoints")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<string>("QualityInspector")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int>("ReworkQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ScanSpeedMmPerSec")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("ScheduledEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("SlsMaterial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Completed");

                    b.Property<string>("Supervisor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("SurfaceRoughnessRa")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ArchivedBy");

                    b.HasIndex("ArchivedDate");

                    b.HasIndex("MachineId");

                    b.HasIndex("OriginalJobId");

                    b.HasIndex("PartNumber");

                    b.HasIndex("Status");

                    b.HasIndex("MachineId", "ScheduledStart");

                    b.ToTable("ArchivedJobs");
                });

            modelBuilder.Entity("OpCentrix.Models.BuildJob", b =>
                {
                    b.Property<int>("BuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActualStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AssociatedScheduledJobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<float?>("GasUsed_L")
                        .HasColumnType("REAL");

                    b.Property<string>("LaserRunTime")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<float?>("PowderUsed_L")
                        .HasColumnType("REAL");

                    b.Property<string>("PrinterName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReasonForEnd")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScheduledEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScheduledStartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SetupNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BuildId");

                    b.HasIndex("UserId");

                    b.ToTable("BuildJobs");
                });

            modelBuilder.Entity("OpCentrix.Models.BuildJobPart", b =>
                {
                    b.Property<int>("PartEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BuildJobBuildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedHours")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("PartEntryId");

                    b.HasIndex("BuildJobBuildId");

                    b.ToTable("BuildJobParts");
                });

            modelBuilder.Entity("OpCentrix.Models.DefectCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicableProcesses")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("AverageResolutionTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30);

                    b.Property<string>("CategoryGroup")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("General");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("#6B7280");

                    b.Property<string>("CostImpact")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Medium");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("exclamation-triangle");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreventionMethods")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresImmediateNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("SeverityLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<string>("StandardCorrectiveActions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryGroup");

                    b.HasIndex("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("SeverityLevel");

                    b.ToTable("DefectCategories");
                });

            modelBuilder.Entity("OpCentrix.Models.DelayLog", b =>
                {
                    b.Property<int>("DelayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BuildJobBuildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DelayDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DelayReason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("DelayId");

                    b.HasIndex("BuildJobBuildId");

                    b.ToTable("DelayLogs");
                });

            modelBuilder.Entity("OpCentrix.Models.FeatureToggle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("General");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<string>("Conflicts")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Dependencies")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("All");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IntroducedInVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("PerformanceNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PlannedRemovalVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredRole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("User");

                    b.Property<bool>("RequiresRestart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("RolloutPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<string>("SecurityNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Experimental");

                    b.Property<long>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Environment");

                    b.HasIndex("FeatureName")
                        .IsUnique();

                    b.HasIndex("IsEnabled");

                    b.HasIndex("RequiredRole");

                    b.HasIndex("Status");

                    b.ToTable("FeatureToggles");
                });

            modelBuilder.Entity("OpCentrix.Models.InspectionCheckpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcceptanceCriteria")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Quality");

                    b.Property<string>("CheckpointName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("DefectCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EstimatedMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(5);

                    b.Property<string>("FailureAction")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Hold for review");

                    b.Property<string>("InspectionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Visual");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<double?>("LowerTolerance")
                        .HasColumnType("REAL");

                    b.Property<string>("MeasurementMethod")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("ReferenceDocuments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredEquipment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SampleSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("SamplingMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("All");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<double?>("TargetValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<double?>("UpperTolerance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DefectCategoryId");

                    b.HasIndex("InspectionType");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsRequired");

                    b.HasIndex("PartId");

                    b.HasIndex("PartId", "SortOrder");

                    b.ToTable("InspectionCheckpoints");
                });

            modelBuilder.Entity("OpCentrix.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("TEXT");

                    b.Property<double>("ActualPowderUsageKg")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ArgonCostPerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("ArgonPurityPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(99.5);

                    b.Property<DateTime?>("BuildFileCreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BuildFileName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("BuildFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("BuildFileSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildLayerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildPlatformId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("BuildTemperatureCelsius")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(180.0);

                    b.Property<double>("BuildTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("ChangeoverTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("CoolingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<double>("CurrentArgonFlowRate")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentBuildTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentLaserPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentOxygenLevel")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("CustomerDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerOrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DefectQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DensityPercentage")
                        .HasColumnType("REAL");

                    b.Property<double>("EnergyConsumptionKwh")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedHours")
                        .HasColumnType("REAL");

                    b.Property<double>("EstimatedPowderUsageKg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(0.5);

                    b.Property<double>("HatchSpacingMicrons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(120.0);

                    b.Property<string>("HoldReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRushJob")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LaborCostPerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("LaserPowerWatts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(170.0);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<double>("LayerThicknessMicrons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(30.0);

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MachineOperatingCostPerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("MachineUtilizationPercent")
                        .HasColumnType("REAL");

                    b.Property<decimal>("MaterialCostPerKg")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<double>("OpcUaBuildProgress")
                        .HasColumnType("REAL");

                    b.Property<string>("OpcUaErrorMessages")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpcUaJobId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OpcUaLastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpcUaStatus")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("OxygenContentPpm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(50.0);

                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<double>("PostProcessingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("PowderChangeoverTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("PowderExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowderLotNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("PowderRecyclePercentage")
                        .HasColumnType("REAL");

                    b.Property<decimal>("PowerCostPerKwh")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("PreheatingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("PreviousJobPartNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("ProcessParameters")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProducedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualityCheckpoints")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("QualityInspector")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequiredMaterials")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredTooling")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresArgonPurge")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresPostProcessing")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresPowderSieving")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresPreheating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReworkQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ScanSpeedMmPerSec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(1000.0);

                    b.Property<DateTime>("ScheduledEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("TEXT");

                    b.Property<double>("SetupTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("SlsMaterial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Supervisor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("SurfaceRoughnessRa")
                        .HasColumnType("REAL");

                    b.Property<double>("UltimateTensileStrengthMPa")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("PartNumber");

                    b.HasIndex("Priority");

                    b.HasIndex("Status");

                    b.HasIndex("MachineId", "ScheduledStart");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("OpCentrix.Models.JobLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operator")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JobLogEntries");
                });

            modelBuilder.Entity("OpCentrix.Models.JobNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Info");

                    b.Property<int?>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StepTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("JobId");

                    b.HasIndex("PartId");

                    b.HasIndex("Priority");

                    b.HasIndex("JobId", "Step");

                    b.ToTable("JobNotes");
                });

            modelBuilder.Entity("OpCentrix.Models.JobStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowParallel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignedOperator")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanStart")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CooldownTimeHours")
                        .HasColumnType("REAL");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedDurationHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(1.0);

                    b.Property<int>("ExecutionOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBlocking")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("MachineId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<double>("ProgressPercent")
                        .HasColumnType("REAL");

                    b.Property<string>("QualityRequirements")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredMaterials")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredTooling")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("TEXT");

                    b.Property<double>("SetupTimeHours")
                        .HasColumnType("REAL");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Scheduled");

                    b.HasKey("Id");

                    b.HasIndex("Department");

                    b.HasIndex("JobId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ScheduledEnd");

                    b.HasIndex("ScheduledStart");

                    b.HasIndex("StageType");

                    b.HasIndex("Status");

                    b.HasIndex("JobId", "ExecutionOrder");

                    b.ToTable("JobStages");
                });

            modelBuilder.Entity("OpCentrix.Models.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageUtilizationPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("BuildHeightMm")
                        .HasColumnType("REAL");

                    b.Property<double>("BuildLengthMm")
                        .HasColumnType("REAL");

                    b.Property<double>("BuildWidthMm")
                        .HasColumnType("REAL");

                    b.Property<string>("CommunicationSettings")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("CurrentJobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentMaterial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("HoursSinceLastMaintenance")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailableForScheduling")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime>("LastStatusUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("MaintenanceIntervalHours")
                        .HasColumnType("REAL");

                    b.Property<string>("MaintenanceNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxLaserPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxLayerThicknessMicrons")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxScanSpeedMmPerSec")
                        .HasColumnType("REAL");

                    b.Property<double>("MinLayerThicknessMicrons")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("OpcUaEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpcUaEndpointUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatorNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Idle");

                    b.Property<string>("SupportedMaterials")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TechnicalSpecifications")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalOperatingHours")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CurrentJobId");

                    b.HasIndex("IsActive");

                    b.HasIndex("MachineId")
                        .IsUnique();

                    b.HasIndex("MachineType");

                    b.HasIndex("Status");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("OpCentrix.Models.MachineCapability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CapabilityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CapabilityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CapabilityValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MachineId1")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("RequiredCertification")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityType");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineId1");

                    b.HasIndex("MachineId", "CapabilityType");

                    b.ToTable("MachineCapabilities");
                });

            modelBuilder.Entity("OpCentrix.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompatibleMachineTypes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostPerGram")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("DefaultLaserPowerPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("DefaultLayerThicknessMicrons")
                        .HasColumnType("REAL");

                    b.Property<double>("DefaultScanSpeedMmPerSec")
                        .HasColumnType("REAL");

                    b.Property<double>("Density")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialProperties")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("MeltingPointC")
                        .HasColumnType("REAL");

                    b.Property<string>("SafetyNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("OpCentrix.Models.OperatingShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsHoliday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("SpecificDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeek");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsHoliday");

                    b.HasIndex("SpecificDate");

                    b.HasIndex("DayOfWeek", "IsActive");

                    b.ToTable("OperatingShifts");
                });

            modelBuilder.Entity("OpCentrix.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AdminEstimatedHoursOverride")
                        .HasColumnType("REAL");

                    b.Property<string>("AdminOverrideBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AdminOverrideDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminOverrideReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ArgonCostPerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("AverageActualHours")
                        .HasColumnType("REAL");

                    b.Property<decimal>("AverageCostPerUnit")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("AverageDefectRate")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageEfficiencyPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("AveragePowderUtilization")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageQualityScore")
                        .HasColumnType("REAL");

                    b.Property<string>("AvgDuration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("AvgDurationDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildFileTemplate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("CadFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CadFileVersion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumableMaterials")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("CoolingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("CustomerPartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedHours")
                        .HasColumnType("REAL");

                    b.Property<double>("HeightMm")
                        .HasColumnType("REAL");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("LastProduced")
                        .HasColumnType("TEXT");

                    b.Property<double>("LengthMm")
                        .HasColumnType("REAL");

                    b.Property<decimal>("MachineOperatingCostPerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaterialCostPerKg")
                        .HasColumnType("decimal(12,2)");

                    b.Property<double>("MaxOxygenContent")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxSurfaceRoughnessRa")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartClass")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PostProcessingCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("PostProcessingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("PowderChangeoverTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("PowderRequirementKg")
                        .HasColumnType("REAL");

                    b.Property<string>("PowderSpecification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredMachines")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("PreheatingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("ProcessParameters")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("QualityCheckpoints")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("QualityInspectionCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("QualityStandards")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("RecommendedBuildTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("RecommendedHatchSpacing")
                        .HasColumnType("REAL");

                    b.Property<double>("RecommendedLaserPower")
                        .HasColumnType("REAL");

                    b.Property<double>("RecommendedLayerThickness")
                        .HasColumnType("REAL");

                    b.Property<double>("RecommendedScanSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("RequiredArgonPurity")
                        .HasColumnType("REAL");

                    b.Property<string>("RequiredCertifications")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredMachineType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredTooling")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresAS9100")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresCertification")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresFDA")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresInspection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresNADCAP")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresSupports")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SetupCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("SetupTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("SlsMaterial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StandardLaborCostPerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("StandardSellingPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("SupportRemovalTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("SupportStrategy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SurfaceFinishRequirement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ToleranceRequirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalJobsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalUnitsProduced")
                        .HasColumnType("INTEGER");

                    b.Property<double>("VolumeMm3")
                        .HasColumnType("REAL");

                    b.Property<double>("WeightGrams")
                        .HasColumnType("REAL");

                    b.Property<double>("WidthMm")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("OpCentrix.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("General");

                    b.Property<string>("Constraints")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PermissionLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Read");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("PermissionKey");

                    b.HasIndex("RoleName");

                    b.HasIndex("RoleName", "PermissionKey")
                        .IsUnique();

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("OpCentrix.Models.StageDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("DependencyType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("FinishToStart");

                    b.Property<int>("DependentStageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LagTimeHours")
                        .HasColumnType("REAL");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredStageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DependencyType");

                    b.HasIndex("DependentStageId");

                    b.HasIndex("RequiredStageId");

                    b.ToTable("StageDependencies", t =>
                        {
                            t.HasCheckConstraint("CK_StageDependency_NoSelfReference", "DependentStageId != RequiredStageId");
                        });
                });

            modelBuilder.Entity("OpCentrix.Models.StageNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Info");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<int>("StageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("NoteType");

                    b.HasIndex("Priority");

                    b.HasIndex("StageId");

                    b.ToTable("StageNotes");
                });

            modelBuilder.Entity("OpCentrix.Models.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("General");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("String");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsReadOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("RequiresRestart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationRules")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("SettingKey")
                        .IsUnique();

                    b.HasIndex("Category", "DisplayOrder");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("OpCentrix.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OpCentrix.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BrowserNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultPage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionTimeoutMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("OpCentrix.Models.BuildJob", b =>
                {
                    b.HasOne("OpCentrix.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpCentrix.Models.BuildJobPart", b =>
                {
                    b.HasOne("OpCentrix.Models.BuildJob", "BuildJob")
                        .WithMany()
                        .HasForeignKey("BuildJobBuildId");

                    b.Navigation("BuildJob");
                });

            modelBuilder.Entity("OpCentrix.Models.DelayLog", b =>
                {
                    b.HasOne("OpCentrix.Models.BuildJob", "BuildJob")
                        .WithMany()
                        .HasForeignKey("BuildJobBuildId");

                    b.Navigation("BuildJob");
                });

            modelBuilder.Entity("OpCentrix.Models.InspectionCheckpoint", b =>
                {
                    b.HasOne("OpCentrix.Models.DefectCategory", null)
                        .WithMany("InspectionCheckpoints")
                        .HasForeignKey("DefectCategoryId");

                    b.HasOne("OpCentrix.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("OpCentrix.Models.Job", b =>
                {
                    b.HasOne("OpCentrix.Models.Part", "Part")
                        .WithMany("Jobs")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("OpCentrix.Models.JobNote", b =>
                {
                    b.HasOne("OpCentrix.Models.Job", "Job")
                        .WithMany("JobNotes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpCentrix.Models.Part", null)
                        .WithMany("JobNotes")
                        .HasForeignKey("PartId");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("OpCentrix.Models.JobStage", b =>
                {
                    b.HasOne("OpCentrix.Models.Job", "Job")
                        .WithMany("JobStages")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpCentrix.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .HasPrincipalKey("MachineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Job");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("OpCentrix.Models.Machine", b =>
                {
                    b.HasOne("OpCentrix.Models.Job", "CurrentJob")
                        .WithMany()
                        .HasForeignKey("CurrentJobId");

                    b.Navigation("CurrentJob");
                });

            modelBuilder.Entity("OpCentrix.Models.MachineCapability", b =>
                {
                    b.HasOne("OpCentrix.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpCentrix.Models.Machine", null)
                        .WithMany("Capabilities")
                        .HasForeignKey("MachineId1");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("OpCentrix.Models.StageDependency", b =>
                {
                    b.HasOne("OpCentrix.Models.JobStage", "DependentStage")
                        .WithMany("Dependencies")
                        .HasForeignKey("DependentStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpCentrix.Models.JobStage", "RequiredStage")
                        .WithMany("Dependents")
                        .HasForeignKey("RequiredStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DependentStage");

                    b.Navigation("RequiredStage");
                });

            modelBuilder.Entity("OpCentrix.Models.StageNote", b =>
                {
                    b.HasOne("OpCentrix.Models.JobStage", "Stage")
                        .WithMany("StageNotes")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("OpCentrix.Models.UserSettings", b =>
                {
                    b.HasOne("OpCentrix.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("OpCentrix.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpCentrix.Models.DefectCategory", b =>
                {
                    b.Navigation("InspectionCheckpoints");
                });

            modelBuilder.Entity("OpCentrix.Models.Job", b =>
                {
                    b.Navigation("JobNotes");

                    b.Navigation("JobStages");
                });

            modelBuilder.Entity("OpCentrix.Models.JobStage", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("Dependents");

                    b.Navigation("StageNotes");
                });

            modelBuilder.Entity("OpCentrix.Models.Machine", b =>
                {
                    b.Navigation("Capabilities");
                });

            modelBuilder.Entity("OpCentrix.Models.Part", b =>
                {
                    b.Navigation("JobNotes");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("OpCentrix.Models.User", b =>
                {
                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
