// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpCentrix.Data;

#nullable disable

namespace OpCentrix.Migrations
{
    [DbContext(typeof(SchedulerContext))]
    [Migration("20250725024753_AddSchedulerSettingsTable")]
    partial class AddSchedulerSettingsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("OpCentrix.Models.BuildJob", b =>
                {
                    b.Property<int>("BuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActualStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AssociatedScheduledJobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<float?>("GasUsed_L")
                        .HasColumnType("REAL");

                    b.Property<string>("LaserRunTime")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<float?>("PowderUsed_L")
                        .HasColumnType("REAL");

                    b.Property<string>("PrinterName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReasonForEnd")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScheduledEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScheduledStartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SetupNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("In Progress");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BuildId");

                    b.HasIndex("ActualStartTime");

                    b.HasIndex("AssociatedScheduledJobId");

                    b.HasIndex("PrinterName");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("PrinterName", "ActualStartTime");

                    b.ToTable("BuildJobs");
                });

            modelBuilder.Entity("OpCentrix.Models.BuildJobPart", b =>
                {
                    b.Property<int>("PartEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedHours")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("PartEntryId");

                    b.HasIndex("BuildId");

                    b.HasIndex("IsPrimary");

                    b.HasIndex("PartNumber");

                    b.HasIndex("BuildId", "IsPrimary");

                    b.ToTable("BuildJobParts");
                });

            modelBuilder.Entity("OpCentrix.Models.DelayLog", b =>
                {
                    b.Property<int>("DelayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DelayDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DelayReason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("DelayId");

                    b.HasIndex("BuildId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DelayDuration");

                    b.HasIndex("DelayReason");

                    b.ToTable("DelayLogs");
                });

            modelBuilder.Entity("OpCentrix.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("TEXT");

                    b.Property<double>("ActualPowderUsageKg")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ArgonCostPerHour")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("ArgonPurityPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(99.900000000000006);

                    b.Property<DateTime?>("BuildFileCreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BuildFileName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("BuildFilePath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<long>("BuildFileSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildLayerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildPlatformId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<double>("BuildTemperatureCelsius")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(180.0);

                    b.Property<double>("BuildTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("ChangeoverTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("CoolingTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(240.0);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<double>("CurrentArgonFlowRate")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentBuildTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentLaserPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentOxygenLevel")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("CustomerDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int>("DefectQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DensityPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(99.5);

                    b.Property<double>("EnergyConsumptionKwh")
                        .HasColumnType("REAL");

                    b.Property<double>("EstimatedHours")
                        .HasColumnType("REAL");

                    b.Property<double>("EstimatedPowderUsageKg")
                        .HasColumnType("REAL");

                    b.Property<double>("HatchSpacingMicrons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(120.0);

                    b.Property<string>("HoldReason")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<bool>("IsRushJob")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LaborCostPerHour")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("LaserPowerWatts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(200.0);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<double>("LayerThicknessMicrons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(30.0);

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<decimal>("MachineOperatingCostPerHour")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("MachineUtilizationPercent")
                        .HasColumnType("REAL");

                    b.Property<decimal>("MaterialCostPerKg")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<double>("OpcUaBuildProgress")
                        .HasColumnType("REAL");

                    b.Property<string>("OpcUaErrorMessages")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("OpcUaJobId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("OpcUaLastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpcUaStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Operator")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<double>("OxygenContentPpm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(50.0);

                    b.Property<int>("PartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<double>("PostProcessingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("PowderChangeoverTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(30.0);

                    b.Property<DateTime?>("PowderExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowderLotNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<double>("PowderRecyclePercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(85.0);

                    b.Property<decimal>("PowerCostPerKwh")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("PreheatingTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(60.0);

                    b.Property<string>("PreviousJobPartNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("ProcessParameters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<int>("ProducedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualityCheckpoints")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<string>("QualityInspector")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequiredMaterials")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("SLS Operation,Powder Handling,Inert Gas Safety");

                    b.Property<string>("RequiredTooling")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Build Platform,Powder Sieve,Inert Gas Setup");

                    b.Property<bool>("RequiresArgonPurge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresPostProcessing")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresPowderSieving")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresPreheating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("ReworkQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ScanSpeedMmPerSec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(1200.0);

                    b.Property<DateTime>("ScheduledEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("TEXT");

                    b.Property<double>("SetupTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("SlsMaterial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Ti-6Al-4V Grade 5");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Scheduled");

                    b.Property<string>("Supervisor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<double>("SurfaceRoughnessRa")
                        .HasColumnType("REAL");

                    b.Property<double>("UltimateTensileStrengthMPa")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderNumber");

                    b.HasIndex("MachineId");

                    b.HasIndex("OpcUaJobId");

                    b.HasIndex("PartId");

                    b.HasIndex("PartNumber");

                    b.HasIndex("Priority");

                    b.HasIndex("ScheduledStart");

                    b.HasIndex("SlsMaterial");

                    b.HasIndex("Status");

                    b.HasIndex("MachineId", "ScheduledStart");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("OpCentrix.Models.JobLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("MachineId");

                    b.HasIndex("Timestamp");

                    b.ToTable("JobLogEntries");
                });

            modelBuilder.Entity("OpCentrix.Models.MachineDataSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlarmDataJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<double>("ArgonConsumedM3")
                        .HasColumnType("REAL");

                    b.Property<double>("EnergyConsumptionKwh")
                        .HasColumnType("REAL");

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("PowderConsumedKg")
                        .HasColumnType("REAL");

                    b.Property<string>("ProcessDataJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<string>("QualityDataJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<int>("SlsMachineId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<double>("UtilizationPercent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("SlsMachineId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("MachineId", "Timestamp");

                    b.ToTable("MachineDataSnapshots");
                });

            modelBuilder.Entity("OpCentrix.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ArgonCostPerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("AverageActualHours")
                        .HasColumnType("REAL");

                    b.Property<decimal>("AverageCostPerUnit")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("AverageDefectRate")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageEfficiencyPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("AveragePowderUtilization")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageQualityScore")
                        .HasColumnType("REAL");

                    b.Property<string>("AvgDuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("8h");

                    b.Property<int>("AvgDurationDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildFileTemplate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("CadFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CadFileVersion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumableMaterials")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("CoolingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("CustomerPartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("EstimatedHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(8.0);

                    b.Property<double>("HeightMm")
                        .HasColumnType("REAL");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("System");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("LastProduced")
                        .HasColumnType("TEXT");

                    b.Property<double>("LengthMm")
                        .HasColumnType("REAL");

                    b.Property<decimal>("MachineOperatingCostPerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Ti-6Al-4V Grade 5");

                    b.Property<decimal>("MaterialCostPerKg")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<double>("MaxOxygenContent")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxSurfaceRoughnessRa")
                        .HasColumnType("REAL");

                    b.Property<string>("PartCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartClass")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<decimal>("PostProcessingCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("PostProcessingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("PowderChangeoverTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<double>("PowderRequirementKg")
                        .HasColumnType("REAL");

                    b.Property<string>("PowderSpecification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("15-45 μm particle size");

                    b.Property<string>("PreferredMachines")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("TI1,TI2");

                    b.Property<double>("PreheatingTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("ProcessParameters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("SLS Metal");

                    b.Property<string>("QualityCheckpoints")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<decimal>("QualityInspectionCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("QualityStandards")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("RecommendedBuildTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("RecommendedHatchSpacing")
                        .HasColumnType("REAL");

                    b.Property<double>("RecommendedLaserPower")
                        .HasColumnType("REAL");

                    b.Property<double>("RecommendedLayerThickness")
                        .HasColumnType("REAL");

                    b.Property<double>("RecommendedScanSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("RequiredArgonPurity")
                        .HasColumnType("REAL");

                    b.Property<string>("RequiredCertifications")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredMachineType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("TruPrint 3000");

                    b.Property<string>("RequiredSkills")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequiredTooling")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresAS9100")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresCertification")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresFDA")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresInspection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresNADCAP")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresSupports")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SetupCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("SetupTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("SlsMaterial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Ti-6Al-4V Grade 5");

                    b.Property<decimal>("StandardLaborCostPerHour")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("StandardSellingPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<double>("SupportRemovalTimeMinutes")
                        .HasColumnType("REAL");

                    b.Property<string>("SupportStrategy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SurfaceFinishRequirement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ToleranceRequirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalJobsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalUnitsProduced")
                        .HasColumnType("INTEGER");

                    b.Property<double>("VolumeMm3")
                        .HasColumnType("REAL");

                    b.Property<double>("WeightGrams")
                        .HasColumnType("REAL");

                    b.Property<double>("WidthMm")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Industry");

                    b.HasIndex("IsActive");

                    b.HasIndex("Material");

                    b.HasIndex("PartCategory");

                    b.HasIndex("PartClass");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.HasIndex("ProcessType");

                    b.HasIndex("RequiredMachineType");

                    b.HasIndex("SlsMaterial");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("OpCentrix.Models.SchedulerSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvanceWarningTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(60);

                    b.Property<bool>("AllowConcurrentJobs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("ChangeNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("CrossMaterialChangeoverMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(120);

                    b.Property<int>("DefaultCoolingTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(240);

                    b.Property<int>("DefaultMaterialChangeoverMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(60);

                    b.Property<int>("DefaultPostProcessingTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(90);

                    b.Property<int>("DefaultPreheatingTimeMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(60);

                    b.Property<bool>("EmergencyOverrideEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableWeekendOperations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<TimeSpan>("EveningShiftEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EveningShiftStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("INCMachinePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(5);

                    b.Property<int>("InconelToInconelChangeoverMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(45);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("MaxJobsPerMachinePerDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(8);

                    b.Property<int>("MinimumTimeBetweenJobsMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(15);

                    b.Property<TimeSpan>("NightShiftEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("NightShiftStart")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotifyOnMaterialChanges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("NotifyOnScheduleConflicts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("QualityCheckRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("RequiredOperatorCertification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("SLS Basic");

                    b.Property<bool>("SaturdayOperations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("SetupTimeBufferMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30);

                    b.Property<TimeSpan>("StandardShiftEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StandardShiftStart")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SundayOperations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("TI1MachinePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(5);

                    b.Property<int>("TI2MachinePriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(5);

                    b.Property<int>("TitaniumToTitaniumChangeoverMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("SchedulerSettings");
                });

            modelBuilder.Entity("OpCentrix.Models.SlsMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AmbientTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("ArgonFlowRate")
                        .HasColumnType("REAL");

                    b.Property<double>("ArgonPressure")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageUtilizationPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("BuildHeightMm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(300.0);

                    b.Property<double>("BuildLengthMm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(250.0);

                    b.Property<double>("BuildWidthMm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(250.0);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<double>("CurrentBuildHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentBuildProgress")
                        .HasColumnType("REAL");

                    b.Property<double>("CurrentBuildTemperature")
                        .HasColumnType("REAL");

                    b.Property<int?>("CurrentJobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CurrentJobStartTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentLaserPower")
                        .HasColumnType("REAL");

                    b.Property<string>("CurrentMaterial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentOxygenLevel")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("EstimatedCompletionTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("HoursSinceLastMaintenance")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAvailableForScheduling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<double>("LaserOnTime")
                        .HasColumnType("REAL");

                    b.Property<bool>("LaserStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("LastPowderRefill")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastStatusUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineModel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("TruPrint 3000");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("MaintenanceIntervalHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(500.0);

                    b.Property<string>("MaintenanceNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxLaserPowerWatts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(400.0);

                    b.Property<double>("MaxLayerThicknessMicrons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(60.0);

                    b.Property<double>("MaxScanSpeedMmPerSec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(7000.0);

                    b.Property<double>("MinLayerThicknessMicrons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(20.0);

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpcUaConnectionStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Disconnected");

                    b.Property<bool>("OpcUaEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpcUaEndpointUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OpcUaLastConnection")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpcUaNamespace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpcUaPasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpcUaUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatorNotes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<double>("PowderLevelPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("PowderRemainingKg")
                        .HasColumnType("REAL");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<double>("QualityScorePercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(100.0);

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Offline");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SupportedMaterials")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Ti-6Al-4V Grade 5,Ti-6Al-4V ELI Grade 23");

                    b.Property<double>("TargetBuildTemperature")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalJobsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLayersCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLayersPlanned")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalOperatingHours")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalPartsPrinted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentJobId");

                    b.HasIndex("CurrentMaterial");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsAvailableForScheduling");

                    b.HasIndex("LastStatusUpdate");

                    b.HasIndex("MachineId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("SlsMachines");
                });

            modelBuilder.Entity("OpCentrix.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Role");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OpCentrix.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BrowserNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("DefaultPage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("/Scheduler");

                    b.Property<bool>("EmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("ItemsPerPage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(20);

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("SessionTimeoutMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(120);

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Light");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("UTC");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("OpCentrix.Models.BuildJob", b =>
                {
                    b.HasOne("OpCentrix.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpCentrix.Models.BuildJobPart", b =>
                {
                    b.HasOne("OpCentrix.Models.BuildJob", "BuildJob")
                        .WithMany()
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildJob");
                });

            modelBuilder.Entity("OpCentrix.Models.DelayLog", b =>
                {
                    b.HasOne("OpCentrix.Models.BuildJob", "BuildJob")
                        .WithMany()
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildJob");
                });

            modelBuilder.Entity("OpCentrix.Models.Job", b =>
                {
                    b.HasOne("OpCentrix.Models.Part", "Part")
                        .WithMany("Jobs")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("OpCentrix.Models.MachineDataSnapshot", b =>
                {
                    b.HasOne("OpCentrix.Models.SlsMachine", "SlsMachine")
                        .WithMany()
                        .HasForeignKey("SlsMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlsMachine");
                });

            modelBuilder.Entity("OpCentrix.Models.SlsMachine", b =>
                {
                    b.HasOne("OpCentrix.Models.Job", "CurrentJob")
                        .WithMany()
                        .HasForeignKey("CurrentJobId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentJob");
                });

            modelBuilder.Entity("OpCentrix.Models.UserSettings", b =>
                {
                    b.HasOne("OpCentrix.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("OpCentrix.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpCentrix.Models.Part", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("OpCentrix.Models.User", b =>
                {
                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
