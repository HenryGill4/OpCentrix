@page
@model OpCentrix.Pages.Operations.DashboardModel
@{
    ViewData["Title"] = "Operator Dashboard";
    Layout = "_Layout";
}

@section Styles {
    <style>
    /* Operator Dashboard CSS - Mobile-optimized following PrintTracking patterns */
    .operator-dashboard {
        min-height: 100vh;
        background-color: #f8f9fa;
        padding: 1rem;
        max-width: 800px;
        margin: 0 auto;
    }

    /* Header styling - matches PrintTracking */
    .operator-header {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .operator-header h2 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .current-operator {
        margin-top: 0.5rem;
        font-size: 0.875rem;
        opacity: 0.9;
    }

    /* Dashboard statistics */
    .dashboard-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .stat-card {
        background: white;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #007bff;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #007bff;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.75rem;
        color: #666;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Section styling */
    .dashboard-section {
        margin-bottom: 2rem;
    }

    .section-header {
        background: white;
        border-radius: 8px 8px 0 0;
        padding: 1rem 1.25rem;
        border-bottom: 2px solid #e9ecef;
        margin-bottom: 0;
    }

    .section-header h3 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
        color: #333;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .section-content {
        background: white;
        border-radius: 0 0 8px 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Stage cards */
    .stage-card {
        padding: 1.25rem;
        border-bottom: 1px solid #e9ecef;
        transition: background-color 0.2s ease;
    }

    .stage-card:last-child {
        border-bottom: none;
        border-radius: 0 0 8px 8px;
    }

    .stage-card:hover {
        background-color: #f8f9fa;
    }

    .stage-card.active {
        border-left: 4px solid #28a745;
        background-color: #f8fff9;
    }

    .stage-card.available {
        border-left: 4px solid #007bff;
    }

    .stage-info {
        margin-bottom: 1rem;
    }

    .stage-info h4 {
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        font-weight: 600;
        color: #333;
    }

    .stage-info p {
        margin: 0.25rem 0;
        font-size: 0.875rem;
        color: #666;
    }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 3rem 1.5rem;
        color: #6c757d;
        background: white;
        border-radius: 0 0 8px 8px;
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-state h4 {
        margin-bottom: 0.5rem;
        color: #6c757d;
    }

    .empty-state p {
        margin-bottom: 1.5rem;
    }

    /* Buttons - Touch-friendly for tablets */
    .btn {
        min-height: 44px;
        min-width: 120px;
        font-size: 1rem;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
        color: #212529;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    /* Loading indicator */
    .htmx-indicator {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .htmx-indicator.htmx-request {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    /* Mobile responsive */
    @@media (max-width: 768px) {
        .operator-dashboard {
            padding: 0.75rem;
        }

        .operator-header {
            padding: 1rem;
        }

        .dashboard-stats {
            grid-template-columns: repeat(2, 1fr);
        }

        .btn {
            width: 100%;
            margin-top: 0.75rem;
        }

        .stage-card {
            padding: 1rem;
        }
    }

    /* Ultra mobile (phones) */
    @@media (max-width: 480px) {
        .dashboard-stats {
            grid-template-columns: 1fr;
        }

        .section-header h3 {
            font-size: 1rem;
        }

        .stage-info h4 {
            font-size: 0.9rem;
        }
    }
    </style>
}

<div class="operator-dashboard" id="operator-dashboard">
    <!-- Header - PrintTracking Pattern -->
    <div class="operator-header">
        <h2><i class="fas fa-user-hard-hat me-2"></i>OPERATOR DASHBOARD</h2>
        <div class="current-operator">
            <strong>Current Operator:</strong> @Model.CurrentOperator
            <span class="ms-2">(@Model.UserRole)</span>
        </div>
    </div>

    <!-- Dashboard Statistics -->
    <div class="dashboard-stats">
        <div class="stat-card">
            <div class="stat-value">@Model.TotalActiveStages</div>
            <div class="stat-label">Active Stages</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@Model.TotalAvailableStages</div>
            <div class="stat-label">Available</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@Model.TotalHoursToday.ToString("F1")</div>
            <div class="stat-label">Hours Today</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@Model.CompletedStagesThisShift</div>
            <div class="stat-label">Completed</div>
        </div>
    </div>

    <!-- Dashboard Content -->
    <div id="dashboard-content">
        <!-- My Active Stages Section -->
        <div class="dashboard-section">
            <div class="section-header">
                <h3>
                    <i class="fas fa-play-circle text-success"></i>
                    MY ACTIVE STAGES
                </h3>
            </div>
            <div class="section-content">
                @if (Model.MyActiveStages.Any())
                {
                    @foreach(var stage in Model.MyActiveStages)
                    {
                        <div class="stage-card active" id="active-stage-@stage.ExecutionId">
                            <div class="stage-info">
                                <h4>@stage.JobPartNumber - @stage.StageName</h4>
                                <p><i class="fas fa-clock"></i> Started: @stage.StartTime.ToString("MMM dd, HH:mm")</p>
                                <p><i class="fas fa-hourglass-half"></i> Estimated: @stage.EstimatedHours.ToString("F1") hours</p>
                                <p><i class="fas fa-stopwatch"></i> Elapsed: @((DateTime.Now - stage.StartTime).TotalHours.ToString("F1")) hours</p>
                            </div>
                            <button class="btn btn-warning" 
                                    hx-post="/Operations/Dashboard?handler=PunchOut"
                                    hx-vals='{"jobId": @stage.JobId, "stageId": @stage.StageId}'
                                    hx-confirm="Are you sure you want to punch out of this stage?"
                                    hx-target="#active-stage-@stage.ExecutionId"
                                    hx-indicator="#loading-indicator">
                                <i class="fas fa-stop me-1"></i>Punch Out
                            </button>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-clock"></i>
                        <h4>No Active Stages</h4>
                        <p>You are not currently working on any stages. Select a job below to get started.</p>
                    </div>
                }
            </div>
        </div>

        <!-- Available Stages Section -->
        <div class="dashboard-section">
            <div class="section-header">
                <h3>
                    <i class="fas fa-list text-primary"></i>
                    AVAILABLE STAGES
                </h3>
            </div>
            <div class="section-content">
                @if (Model.AvailableStages.Any())
                {
                    @foreach(var stage in Model.AvailableStages)
                    {
                        <div class="stage-card available" id="available-stage-@stage.JobId-@stage.StageId">
                            <div class="stage-info">
                                <h4>@stage.JobPartNumber - @stage.StageName</h4>
                                <p><i class="fas fa-cogs"></i> Machine: @stage.MachineId | <i class="fas fa-hourglass-half"></i> Est: @stage.EstimatedHours.ToString("F1")h</p>
                                <p><i class="fas fa-flag"></i> Priority: @stage.Priority | <i class="fas fa-info-circle"></i> Status: @stage.Status</p>
                                <p><i class="fas fa-calendar"></i> Scheduled: @stage.ScheduledStart.ToString("MMM dd, HH:mm")</p>
                            </div>
                            <button class="btn btn-success" 
                                    hx-post="/Operations/Dashboard?handler=PunchIn"
                                    hx-vals='{"jobId": @stage.JobId, "stageId": @stage.StageId}'
                                    hx-target="#available-stage-@stage.JobId-@stage.StageId"
                                    hx-indicator="#loading-indicator">
                                <i class="fas fa-play me-1"></i>Punch In
                            </button>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-check-circle"></i>
                        <h4>No Available Stages</h4>
                        <p>There are no stages available for you to work on at this time.</p>
                        <a href="/Operations/StageDashboard" class="btn btn-primary">
                            <i class="fas fa-eye me-1"></i>View Stage Dashboard
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Quick Action Buttons (Fixed Position) - PrintTracking Pattern -->
    <div class="fixed-bottom p-3 d-flex justify-content-end" style="pointer-events: none;">
        <div style="pointer-events: auto;">
            <button id="refresh-dashboard-btn" 
                    class="btn btn-primary rounded-circle p-3 me-2"
                    style="width: 56px; height: 56px;"
                    hx-get="/Operations/Dashboard?handler=RefreshDashboard"
                    hx-target="#dashboard-content"
                    hx-indicator="#loading-indicator"
                    title="Refresh Dashboard">
                <i class="fas fa-sync-alt"></i>
            </button>
            <a href="/Operations/StageDashboard" 
               class="btn btn-secondary rounded-circle p-3"
               style="width: 56px; height: 56px;"
               title="Stage Dashboard">
                <i class="fas fa-industry"></i>
            </a>
        </div>
    </div>
</div>

<!-- Loading Indicator - PrintTracking Pattern -->
<div id="loading-indicator" class="htmx-indicator">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <div class="ms-2">Processing...</div>
</div>

<!-- Toast Container - PrintTracking Pattern -->
<div id="toast-container" class="fixed-top mt-3 me-3" style="z-index: 9999; right: 0; max-width: 350px; pointer-events: none;"></div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    'use strict';
    
    // Operator Dashboard Global Namespace - Following PrintTracking patterns
    window.OperatorDashboard = window.OperatorDashboard || {
        initialized: false,
        autoRefreshInterval: null,
        currentOperator: @Json.Serialize(Model.CurrentOperator),
        debug: true
    };

    console.log(`?? [OPERATOR-DASHBOARD] Dashboard initialized for operator: ${OperatorDashboard.currentOperator}`);

    // Enhanced HTMX response handling - PrintTracking pattern
    document.body.addEventListener('htmx:afterRequest', function(event) {
        if (event.detail.requestConfig.path.includes('Dashboard')) {
            const xhr = event.detail.xhr;
            
            if (xhr.status === 200) {
                try {
                    const response = JSON.parse(xhr.responseText);
                    if (response.success) {
                        showToast(response.message, 'success');
                        
                        // Auto-refresh dashboard after successful punch in/out
                        setTimeout(() => {
                            htmx.ajax('GET', '/Operations/Dashboard?handler=RefreshDashboard', {
                                target: '#dashboard-content',
                                swap: 'innerHTML'
                            });
                        }, 1000);
                    } else {
                        showToast(response.message || 'Operation failed', 'error');
                    }
                } catch (e) {
                    // HTML response, probably a refresh - that's fine
                    console.log('Operator Dashboard: Content refreshed');
                }
            } else {
                showToast(`Request failed (${xhr.status})`, 'error');
            }
        }
    });

    document.body.addEventListener('htmx:responseError', function(event) {
        console.error('Operator Dashboard: Request failed', event.detail);
        showToast('Request failed. Please check your connection.', 'error');
    });

    // Toast notification system - PrintTracking pattern
    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toast-container');
        if (!toastContainer) return;

        const toast = document.createElement('div');
        toast.className = `
            alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show mb-2
            pointer-events-auto
        `;
        toast.style.cssText = 'transform: translateX(100%); transition: transform 0.3s ease-in-out;';
        
        toast.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
                <div class="flex-grow-1">${message}</div>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        toastContainer.appendChild(toast);
        
        // Animate in
        requestAnimationFrame(() => {
            toast.style.transform = 'translateX(0)';
        });
        
        // Auto remove
        setTimeout(() => {
            if (toast.parentNode) {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }
        }, type === 'success' ? 5000 : 8000);
    }

    // Auto-refresh functionality - PrintTracking pattern
    OperatorDashboard.startAutoRefresh = function() {
        if (OperatorDashboard.autoRefreshInterval) {
            clearInterval(OperatorDashboard.autoRefreshInterval);
        }

        OperatorDashboard.autoRefreshInterval = setInterval(() => {
            console.log('?? [OPERATOR-DASHBOARD] Auto-refreshing...');

            if (typeof htmx !== 'undefined') {
                htmx.ajax('GET', '/Operations/Dashboard?handler=RefreshDashboard', {
                    target: '#dashboard-content',
                    swap: 'innerHTML'
                }).then(() => {
                    console.log('? [OPERATOR-DASHBOARD] Auto-refresh completed');
                }).catch((error) => {
                    console.warn('?? [OPERATOR-DASHBOARD] Auto-refresh failed:', error);
                });
            }
        }, 30000); // 30 seconds

        console.log('?? [OPERATOR-DASHBOARD] Auto-refresh started (30-second interval)');
    };

    // Enhanced keyboard shortcuts
    document.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.key === 'r') {
            event.preventDefault();
            htmx.trigger('#refresh-dashboard-btn', 'click');
        }
    });

    // Start auto-refresh
    OperatorDashboard.startAutoRefresh();
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', function() {
        if (OperatorDashboard.autoRefreshInterval) {
            clearInterval(OperatorDashboard.autoRefreshInterval);
        }
    });

    // Initialize page visibility API for performance
    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            // Page is hidden, reduce refresh frequency
            if (OperatorDashboard.autoRefreshInterval) {
                clearInterval(OperatorDashboard.autoRefreshInterval);
            }
        } else {
            // Page is visible, resume normal refresh
            OperatorDashboard.startAutoRefresh();
        }
    });

    OperatorDashboard.initialized = true;
    console.log('? [OPERATOR-DASHBOARD] Operator Dashboard initialized successfully');
});
</script>
}