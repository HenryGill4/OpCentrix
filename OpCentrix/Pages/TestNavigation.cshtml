@page "/TestNavigation"
@model OpCentrix.Pages.TestNavigationModel
@{
    ViewData["Title"] = "Click-Through Testing Navigation";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<style>
    .test-section {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        padding: 20px;
    }
    .test-link {
        display: inline-block;
        padding: 8px 16px;
        margin: 4px;
        background: #3b82f6;
        color: white;
        text-decoration: none;
        border-radius: 6px;
        transition: background-color 0.2s;
    }
    .test-link:hover {
        background: #2563eb;
        color: white;
        text-decoration: none;
    }
    .admin-link {
        background: #ef4444;
    }
    .admin-link:hover {
        background: #dc2626;
    }
    .scheduler-link {
        background: #10b981;
    }
    .scheduler-link:hover {
        background: #059669;
    }
    .department-link {
        background: #f59e0b;
    }
    .department-link:hover {
        background: #d97706;
    }
    .test-controls {
        background: #f3f4f6;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
    }
    .error-summary {
        background: #fef2f2;
        border: 1px solid #fecaca;
        border-radius: 8px;
        padding: 15px;
        margin-top: 20px;
    }
    .success-summary {
        background: #f0fdf4;
        border: 1px solid #bbf7d0;
        border-radius: 8px;
        padding: 15px;
        margin-top: 20px;
    }
</style>

<div class="container mx-auto px-4 py-8">
    <div class="max-w-6xl mx-auto">
        <h1 class="text-3xl font-bold text-gray-900 mb-8">?? OpCentrix Click-Through Testing</h1>
        
        <div class="test-controls">
            <h2 class="text-xl font-semibold mb-4">Testing Controls</h2>
            <p class="text-gray-600 mb-4">Use these controls to manage your click-through testing session:</p>
            
            <div class="flex flex-wrap gap-4 mb-4">
                <button onclick="startClickThroughTest()" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded">
                    ?? Start Testing
                </button>
                <button onclick="debugErrors()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
                    ?? View Errors
                </button>
                <button onclick="debugPage()" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded">
                    ?? View Page Info
                </button>
                <button onclick="getClickThroughReport()" class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded">
                    ?? Get Report
                </button>
                <button onclick="clearErrors()" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded">
                    ??? Clear Errors
                </button>
            </div>
            
            <div class="bg-blue-50 border border-blue-200 rounded p-4">
                <h3 class="font-semibold text-blue-800 mb-2">How to Use:</h3>
                <ol class="list-decimal list-inside text-blue-700 space-y-1">
                    <li>Click "Start Testing" to begin error monitoring</li>
                    <li>Navigate through pages using the links below</li>
                    <li>Try filling out forms, clicking buttons, and interacting with features</li>
                    <li>Check the browser console for real-time error logging</li>
                    <li>Use "View Errors" and "Get Report" to see comprehensive error information</li>
                </ol>
            </div>
        </div>

        <!-- Admin Section -->
        <div class="test-section">
            <h2 class="text-2xl font-semibold text-red-600 mb-4">??? Admin Pages (Requires Admin Role)</h2>
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                <a href="/Admin" class="test-link admin-link">Dashboard</a>
                <a href="/Admin/Users" class="test-link admin-link">Users</a>
                <a href="/Admin/Roles" class="test-link admin-link">Roles</a>
                <a href="/Admin/Settings" class="test-link admin-link">Settings</a>
                <a href="/Admin/Logs" class="test-link admin-link">Logs</a>
                <a href="/Admin/Machines" class="test-link admin-link">Machines</a>
                <a href="/Admin/Parts" class="test-link admin-link">Parts</a>
                <a href="/Admin/Shifts" class="test-link admin-link">Shifts</a>
                <a href="/Admin/Jobs" class="test-link admin-link">Jobs</a>
                <a href="/Admin/Stages" class="test-link admin-link">Stages</a>
                <a href="/Admin/Checkpoints" class="test-link admin-link">Checkpoints</a>
                <a href="/Admin/Defects" class="test-link admin-link">Defects</a>
                <a href="/Admin/Archive" class="test-link admin-link">Archive</a>
                <a href="/Admin/Database" class="test-link admin-link">Database</a>
            </div>
        </div>

        <!-- Scheduler Section -->
        <div class="test-section">
            <h2 class="text-2xl font-semibold text-green-600 mb-4">?? Scheduler Pages</h2>
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                <a href="/Scheduler" class="test-link scheduler-link">Main Scheduler</a>
                <a href="/Scheduler/MasterSchedule" class="test-link scheduler-link">Master Schedule</a>
                <a href="/Scheduler/JobLog" class="test-link scheduler-link">Job Log</a>
            </div>
        </div>

        <!-- Department Pages -->
        <div class="test-section">
            <h2 class="text-2xl font-semibold text-yellow-600 mb-4">?? Department Pages</h2>
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                <a href="/Printing" class="test-link department-link">Printing</a>
                <a href="/Coating" class="test-link department-link">Coating</a>
                <a href="/EDM" class="test-link department-link">EDM</a>
                <a href="/Machining" class="test-link department-link">Machining</a>
                <a href="/QC" class="test-link department-link">QC</a>
                <a href="/Shipping" class="test-link department-link">Shipping</a>
                <a href="/PrintTracking" class="test-link department-link">Print Tracking</a>
                <a href="/Analytics" class="test-link department-link">Analytics</a>
                <a href="/Media" class="test-link department-link">Media</a>
            </div>
        </div>

        <!-- General Pages -->
        <div class="test-section">
            <h2 class="text-2xl font-semibold text-blue-600 mb-4">?? General Pages</h2>
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                <a href="/" class="test-link">Home</a>
                <a href="/Account/Login" class="test-link">Login</a>
                <a href="/Account/Settings" class="test-link">Account Settings</a>
                <a href="/Privacy" class="test-link">Privacy</a>
                <a href="/health" class="test-link">Health Check</a>
            </div>
        </div>

        <!-- Error Summary Area -->
        <div id="error-summary-area"></div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('?? Click-Through Testing Page Loaded');
    
    // Auto-start testing mode
    if (typeof window.startClickThroughTest === 'function') {
        window.startClickThroughTest();
        console.log('? Click-through testing automatically started');
    } else {
        console.warn('?? Click-through testing functions not yet loaded, will retry...');
        setTimeout(() => {
            if (typeof window.startClickThroughTest === 'function') {
                window.startClickThroughTest();
                console.log('? Click-through testing started on retry');
            }
        }, 1000);
    }
    
    // Enhanced link monitoring
    document.querySelectorAll('.test-link').forEach(link => {
        link.addEventListener('click', function(e) {
            const url = this.href;
            const linkText = this.textContent;
            
            console.log(`?? [TEST] Navigating to: ${linkText} (${url})`);
            
            // Store navigation info for tracking
            if (window.OpCentrixPageMonitor) {
                window.OpCentrixPageMonitor.logInteraction('test-navigation', {
                    target: this,
                    detail: { url: url, linkText: linkText }
                });
            }
        });
    });
    
    // Periodic error summary updates
    setInterval(updateErrorSummary, 5000);
});

function updateErrorSummary() {
    const summaryArea = document.getElementById('error-summary-area');
    if (!summaryArea || !window.ErrorLogger) return;
    
    const errorCount = window.ErrorLogger.errors.length;
    const recentErrors = window.ErrorLogger.errors.slice(-3);
    
    if (errorCount === 0) {
        summaryArea.innerHTML = `
            <div class="success-summary">
                <h3 class="text-green-800 font-semibold">? No Errors Detected</h3>
                <p class="text-green-600">All pages are functioning normally. Total interactions: ${window.PageMonitor?.interactions?.length || 0}</p>
            </div>
        `;
    } else {
        const errorList = recentErrors.map(error => 
            `<li class="text-red-700"><strong>${error.category}</strong>: ${error.operation} - ${error.error.message}</li>`
        ).join('');
        
        summaryArea.innerHTML = `
            <div class="error-summary">
                <h3 class="text-red-800 font-semibold">?? ${errorCount} Error(s) Detected</h3>
                <p class="text-red-600 mb-2">Recent errors:</p>
                <ul class="list-disc list-inside">
                    ${errorList}
                </ul>
                <p class="text-red-600 mt-2">Open browser console and run <code>debugErrors()</code> for full details.</p>
            </div>
        `;
    }
}

// Export functions for manual testing
window.testAllAdminPages = async function() {
    const adminLinks = document.querySelectorAll('.admin-link');
    console.log(`?? Testing ${adminLinks.length} admin pages...`);
    
    for (let i = 0; i < adminLinks.length; i++) {
        const link = adminLinks[i];
        console.log(`?? Testing page ${i+1}/${adminLinks.length}: ${link.textContent}`);
        
        // Simulate click and wait for page load
        window.open(link.href, '_blank');
        await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('? Admin page testing completed');
};

window.testAllDepartmentPages = async function() {
    const deptLinks = document.querySelectorAll('.department-link');
    console.log(`?? Testing ${deptLinks.length} department pages...`);
    
    for (let i = 0; i < deptLinks.length; i++) {
        const link = deptLinks[i];
        console.log(`?? Testing page ${i+1}/${deptLinks.length}: ${link.textContent}`);
        
        // Simulate click and wait for page load
        window.open(link.href, '_blank');
        await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('? Department page testing completed');
};
</script>