@page
@model OpCentrix.Pages.EDMModel
@{
    ViewData["Title"] = "EDM Operations";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<!-- GLOBAL SAFE EXECUTION WRAPPER - DEFINED FIRST -->
<script>
    window.SafeExecute = {
        call: function(functionName, ...args) {
            const operationId = this.generateOperationId();
            console.log(`?? [EDM-${operationId}] Executing: ${functionName}`);
            
            try {
                if (typeof window[functionName] === 'function') {
                    const result = window[functionName].apply(this, args);
                    console.log(`? [EDM-${operationId}] ${functionName} completed successfully`);
                    return result;
                } else {
                    throw new Error(`Function ${functionName} not found`);
                }
            } catch (error) {
                this.logError(operationId, functionName, error);
                this.showUserFriendlyError(functionName, error);
                return false;
            }
        },
        
        generateOperationId: function() {
            return Math.random().toString(36).substr(2, 8);
        },
        
        logError: function(operationId, functionName, error) {
            console.error(`? [EDM-${operationId}] Error in ${functionName}:`, error);
            
            try {
                const errors = JSON.parse(localStorage.getItem('edm_errors') || '[]');
                errors.push({
                    id: operationId,
                    function: functionName,
                    error: error.message,
                    timestamp: new Date().toISOString()
                });

                // Limit stored errors to the most recent 10
                if (errors.length > 10) {
                    errors.shift();
                }

                localStorage.setItem('edm_errors', JSON.stringify(errors));
            } catch (e) {
                console.warn('Failed to store error:', e);
            }
        },
        
        showUserFriendlyError: function(functionName, error) {
            const friendlyMessages = {
                'generatePrintout': 'Unable to generate the EDM log printout. Please check that all required fields are filled out.',
                'printAndStore': 'Unable to print and store the log. Please try generating the printout again.',
                'clearForm': 'Unable to clear the form. Please refresh the page and try again.',
                'viewStoredLogs': 'Unable to view stored logs. Please try again.',
                'saveLogToDatabase': 'Unable to save the log to database. Please check your connection and try again.'
            };
            
            const message = friendlyMessages[functionName] || `An error occurred with ${functionName}. Please try again.`;
            this.showNotification('error', message, error.message);
        },
        
        showNotification: function(type, message, detail) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-md ${
                type === 'error' ? 'bg-red-500 text-white' : 
                type === 'warning' ? 'bg-yellow-500 text-black' : 
                'bg-green-500 text-white'
            }`;
            
            notification.innerHTML = `
                <div class="flex items-start">
                    <div class="flex-shrink-0">
                        ${type === 'error' ? '?' : type === 'warning' ? '??' : '?'}
                    </div>
                    <div class="ml-3">
                        <p class="font-semibold">${message}</p>
                        ${detail ? `<p class="text-sm opacity-90 mt-1">${detail}</p>` : ''}
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-auto pl-3 text-lg opacity-70 hover:opacity-100">×</button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }
    };

    console.log('?? [EDM] SafeExecute initialized globally');
</script>

<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">EDM Operations</h1>
            <p class="text-gray-600 mt-2">Electrical Discharge Machining Log & Documentation</p>
        </div>
        <div class="flex space-x-3">
            <button type="button" onclick="event.preventDefault(); SafeExecute.call('viewStoredLogs')" class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition">
                ?? View Stored Logs (<span id="logCount">@Model.TotalLogsCount</span>)
            </button>
            <button type="button" onclick="event.preventDefault(); SafeExecute.call('clearForm')" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition">
                Clear Form
            </button>
            <button type="button" onclick="event.preventDefault(); SafeExecute.call('generatePrintout')" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition">
                Generate EDM Log
            </button>
        </div>
    </div>
</div>

<!-- Usage Statistics -->
<div class="bg-gradient-to-r from-indigo-500 to-purple-600 rounded-lg shadow-lg p-6 mb-8 text-white">
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div class="text-center">
            <div class="text-3xl font-bold" id="totalLogsCount">@Model.TotalLogsCount</div>
            <div class="text-sm opacity-90">Total Logs Created</div>
        </div>
        <div class="text-center">
            <div class="text-3xl font-bold" id="todayLogsCount">@Model.TodayLogsCount</div>
            <div class="text-sm opacity-90">Logs Today</div>
        </div>
        <div class="text-center">
            <div class="text-3xl font-bold" id="currentOperator">@User.Identity?.Name</div>
            <div class="text-sm opacity-90">Current Operator</div>
        </div>
        <div class="text-center">
            <div class="text-3xl font-bold" id="lastLogTime">@Model.LastLogTime</div>
            <div class="text-sm opacity-90">Last Log Created</div>
        </div>
    </div>
</div>

<!-- EDM Log Form -->
<div class="bg-white rounded-lg shadow-lg overflow-hidden mb-8">
    <div class="bg-gradient-to-r from-purple-600 to-blue-600 px-6 py-4">
        <h2 class="text-xl font-semibold text-white flex items-center">
            <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
            EDM Operation Log Entry #<span id="nextLogNumber">@Model.NextLogNumber</span>
        </h2>
    </div>
    
    <form id="edmLogForm" class="p-6" asp-page-handler="SaveLog" method="post">
        @Html.AntiForgeryToken()
        <input asp-for="LogEntry.Id" type="hidden" id="logId" />
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Basic Information -->
            <div class="space-y-4">
                <h3 class="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2 flex items-center">
                    <span class="bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">1</span>
                    Basic Information
                </h3>
                
                <div>
                    <label asp-for="LogEntry.PartNumber" class="block text-sm font-medium text-gray-700 mb-2">
                        Part Number <span class="text-red-500">*</span>
                    </label>
                    <input asp-for="LogEntry.PartNumber" 
                           type="text" 
                           id="partNumber" 
                           placeholder="e.g., EDM-001-2024" 
                           required
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg font-mono">
                    <span asp-validation-for="LogEntry.PartNumber" class="text-red-500 text-sm"></span>
                </div>

                <div>
                    <label asp-for="LogEntry.Quantity" class="block text-sm font-medium text-gray-700 mb-2">
                        Quantity <span class="text-red-500">*</span>
                    </label>
                    <input asp-for="LogEntry.Quantity" 
                           type="number" 
                           id="quantity" 
                           placeholder="1" 
                           min="1"
                           required
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg">
                    <span asp-validation-for="LogEntry.Quantity" class="text-red-500 text-sm"></span>
                </div>

                <div>
                    <label asp-for="LogEntry.LogDate" class="block text-sm font-medium text-gray-700 mb-2">
                        Date <span class="text-red-500">*</span>
                    </label>
                    <input asp-for="LogEntry.LogDate" 
                           type="date" 
                           id="logDate" 
                           required
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg">
                    <span asp-validation-for="LogEntry.LogDate" class="text-red-500 text-sm"></span>
                </div>

                <div>
                    <label asp-for="LogEntry.Shift" class="block text-sm font-medium text-gray-700 mb-2">
                        Shift
                    </label>
                    <select asp-for="LogEntry.Shift" id="shift" class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg">
                        <option value="">Select Shift</option>
                        <option value="Day (7AM-3PM)">Day (7AM-3PM)</option>
                        <option value="Evening (3PM-11PM)">Evening (3PM-11PM)</option>
                        <option value="Night (11PM-7AM)">Night (11PM-7AM)</option>
                    </select>
                </div>
            </div>

            <!-- Operator Information -->
            <div class="space-y-4">
                <h3 class="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2 flex items-center">
                    <span class="bg-green-100 text-green-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">2</span>
                    Operator Information
                </h3>
                
                <div>
                    <label asp-for="LogEntry.OperatorName" class="block text-sm font-medium text-gray-700 mb-2">
                        Operator Name <span class="text-red-500">*</span>
                    </label>
                    <input asp-for="LogEntry.OperatorName" 
                           type="text" 
                           id="edmCutBy" 
                           placeholder="Full Name" 
                           value="@User.Identity?.Name"
                           required
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg">
                    <span asp-validation-for="LogEntry.OperatorName" class="text-red-500 text-sm"></span>
                </div>

                <div>
                    <label asp-for="LogEntry.OperatorInitials" class="block text-sm font-medium text-gray-700 mb-2">
                        Operator Initials <span class="text-red-500">*</span>
                    </label>
                    <input asp-for="LogEntry.OperatorInitials" 
                           type="text" 
                           id="edmInitials" 
                           placeholder="AB" 
                           maxlength="4"
                           required
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg font-mono text-center">
                    <span asp-validation-for="LogEntry.OperatorInitials" class="text-red-500 text-sm"></span>
                </div>

                <div>
                    <label asp-for="LogEntry.StartTime" class="block text-sm font-medium text-gray-700 mb-2">
                        Start Time
                    </label>
                    <input asp-for="LogEntry.StartTime" 
                           type="time" 
                           id="startTime" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg">
                </div>

                <div>
                    <label asp-for="LogEntry.EndTime" class="block text-sm font-medium text-gray-700 mb-2">
                        End Time
                    </label>
                    <input asp-for="LogEntry.EndTime" 
                           type="time" 
                           id="endTime" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg">
                </div>
            </div>

            <!-- Measurements & Quality -->
            <div class="space-y-4">
                <h3 class="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2 flex items-center">
                    <span class="bg-yellow-100 text-yellow-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">3</span>
                    Measurements & Quality
                </h3>
                
                <div>
                    <label asp-for="LogEntry.Measurement1" class="block text-sm font-medium text-gray-700 mb-2">
                        Measurement 1 (mm)
                    </label>
                    <input asp-for="LogEntry.Measurement1" 
                           type="text" 
                           id="measurement1" 
                           placeholder="±0.001" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg font-mono">
                </div>

                <div>
                    <label asp-for="LogEntry.Measurement2" class="block text-sm font-medium text-gray-700 mb-2">
                        Measurement 2 (mm)
                    </label>
                    <input asp-for="LogEntry.Measurement2" 
                           type="text" 
                           id="measurement2" 
                           placeholder="±0.001" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg font-mono">
                </div>

                <div>
                    <label asp-for="LogEntry.ToleranceStatus" class="block text-sm font-medium text-gray-700 mb-2">
                        Tolerance Status
                    </label>
                    <select asp-for="LogEntry.ToleranceStatus" id="tolerance" class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg">
                        <option value="">Select Status</option>
                        <option value="? Within Tolerance">? Within Tolerance</option>
                        <option value="?? Close to Limit">?? Close to Limit</option>
                        <option value="? Out of Tolerance">? Out of Tolerance</option>
                    </select>
                </div>

                <div>
                    <label asp-for="LogEntry.ScrapIssues" class="block text-sm font-medium text-gray-700 mb-2">
                        Scrap/Issues
                    </label>
                    <input asp-for="LogEntry.ScrapIssues" 
                           type="text" 
                           id="EDMScrap" 
                           placeholder="None" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg">
                </div>
            </div>
        </div>

        <!-- Notes Section (Full Width) -->
        <div class="mt-6">
            <label asp-for="LogEntry.Notes" class="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                <span class="bg-purple-100 text-purple-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded">4</span>
                Notes & Comments
            </label>
            <textarea asp-for="LogEntry.Notes" 
                      id="Notes" 
                      rows="4" 
                      placeholder="Enter any additional notes, observations, setup details, or special instructions..."
                      class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg"></textarea>
        </div>

        <!-- Form Actions -->
        <div class="mt-6 flex justify-between">
            <button type="button" onclick="event.preventDefault(); SafeExecute.call('saveLogToDatabase')" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition text-lg font-semibold" id="saveButton">
                <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                <span id="saveButtonText">Save to Database</span>
            </button>
            
            <div class="flex space-x-3">
                <button type="button" onclick="event.preventDefault(); SafeExecute.call('cancelEdit')" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition hidden" id="cancelEditButton">
                    Cancel Edit
                </button>
                <button type="submit" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition text-lg font-semibold">
                    <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                    </svg>
                    Save & Generate Printout
                </button>
            </div>
        </div>
    </form>
</div>

<!-- Print Section (Hidden by default) -->
<div id="printSection" class="print-section bg-white rounded-lg shadow-lg overflow-hidden" style="display:none;">
    <div class="print-header bg-white px-8 py-6 border-b-2 border-gray-800">
        <div class="flex items-center justify-between">
            <div class="flex-1">
                <div class="text-center">
                    <h1 class="text-4xl font-bold text-gray-900 mb-2">OPCENTRIX MANUFACTURING</h1>
                    <h2 class="text-2xl font-semibold text-gray-700 mb-1">EDM Operation Log</h2>
                    <p class="text-lg text-gray-600">Electrical Discharge Machining Documentation</p>
                    <div class="mt-4 text-sm text-gray-500">
                        <p>Log #<span id="printLogNumber"></span> | Generated: <span id="printTimestamp"></span></p>
                    </div>
                </div>
            </div>
            <div class="no-print flex space-x-3">
                <button onclick="event.preventDefault(); SafeExecute.call('printAndStore')" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition text-lg font-semibold">
                    <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                    </svg>
                    Print & Store Log
                </button>
                <button onclick="event.preventDefault(); SafeExecute.call('hidePrintSection')" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition">
                    Close Preview
                </button>
            </div>
        </div>
    </div>
    
    <div class="print-content p-8">
        <!-- Main Information Grid -->
        <div class="grid grid-cols-2 gap-8 mb-8">
            <!-- Left Column -->
            <div class="space-y-6">
                <div class="border-2 border-blue-200 rounded-lg p-4 bg-blue-50">
                    <h3 class="text-lg font-bold text-blue-800 mb-4 border-b border-blue-300 pb-2">BASIC INFORMATION</h3>
                    <div class="space-y-3">
                        <div class="flex justify-between items-center py-2 border-b border-blue-200">
                            <span class="font-semibold text-gray-700">Date:</span>
                            <span class="text-lg font-mono" id="printLogDate"></span>
                        </div>
                        <div class="flex justify-between items-center py-2 border-b border-blue-200">
                            <span class="font-semibold text-gray-700">Shift:</span>
                            <span class="text-lg" id="printShift"></span>
                        </div>
                        <div class="flex justify-between items-center py-2 border-b border-blue-200">
                            <span class="font-semibold text-gray-700">Part Number:</span>
                            <span class="text-lg font-mono font-bold" id="printPartNumber"></span>
                        </div>
                        <div class="flex justify-between items-center py-2">
                            <span class="font-semibold text-gray-700">Quantity:</span>
                            <span class="text-lg font-bold" id="printQuantity"></span>
                        </div>
                    </div>
                </div>

                <div class="border-2 border-green-200 rounded-lg p-4 bg-green-50">
                    <h3 class="text-lg font-bold text-green-800 mb-4 border-b border-green-300 pb-2">OPERATOR INFORMATION</h3>
                    <div class="space-y-3">
                        <div class="flex justify-between items-center py-2 border-b border-green-200">
                            <span class="font-semibold text-gray-700">Operator:</span>
                            <span class="text-lg font-semibold" id="printEdmCutBy"></span>
                        </div>
                        <div class="flex justify-between items-center py-2 border-b border-green-200">
                            <span class="font-semibold text-gray-700">Initials:</span>
                            <span class="text-2xl font-mono font-bold border-2 border-green-400 px-3 py-1 rounded bg-white" id="printEdmInitials"></span>
                        </div>
                        <div class="flex justify-between items-center py-2 border-b border-green-200">
                            <span class="font-semibold text-gray-700">Start Time:</span>
                            <span class="text-lg font-mono" id="printStartTime"></span>
                        </div>
                        <div class="flex justify-between items-center py-2">
                            <span class="font-semibold text-gray-700">End Time:</span>
                            <span class="text-lg font-mono" id="printEndTime"></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="space-y-6">
                <div class="border-2 border-yellow-200 rounded-lg p-4 bg-yellow-50">
                    <h3 class="text-lg font-bold text-yellow-800 mb-4 border-b border-yellow-300 pb-2">MEASUREMENTS & QUALITY</h3>
                    <div class="space-y-3">
                        <div class="flex justify-between items-center py-2 border-b border-yellow-200">
                            <span class="font-semibold text-gray-700">Measurement 1:</span>
                            <span class="text-lg font-mono font-bold" id="printMeasurement1"></span>
                        </div>
                        <div class="flex justify-between items-center py-2 border-b border-yellow-200">
                            <span class="font-semibold text-gray-700">Measurement 2:</span>
                            <span class="text-lg font-mono font-bold" id="printMeasurement2"></span>
                        </div>
                        <div class="flex justify-between items-center py-2 border-b border-yellow-200">
                            <span class="font-semibold text-gray-700">Tolerance Status:</span>
                            <span class="text-lg font-semibold" id="printTolerance"></span>
                        </div>
                        <div class="flex justify-between items-center py-2">
                            <span class="font-semibold text-gray-700">Scrap/Issues:</span>
                            <span class="text-lg" id="printEDMScrap"></span>
                        </div>
                    </div>
                </div>

                <div class="border-2 border-purple-200 rounded-lg p-4 bg-purple-50">
                    <h3 class="text-lg font-bold text-purple-800 mb-4 border-b border-purple-300 pb-2">TIMING INFORMATION</h3>
                    <div class="space-y-3">
                        <div class="flex justify-between items-center py-2 border-b border-purple-200">
                            <span class="font-semibold text-gray-700">Total Time:</span>
                            <span class="text-lg font-bold" id="printTotalTime"></span>
                        </div>
                        <div class="flex justify-between items-center py-2 border-b border-purple-200">
                            <span class="font-semibold text-gray-700">Setup Time:</span>
                            <span class="text-lg" id="printSetupTime">N/A</span>
                        </div>
                        <div class="flex justify-between items-center py-2">
                            <span class="font-semibold text-gray-700">Cut Time:</span>
                            <span class="text-lg font-bold" id="printCutTime"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Notes Section -->
        <div class="border-2 border-gray-300 rounded-lg p-6 bg-gray-50 mb-8">
            <h3 class="text-lg font-bold text-gray-800 mb-4 border-b border-gray-400 pb-2">NOTES & COMMENTS</h3>
            <div class="bg-white border border-gray-300 rounded p-4 min-h-[100px]">
                <p class="text-lg leading-relaxed" id="printNotes"></p>
            </div>
        </div>

        <!-- Signature Section -->
        <div class="grid grid-cols-3 gap-8 border-t-2 border-gray-800 pt-6">
            <div class="text-center">
                <div class="border-b-2 border-gray-400 mb-2 h-12"></div>
                <p class="font-semibold">Operator Signature</p>
                <p class="text-sm text-gray-600">Date: ___________</p>
            </div>
            <div class="text-center">
                <div class="border-b-2 border-gray-400 mb-2 h-12"></div>
                <p class="font-semibold">QC Inspector</p>
                <p class="text-sm text-gray-600">Date: ___________</p>
            </div>
            <div class="text-center">
                <div class="border-b-2 border-gray-400 mb-2 h-12"></div>
                <p class="font-semibold">Supervisor</p>
                <p class="text-sm text-gray-600">Date: ___________</p>
            </div>
        </div>

        <!-- Footer -->
        <div class="mt-8 text-center text-sm text-gray-500 border-t border-gray-300 pt-4">
            <p class="font-semibold">OpCentrix Manufacturing - EDM Operations Division</p>
            <p>This document contains proprietary manufacturing information</p>
        </div>
    </div>
</div>

<!-- Stored Logs Modal -->
<div id="storedLogsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-10 mx-auto p-5 border w-11/12 md:w-4/5 lg:w-3/4 xl:w-2/3 shadow-lg rounded-md bg-white max-h-screen overflow-y-auto">
        <div class="mt-3">
            <div class="flex items-center justify-between pb-4 border-b">
                <h3 class="text-lg font-semibold text-gray-900">Stored EDM Logs</h3>
                <button onclick="event.preventDefault(); SafeExecute.call('closeStoredLogsModal')" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div id="storedLogsContent" class="mt-6">
                <!-- Stored logs will be populated here -->
            </div>
        </div>
    </div>
</div>

<style>
    /* Enhanced Print Styles */
    @@media print {
        * {
            -webkit-print-color-adjust: exact !important;
            color-adjust: exact !important;
        }
        
        body * {
            visibility: hidden;
        }
        
        #printSection, #printSection * {
            visibility: visible;
        }
        
        #printSection {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            box-shadow: none;
            border-radius: 0;
            margin: 0;
            padding: 0;
        }
        
        .no-print {
            display: none !important;
        }
    }
</style>

<!-- GLOBAL EDM FUNCTIONS -->
<script>
    // **GLOBAL EDM FUNCTIONS - All functions are now in global scope**
    
    // Generate unique log number automatically
    window.generateLogNumber = function() {
        const nextLogNumber = document.getElementById('nextLogNumber');
        if (nextLogNumber) {
            const current = parseInt(nextLogNumber.textContent) || 1;
            nextLogNumber.textContent = current + 1;
            return current.toString();
        }
        return '1';
    };

    // Save log to database via AJAX
    window.saveLogToDatabase = async function() {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting saveLogToDatabase operation`);
        
        try {
            // Validate required fields
            const requiredFields = ['partNumber', 'quantity', 'edmCutBy', 'edmInitials', 'logDate'];
            const missingFields = [];
            
            for (const fieldId of requiredFields) {
                const field = document.getElementById(fieldId);
                if (!field || !field.value.trim()) {
                    missingFields.push(fieldId);
                    if (field) {
                        field.classList.add('border-red-500', 'bg-red-50');
                    }
                } else if (field) {
                    field.classList.remove('border-red-500', 'bg-red-50');
                }
            }
            
            if (missingFields.length > 0) {
                SafeExecute.showNotification('warning', 
                    'Please fill in all required fields', 
                    `Missing: ${missingFields.join(', ')}`);
                return false;
            }

            // Get form data
            const form = document.getElementById('edmLogForm');
            const formData = new FormData(form);

            // Determine if this is an update or create operation
            const logId = document.getElementById('logId').value;
            const isUpdate = logId && logId !== '0' && logId !== '';
            const handler = isUpdate ? 'UpdateLog' : 'SaveLog';

            // Send to server
            const response = await fetch(`/EDM?handler=${handler}`, {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    const action = isUpdate ? 'updated' : 'saved';
                    SafeExecute.showNotification('success', 
                        result.message, 
                        `Log #${result.logNumber} ${action} successfully`);
                    
                    // Reset form and UI after successful save/update
                    form.reset();
                    document.getElementById('logId').value = '';
                    form.setAttribute('asp-page-handler', 'SaveLog');
                    
                    // Reset UI to create mode
                    document.getElementById('saveButtonText').textContent = 'Save to Database';
                    document.getElementById('saveButton').classList.remove('bg-orange-600', 'hover:bg-orange-700');
                    document.getElementById('saveButton').classList.add('bg-green-600', 'hover:bg-green-700');
                    document.getElementById('cancelEditButton').classList.add('hidden');
                    
                    // Set default values
                    const logDateElement = document.getElementById('logDate');
                    if (logDateElement) {
                        logDateElement.value = new Date().toISOString().split('T')[0];
                    }
                    
                    const operatorElement = document.getElementById('edmCutBy');
                    if (operatorElement) {
                        operatorElement.value = '@User.Identity?.Name';
                    }
                    
                    // Update statistics
                    await updateDashboardStats();
                    
                    console.log(`? [EDM-${operationId}] Log ${action} successfully`);
                    return true;
                } else {
                    throw new Error(result.message || 'Server returned error');
                }
            } else {
                throw new Error(`Server error: ${response.status}`);
            }
        } catch (error) {
            SafeExecute.logError(operationId, 'saveLogToDatabase', error);
            SafeExecute.showUserFriendlyError('saveLogToDatabase', error);
            return false;
        }
    };

    // Generate printout (existing functionality)
    window.generatePrintout = function() {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting generatePrintout operation`);
        
        try {
            // Validate required fields
            const requiredFields = ['partNumber', 'quantity', 'edmCutBy', 'edmInitials', 'logDate'];
            const missingFields = [];
            
            for (const fieldId of requiredFields) {
                const field = document.getElementById(fieldId);
                if (!field || !field.value.trim()) {
                    missingFields.push(fieldId);
                    if (field) {
                        field.classList.add('border-red-500', 'bg-red-50');
                    }
                } else if (field) {
                    field.classList.remove('border-red-500', 'bg-red-50');
                }
            }
            
            if (missingFields.length > 0) {
                SafeExecute.showNotification('warning', 
                    'Please fill in all required fields', 
                    `Missing: ${missingFields.join(', ')}`);
                return false;
            }

            // Copy form data to print section
            populatePrintSection();

            // Show print section
            const printSection = document.getElementById('printSection');
            if (printSection) {
                printSection.style.display = 'block';
                printSection.scrollIntoView({ behavior: 'smooth' });
            }
            
            console.log(`? [EDM-${operationId}] Print section displayed successfully`);
            SafeExecute.showNotification('success', 'EDM Log generated successfully', 'Ready for printing');
            return true;
            
        } catch (error) {
            SafeExecute.logError(operationId, 'generatePrintout', error);
            SafeExecute.showUserFriendlyError('generatePrintout', error);
            return false;
        }
    };

    // Populate print section with form data
    window.populatePrintSection = function() {
        try {
            // Basic Information
            document.getElementById('printLogDate').textContent = document.getElementById('logDate').value || '';
            document.getElementById('printShift').textContent = document.getElementById('shift').value || 'Not specified';
            document.getElementById('printPartNumber').textContent = document.getElementById('partNumber').value || '';
            document.getElementById('printQuantity').textContent = document.getElementById('quantity').value || '';

            // Operator Information
            document.getElementById('printEdmCutBy').textContent = document.getElementById('edmCutBy').value || '';
            document.getElementById('printEdmInitials').textContent = document.getElementById('edmInitials').value || '';
            document.getElementById('printStartTime').textContent = document.getElementById('startTime').value || 'Not specified';
            document.getElementById('printEndTime').textContent = document.getElementById('endTime').value || 'Not specified';

            // Measurements & Quality
            document.getElementById('printMeasurement1').textContent = document.getElementById('measurement1').value || 'Not measured';
            document.getElementById('printMeasurement2').textContent = document.getElementById('measurement2').value || 'Not measured';
            document.getElementById('printTolerance').textContent = document.getElementById('tolerance').value || 'Not specified';
            document.getElementById('printEDMScrap').textContent = document.getElementById('EDMScrap').value || 'None';

            // Notes
            document.getElementById('printNotes').textContent = document.getElementById('Notes').value || 'No notes provided';

            // Timing calculations
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            let totalTime = 'Not calculated';
            let cutTime = 'Not calculated';

            if (startTime && endTime) {
                const start = new Date(`2000-01-01T${startTime}`);
                const end = new Date(`2000-01-01T${endTime}`);
                if (end > start) {
                    const diffMs = end - start;
                    const hours = Math.floor(diffMs / (1000 * 60 * 60));
                    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
                    totalTime = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
                    cutTime = totalTime; // Assuming cut time equals total time for EDM
                }
            }

            document.getElementById('printTotalTime').textContent = totalTime;
            document.getElementById('printCutTime').textContent = cutTime;

            // Log number and timestamp
            document.getElementById('printLogNumber').textContent = document.getElementById('nextLogNumber').textContent || '1';
            document.getElementById('printTimestamp').textContent = new Date().toLocaleString();

        } catch (error) {
            console.error('Error populating print section:', error);
        }
    };

    // Print and store the log
    window.printAndStore = function() {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting printAndStore operation`);
        
        try {
            // Print the document
            window.print();
            
            // Store the log (this could trigger a save operation)
            SafeExecute.showNotification('success', 
                'Print job sent successfully', 
                'Log has been queued for printing');
            
            console.log(`? [EDM-${operationId}] Print and store completed successfully`);
            return true;
            
        } catch (error) {
            SafeExecute.logError(operationId, 'printAndStore', error);
            SafeExecute.showUserFriendlyError('printAndStore', error);
            return false;
        }
    };

    // Hide print section
    window.hidePrintSection = function() {
        try {
            const printSection = document.getElementById('printSection');
            if (printSection) {
                printSection.style.display = 'none';
            }
            return true;
        } catch (error) {
            console.error('Error hiding print section:', error);
            return false;
        }
    };

    // Clear form
    window.clearForm = function() {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting clearForm operation`);
        
        try {
            const isEditing = document.getElementById('logId').value !== '';
            const confirmMessage = isEditing ? 
                'Are you sure you want to clear all form data? This will cancel the current edit.' :
                'Are you sure you want to clear all form data?';
                
            if (!confirm(confirmMessage)) {
                return false;
            }
            
            const form = document.getElementById('edmLogForm');
            if (!form) {
                throw new Error('EDM form not found');
            }
            
            // Reset form
            form.reset();
            document.getElementById('logId').value = '';
            form.setAttribute('asp-page-handler', 'SaveLog');
            
            // Reset UI to create mode
            document.getElementById('saveButtonText').textContent = 'Save to Database';
            document.getElementById('saveButton').classList.remove('bg-orange-600', 'hover:bg-orange-700');
            document.getElementById('saveButton').classList.add('bg-green-600', 'hover:bg-green-700');
            document.getElementById('cancelEditButton').classList.add('hidden');
            
            // Set default values
            const logDateElement = document.getElementById('logDate');
            if (logDateElement) {
                logDateElement.value = new Date().toISOString().split('T')[0];
            }
            
            const operatorElement = document.getElementById('edmCutBy');
            if (operatorElement) {
                operatorElement.value = '@User.Identity?.Name';
            }
            
            // Remove error styling
            const fields = document.querySelectorAll('input, textarea, select');
            fields.forEach(field => field.classList.remove('border-red-500', 'bg-red-50'));
            
            const message = isEditing ? 'Edit cancelled and form cleared' : 'Form cleared successfully';
            const detail = isEditing ? 'Returned to new entry mode' : 'All fields have been reset';
            
            console.log(`? [EDM-${operationId}] Form cleared successfully`);
            SafeExecute.showNotification('success', message, detail);
            return true;
            
        } catch (error) {
            SafeExecute.logError(operationId, 'clearForm', error);
            SafeExecute.showUserFriendlyError('clearForm', error);
            return false;
        }
    };

    // Update dashboard statistics and next log number
    window.updateDashboardStats = async function() {
        try {
            const response = await fetch('/EDM');
            if (response.ok) {
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Update counters
                const updates = {
                    'totalLogsCount': doc.querySelector('#totalLogsCount')?.textContent,
                    'todayLogsCount': doc.querySelector('#todayLogsCount')?.textContent,
                    'lastLogTime': doc.querySelector('#lastLogTime')?.textContent,
                    'logCount': doc.querySelector('#logCount')?.textContent,
                    'nextLogNumber': doc.querySelector('#nextLogNumber')?.textContent
                };
                
                for (const [id, value] of Object.entries(updates)) {
                    const element = document.getElementById(id);
                    if (element && value) {
                        element.textContent = value;
                    }
                }
            }
        } catch (error) {
            console.warn('Failed to update dashboard stats:', error);
        }
    };

    // View stored logs with edit/delete functionality
    window.viewStoredLogs = async function() {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting viewStoredLogs operation`);
        
        try {
            const modal = document.getElementById('storedLogsModal');
            const content = document.getElementById('storedLogsContent');
            
            if (!modal || !content) {
                throw new Error('Stored logs modal elements not found');
            }

            // Show loading
            content.innerHTML = '<div class="text-center py-8"><div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div><p class="mt-4 text-gray-600">Loading logs...</p></div>';
            modal.classList.remove('hidden');

            // Fetch logs from server
            const response = await fetch('/EDM?handler=LogsJson');
            if (!response.ok) {
                throw new Error(`Failed to fetch logs: ${response.status}`);
            }

            const logs = await response.json();
            
            if (logs.length === 0) {
                content.innerHTML = `
                    <div class="text-center text-gray-500 py-8">
                        <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2h-2m-2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                        </svg>
                        <p class="text-lg">No stored logs found</p>
                        <p class="text-sm">Generated logs will appear here</p>
                    </div>
                `;
            } else {
                content.innerHTML = `
                    <div class="space-y-4">
                        ${logs.map(log => `
                            <div class="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                                <div class="flex justify-between items-start">
                                    <div class="flex-1">
                                        <h4 class="font-semibold text-lg">Log #${log.logNumber} - ${log.partNumber}</h4>
                                        <p class="text-gray-600">Qty: ${log.quantity} | Operator: ${log.operatorName} (${log.operatorInitials})</p>
                                        <p class="text-sm text-gray-500">Created: ${new Date(log.createdDate).toLocaleString()}</p>
                                        ${log.notes ? `<p class="text-sm text-gray-700 mt-2 italic">"${log.notes}"</p>` : ''}
                                    </div>
                                    <div class="text-right">
                                        <div class="mb-2">
                                            <span class="inline-block px-2 py-1 text-xs font-medium rounded ${
                                                log.toleranceStatus === '? Within Tolerance' ? 'bg-green-100 text-green-800' :
                                                log.toleranceStatus === '?? Close to Limit' ? 'bg-yellow-100 text-yellow-800' :
                                                log.toleranceStatus === '? Out of Tolerance' ? 'bg-red-100 text-red-800' :
                                                'bg-gray-100 text-gray-800'
                                            }">${log.toleranceStatus || 'Not Specified'}</span>
                                        </div>
                                        <div class="flex space-x-2">
                                            <button onclick="event.preventDefault(); window.editStoredLog(${log.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600 transition">
                                                Edit
                                            </button>
                                            <button onclick="event.preventDefault(); window.printStoredLog(${log.id})" class="bg-green-500 text-white px-3 py-1 rounded text-xs hover:bg-green-600 transition">
                                                Print
                                            </button>
                                            <button onclick="event.preventDefault(); window.deleteStoredLog(${log.id})" class="bg-red-500 text-white px-3 py-1 rounded text-xs hover:bg-red-600 transition">
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            console.log(`? [EDM-${operationId}] Stored logs displayed successfully`);
            return true;
            
        } catch (error) {
            SafeExecute.logError(operationId, 'viewStoredLogs', error);
            SafeExecute.showUserFriendlyError('viewStoredLogs', error);
            return false;
        }
    };

    // Edit stored log
    window.editStoredLog = async function(logId) {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting editStoredLog for ID: ${logId}`);
        
        try {
            // Fetch the log details
            const response = await fetch(`/EDM?handler=LogDetail&id=${logId}`);
            if (!response.ok) {
                throw new Error(`Failed to fetch log details: ${response.status}`);
            }

            const log = await response.json();
            
            // Set the hidden ID field for updates
            document.getElementById('logId').value = log.id || '';
            
            // Populate form with log data
            document.getElementById('partNumber').value = log.partNumber || '';
            document.getElementById('quantity').value = log.quantity || '';
            document.getElementById('logDate').value = log.logDate ? log.logDate.split('T')[0] : '';
            document.getElementById('shift').value = log.shift || '';
            document.getElementById('edmCutBy').value = log.operatorName || '';
            document.getElementById('edmInitials').value = log.operatorInitials || '';
            document.getElementById('startTime').value = log.startTime || '';
            document.getElementById('endTime').value = log.endTime || '';
            document.getElementById('measurement1').value = log.measurement1 || '';
            document.getElementById('measurement2').value = log.measurement2 || '';
            document.getElementById('tolerance').value = log.toleranceStatus || '';
            document.getElementById('EDMScrap').value = log.scrapIssues || '';
            document.getElementById('Notes').value = log.notes || '';

            // Update form action for editing
            const form = document.getElementById('edmLogForm');
            form.setAttribute('asp-page-handler', 'UpdateLog');

            // Update UI for edit mode
            document.getElementById('saveButtonText').textContent = 'Update Log';
            document.getElementById('saveButton').classList.remove('bg-green-600', 'hover:bg-green-700');
            document.getElementById('saveButton').classList.add('bg-orange-600', 'hover:bg-orange-700');
            document.getElementById('cancelEditButton').classList.remove('hidden');

            // Close the modal
            closeStoredLogsModal();

            // Scroll to form
            document.getElementById('edmLogForm').scrollIntoView({ behavior: 'smooth' });

            SafeExecute.showNotification('success', 'Log loaded for editing', `Log #${log.logNumber} is ready for modification`);
            
            console.log(`? [EDM-${operationId}] Log loaded for editing successfully`);
            return true;
            
        } catch (error) {
            SafeExecute.logError(operationId, 'editStoredLog', error);
            SafeExecute.showUserFriendlyError('editStoredLog', error);
            return false;
        }
    };

    // Cancel edit mode
    window.cancelEdit = function() {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting cancelEdit operation`);
        
        try {
            if (!confirm('Are you sure you want to cancel editing? Any unsaved changes will be lost.')) {
                return false;
            }
            
            // Reset form
            const form = document.getElementById('edmLogForm');
            form.reset();
            document.getElementById('logId').value = '';
            form.setAttribute('asp-page-handler', 'SaveLog');
            
            // Set default values
            const logDateElement = document.getElementById('logDate');
            if (logDateElement) {
                logDateElement.value = new Date().toISOString().split('T')[0];
            }
            
            const operatorElement = document.getElementById('edmCutBy');
            if (operatorElement) {
                operatorElement.value = '@User.Identity?.Name';
            }

            // Reset UI to create mode
            document.getElementById('saveButtonText').textContent = 'Save to Database';
            document.getElementById('saveButton').classList.remove('bg-orange-600', 'hover:bg-orange-700');
            document.getElementById('saveButton').classList.add('bg-green-600', 'hover:bg-green-700');
            document.getElementById('cancelEditButton').classList.add('hidden');

            // Remove error styling
            const fields = document.querySelectorAll('input, textarea, select');
            fields.forEach(field => field.classList.remove('border-red-500', 'bg-red-50'));
            
            console.log(`? [EDM-${operationId}] Edit cancelled successfully`);
            SafeExecute.showNotification('success', 'Edit cancelled', 'Form has been reset for new entry');
            return true;
            
        } catch (error) {
            SafeExecute.logError(operationId, 'cancelEdit', error);
            SafeExecute.showUserFriendlyError('cancelEdit', error);
            return false;
        }
    };

    // Delete stored log
    window.deleteStoredLog = async function(logId) {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting deleteStoredLog for ID: ${logId}`);
        
        try {
            // First fetch log details for confirmation
            const detailResponse = await fetch(`/EDM?handler=LogDetail&id=${logId}`);
            if (!detailResponse.ok) {
                throw new Error(`Failed to fetch log details: ${detailResponse.status}`);
            }

            const log = await detailResponse.json();
            const confirmMessage = `Are you sure you want to delete this log?\n\n` +
                `Log #${log.logNumber}\n` +
                `Part Number: ${log.partNumber}\n` +
                `Operator: ${log.operatorName}\n` +
                `Date: ${new Date(log.logDate).toLocaleDateString()}\n\n` +
                `This action cannot be undone.`;

            if (!confirm(confirmMessage)) {
                return false;
            }

            // Send delete request
            const response = await fetch(`/EDM?handler=DeleteLog&id=${logId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });

            if (!response.ok) {
                throw new Error(`Failed to delete log: ${response.status}`);
            }

            const result = await response.json();
            if (result.success) {
                SafeExecute.showNotification('success', 'Log deleted successfully', result.message);
                
                // Refresh the stored logs view
                await viewStoredLogs();
                
                // Update dashboard stats
                await updateDashboardStats();
                
                console.log(`? [EDM-${operationId}] Log deleted successfully`);
                return true;
            } else {
                throw new Error(result.message || 'Failed to delete log');
            }
            
        } catch (error) {
            SafeExecute.logError(operationId, 'deleteStoredLog', error);
            SafeExecute.showUserFriendlyError('deleteStoredLog', error);
            return false;
        }
    };

    // Print stored log
    window.printStoredLog = async function(logId) {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Starting printStoredLog for ID: ${logId}`);
        
        try {
            // Fetch the log details
            const response = await fetch(`/EDM?handler=LogDetail&id=${logId}`);
            if (!response.ok) {
                throw new Error(`Failed to fetch log details: ${response.status}`);
            }

            const log = await response.json();
            
            // Populate print section with stored log data
            populatePrintSectionFromLog(log);

            // Close the modal
            closeStoredLogsModal();

            // Show print section
            const printSection = document.getElementById('printSection');
            if (printSection) {
                printSection.style.display = 'block';
                printSection.scrollIntoView({ behavior: 'smooth' });
            }

            SafeExecute.showNotification('success', 'Log ready for printing', `Log #${log.logNumber} is ready to print`);
            
            console.log(`? [EDM-${operationId}] Log prepared for printing successfully`);
            return true;
            
        } catch (error) {
            SafeExecute.logError(operationId, 'printStoredLog', error);
            SafeExecute.showUserFriendlyError('printStoredLog', error);
            return false;
        }
    };

    // Populate print section from stored log
    window.populatePrintSectionFromLog = function(log) {
        try {
            // Basic Information
            document.getElementById('printLogDate').textContent = log.logDate ? new Date(log.logDate).toLocaleDateString() : '';
            document.getElementById('printShift').textContent = log.shift || 'Not specified';
            document.getElementById('printPartNumber').textContent = log.partNumber || '';
            document.getElementById('printQuantity').textContent = log.quantity || '';

            // Operator Information
            document.getElementById('printEdmCutBy').textContent = log.operatorName || '';
            document.getElementById('printEdmInitials').textContent = log.operatorInitials || '';
            document.getElementById('printStartTime').textContent = log.startTime || 'Not specified';
            document.getElementById('printEndTime').textContent = log.endTime || 'Not specified';

            // Measurements & Quality
            document.getElementById('printMeasurement1').textContent = log.measurement1 || 'Not measured';
            document.getElementById('printMeasurement2').textContent = log.measurement2 || 'Not measured';
            document.getElementById('printTolerance').textContent = log.toleranceStatus || 'Not specified';
            document.getElementById('printEDMScrap').textContent = log.scrapIssues || 'None';

            // Notes
            document.getElementById('printNotes').textContent = log.notes || 'No notes provided';

            // Timing information
            document.getElementById('printTotalTime').textContent = log.totalTime || 'Not calculated';
            document.getElementById('printCutTime').textContent = log.totalTime || 'Not calculated';

            // Log number and timestamp
            document.getElementById('printLogNumber').textContent = log.logNumber || '';
            document.getElementById('printTimestamp').textContent = log.createdDate ? new Date(log.createdDate).toLocaleString() : '';

        } catch (error) {
            console.error('Error populating print section from log:', error);
        }
    };

    // Close stored logs modal
    window.closeStoredLogsModal = function() {
        try {
            const modal = document.getElementById('storedLogsModal');
            if (modal) {
                modal.classList.add('hidden');
            }
            return true;
        } catch (error) {
            console.error('Error closing stored logs modal:', error);
            return false;
        }
    };

    // **INITIALIZE EDM PAGE**
    document.addEventListener('DOMContentLoaded', function() {
        const operationId = SafeExecute.generateOperationId();
        console.log(`?? [EDM-${operationId}] Initializing EDM Operations page`);
        
        try {
            // Ensure all global functions are properly attached to window
            const globalFunctions = [
                'generateLogNumber', 'saveLogToDatabase', 'generatePrintout', 
                'populatePrintSection', 'printAndStore', 'hidePrintSection',
                'clearForm', 'updateDashboardStats', 'viewStoredLogs',
                'editStoredLog', 'cancelEdit', 'deleteStoredLog', 
                'printStoredLog', 'populatePrintSectionFromLog', 'closeStoredLogsModal'
            ];
            
            const missingFunctions = [];
            globalFunctions.forEach(funcName => {
                if (typeof window[funcName] !== 'function') {
                    missingFunctions.push(funcName);
                }
            });
            
            if (missingFunctions.length > 0) {
                console.warn('?? Missing global functions:', missingFunctions);
            } else {
                console.log('? All global functions loaded successfully');
            }
            
            // Set current date
            const logDateElement = document.getElementById('logDate');
            if (logDateElement && !logDateElement.value) {
                logDateElement.value = new Date().toISOString().split('T')[0];
            }
            
            // Auto-detect shift based on current time
            const hour = new Date().getHours();
            const shiftSelect = document.getElementById('shift');
            if (shiftSelect && !shiftSelect.value) {
                if (hour >= 7 && hour < 15) {
                    shiftSelect.value = 'Day (7AM-3PM)';
                } else if (hour >= 15 && hour < 23) {
                    shiftSelect.value = 'Evening (3PM-11PM)';
                } else {
                    shiftSelect.value = 'Night (11PM-7AM)';
                }
            }
            
            // Auto-uppercase and formatting
            const initialsElement = document.getElementById('edmInitials');
            if (initialsElement) {
                initialsElement.addEventListener('input', function() {
                    this.value = this.value.toUpperCase();
                });
            }
            
            const partNumberElement = document.getElementById('partNumber');
            if (partNumberElement) {
                partNumberElement.addEventListener('input', function() {
                    this.value = this.value.toUpperCase();
                });
            }
            
            // Auto-fill initials from operator name
            const operatorElement = document.getElementById('edmCutBy');
            if (operatorElement) {
                operatorElement.addEventListener('input', function() {
                    const name = this.value.trim();
                    if (name && initialsElement) {
                        const initials = name.split(' ')
                            .map(part => part.charAt(0))
                            .join('')
                            .toUpperCase()
                            .substring(0, 4);
                        initialsElement.value = initials;
                    }
                });
            }
            
            console.log(`? [EDM-${operationId}] EDM page initialized successfully`);
            SafeExecute.showNotification('success', 'EDM Operations Ready', 'All functions loaded and page initialized');
            
        } catch (error) {
            SafeExecute.logError(operationId, 'DOMContentLoaded', error);
            console.error('Failed to initialize EDM page:', error);
        }
    });

    console.log('? [EDM] Enhanced EDM Operations page loaded with complete global function support');
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
