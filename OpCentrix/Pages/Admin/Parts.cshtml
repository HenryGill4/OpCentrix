@page
@model OpCentrix.Pages.Admin.PartsModel
@{
    ViewData["Title"] = "Manage Parts";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<!-- Parts JavaScript - Load immediately to ensure functions are available -->
<script>
// Parts Page Management - Load immediately for onclick handlers
(function() {
    'use strict';
    
    // Function to initialize Parts functions
    function initializeParts() {
        if (!window.OpCentrixAdmin) {
            console.log('? [PARTS] OpCentrixAdmin not ready yet, retrying...');
            setTimeout(initializeParts, 100); // Retry in 100ms
            return;
        }

        // Initialize parts management
        window.OpCentrixAdmin.Parts = window.OpCentrixAdmin.Parts || {};

        /**
         * Show add part modal
         */
        window.OpCentrixAdmin.Parts.showAddModal = async function() {
            const operationId = window.OpCentrixAdmin.generateOperationId();
            console.log(`?? [PARTS-${operationId}] Opening add part modal`);

            try {
                // Show loading in modal container
                const modalContainer = document.getElementById('modal-container');
                if (!modalContainer) {
                    throw new Error('Modal container not found');
                }
                
                const modalContent = modalContainer.querySelector('.modal-content');
                if (!modalContent) {
                    throw new Error('Modal content container not found');
                }
                
                modalContent.innerHTML = `
                    <div class="flex items-center justify-center p-12">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                        <span class="ml-3 text-gray-600">Loading form...</span>
                    </div>
                `;
                
                window.OpCentrixAdmin.Modal.show('modal-container');

                // Load the form content
                const response = await fetch('/Admin/Parts?handler=Add');
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const htmlContent = await response.text();
                modalContent.innerHTML = htmlContent;

                console.log(`? [PARTS-${operationId}] Add part modal loaded successfully`);

            } catch (error) {
                console.error(`? [PARTS-${operationId}] Error loading add part modal:`, error);
                window.OpCentrixAdmin.Alert.error(`Failed to load add part form: ${error.message}`);
                window.OpCentrixAdmin.Modal.hide('modal-container');
            }
        };

        /**
         * Show edit part modal
         */
        window.OpCentrixAdmin.Parts.showEditModal = async function(partId) {
            const operationId = window.OpCentrixAdmin.generateOperationId();
            console.log(`?? [PARTS-${operationId}] Opening edit part modal for ID: ${partId}`);

            try {
                if (!partId || partId <= 0) {
                    throw new Error(`Invalid part ID: ${partId}`);
                }

                // Show loading in modal container
                const modalContainer = document.getElementById('modal-container');
                if (!modalContainer) {
                    throw new Error('Modal container not found');
                }
                
                const modalContent = modalContainer.querySelector('.modal-content');
                if (!modalContent) {
                    throw new Error('Modal content container not found');
                }
                
                modalContent.innerHTML = `
                    <div class="flex items-center justify-center p-12">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                        <span class="ml-3 text-gray-600">Loading part data...</span>
                    </div>
                `;
                
                window.OpCentrixAdmin.Modal.show('modal-container');

                // Load the form content
                const response = await fetch(`/Admin/Parts?handler=Edit&id=${partId}`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const htmlContent = await response.text();
                modalContent.innerHTML = htmlContent;

                console.log(`? [PARTS-${operationId}] Edit part modal loaded successfully for ID: ${partId}`);

            } catch (error) {
                console.error(`? [PARTS-${operationId}] Error loading edit part modal:`, error);
                window.OpCentrixAdmin.Alert.error(`Failed to load edit part form: ${error.message}`);
                window.OpCentrixAdmin.Modal.hide('modal-container');
            }
        };

        /**
         * Delete part with confirmation
         */
        window.OpCentrixAdmin.Parts.deletePart = function(partId, partNumber) {
            const operationId = window.OpCentrixAdmin.generateOperationId();
            console.log(`??? [PARTS-${operationId}] Delete request for part: ${partNumber} (ID: ${partId})`);

            const confirmed = window.OpCentrixAdmin.Confirm.delete(partNumber, async () => {
                try {
                    console.log(`?? [PARTS-${operationId}] Proceeding with delete for part: ${partNumber}`);

                    // Create form data for CSRF token
                    const formData = new FormData();
                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (token) {
                        formData.append('__RequestVerificationToken', token.value);
                    }

                    const response = await fetch(`/Admin/Parts?handler=Delete&id=${partId}`, {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    const result = await response.text();
                    
                    // Check if response contains error
                    if (result.includes('error') || result.includes('Error')) {
                        throw new Error('Server returned an error response');
                    }

                    console.log(`? [PARTS-${operationId}] Part deleted successfully: ${partNumber}`);
                    window.OpCentrixAdmin.Alert.success(`Part "${partNumber}" deleted successfully`);
                    
                    // Refresh the page to update the parts list
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);

                } catch (error) {
                    console.error(`? [PARTS-${operationId}] Error deleting part:`, error);
                    window.OpCentrixAdmin.Alert.error(`Failed to delete part "${partNumber}": ${error.message}`);
                }
            });

            if (!confirmed) {
                console.log(`? [PARTS-${operationId}] User cancelled delete for part: ${partNumber}`);
            }
        };

        /**
         * Handle successful form submission
         */
        window.OpCentrixAdmin.Parts.handleFormSuccess = function(partNumber, isEdit = false) {
            const operationId = window.OpCentrixAdmin.generateOperationId();
            const action = isEdit ? 'updated' : 'created';
            
            console.log(`? [PARTS-${operationId}] Part ${action} successfully: ${partNumber}`);
            
            window.OpCentrixAdmin.Modal.hide('modal-container');
            window.OpCentrixAdmin.Alert.success(`Part "${partNumber}" ${action} successfully`);
            
            // Refresh the page to update the parts list
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        };

        console.log('? [PARTS] Parts management functions loaded and available');
    }

    // Start initialization process
    initializeParts();

})();
</script>

<div class="mb-6">
    <div class="flex justify-between items-center">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">Manage Parts</h1>
            <p class="text-gray-600 mt-1">Create, edit, and manage manufacturing parts</p>
        </div>
        <button type="button"
                onclick="OpCentrixAdmin.Parts.showAddModal()"
                class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Add New Part
        </button>
    </div>
</div>

<!-- Filters -->
<div class="bg-white rounded-lg shadow p-6 mb-6">
    <form method="get" class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Search</label>
            <input type="text" name="search" value="@Model.SearchTerm" placeholder="Part number, description, material..." 
                   class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Material</label>
            <input type="text" name="material" value="@Model.MaterialFilter" placeholder="Material type..." 
                   class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <select name="active" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="">All Parts</option>
                <option value="true" selected="@(Model.ActiveFilter == "true")">Active Only</option>
                <option value="false" selected="@(Model.ActiveFilter == "false")">Inactive Only</option>
            </select>
        </div>
        
        <div class="flex items-end">
            <button type="submit" class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition">
                Filter
            </button>
        </div>
    </form>
</div>

<!-- Results Summary -->
<div class="mb-4">
    <p class="text-sm text-gray-600">
        Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to @(Math.Min(Model.PageNumber * Model.PageSize, Model.TotalParts)) of @Model.TotalParts parts
    </p>
</div>

<!-- Parts Table -->
<div class="bg-white rounded-lg shadow overflow-hidden">
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Part Number</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Material</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Costs</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="parts-table-body">
                @if (Model.Parts.Any())
                {
                    @foreach (var part in Model.Parts)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm font-medium text-gray-900">@part.PartNumber</div>
                                <div class="text-sm text-gray-500">ID: @part.Id</div>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm text-gray-900">@part.Description</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                    @part.Material
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                @if (part.HasAdminOverride)
                                {
                                    <div class="flex items-center space-x-2">
                                        <div>
                                            <div class="font-medium text-orange-700">@part.EffectiveDurationDisplay</div>
                                            <div class="text-xs text-gray-500">Standard: @part.EstimatedHours hrs</div>
                                        </div>
                                        <svg class="w-4 h-4 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" title="Admin Override Active">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                                        </svg>
                                    </div>
                                }
                                else
                                {
                                    <div>@part.AvgDuration</div>
                                    <div class="text-xs text-gray-500">@part.EstimatedHours hrs</div>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                <div>Material: @part.MaterialCostPerKg.ToString("C")</div>
                                <div class="text-xs text-gray-500">Labor: @part.StandardLaborCostPerHour.ToString("C")/hr</div>
                                <div class="text-xs text-gray-500">Setup: @part.SetupCost.ToString("C")</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @if (part.IsActive)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        Active
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                        Inactive
                                    </span>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                                <button type="button" 
                                        onclick="OpCentrixAdmin.Parts.showEditModal(@part.Id)"
                                        class="text-blue-600 hover:text-blue-900 transition">
                                    Edit
                                </button>
                                <button type="button" 
                                        onclick="OpCentrixAdmin.Parts.deletePart(@part.Id, '@part.PartNumber')"
                                        class="text-red-600 hover:text-red-900 transition">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="px-6 py-4 text-center text-gray-500">
                            No parts found matching your criteria.
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Pagination -->
@if (Model.TotalPages > 1)
{
    <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-6 rounded-lg shadow">
        <div class="flex-1 flex justify-between sm:hidden">
            @if (Model.PageNumber > 1)
            {
                <a href="?page=@(Model.PageNumber - 1)&search=@Model.SearchTerm&material=@Model.MaterialFilter&active=@Model.ActiveFilter" 
                   class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                    Previous
                </a>
            }
            @if (Model.PageNumber < Model.TotalPages)
            {
                <a href="?page=@(Model.PageNumber + 1)&search=@Model.SearchTerm&material=@Model.MaterialFilter&active=@Model.ActiveFilter" 
                   class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                    Next
                </a>
            }
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
                <p class="text-sm text-gray-700">
                    Page <span class="font-medium">@Model.PageNumber</span> of <span class="font-medium">@Model.TotalPages</span>
                </p>
            </div>
            <div>
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                    @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                    {
                        @if (i == Model.PageNumber)
                        {
                            <span class="relative inline-flex items-center px-4 py-2 border border-blue-500 bg-blue-50 text-sm font-medium text-blue-600">
                                @i
                            </span>
                        }
                        else
                        {
                            <a href="?page=@i&search=@Model.SearchTerm&material=@Model.MaterialFilter&active=@Model.ActiveFilter" 
                               class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                @i
                            </a>
                        }
                    }
                </nav>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // HTMX Integration for Parts Forms - runs after DOM is ready
        (function() {
            'use strict';

            /**
             * Setup HTMX integration for parts forms
             */
            function setupHTMXIntegration() {
                // Listen for successful form submissions in modal
                document.addEventListener('htmx:afterRequest', function(event) {
                    if (event.target.closest('#modal-container') && event.detail.successful) {
                        const response = event.detail.xhr.responseText;
                        
                        // Check if response is a script (success response)
                        if (response.includes('<script>') && response.includes('Part saved successfully')) {
                            // Extract part number from response for better messaging
                            const partNumberMatch = response.match(/Part saved successfully: ([^']+)/);
                            const partNumber = partNumberMatch ? partNumberMatch[1] : 'Part';
                            
                            OpCentrixAdmin.Parts.handleFormSuccess(partNumber, true);
                        }
                    }
                });

                // Handle form errors
                document.addEventListener('htmx:responseError', function(event) {
                    if (event.target.closest('#modal-container')) {
                        console.error('HTMX form submission error:', event.detail);
                        OpCentrixAdmin.Alert.error('Form submission failed. Please try again.');
                        
                        // Hide any loading states
                        OpCentrixAdmin.Loading.hideAll();
                    }
                });
            }

            // Initialize when DOM is ready
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', setupHTMXIntegration);
            } else {
                setupHTMXIntegration();
            }

            console.log('? [PARTS] HTMX integration initialized successfully');

        })();
    </script>
}
