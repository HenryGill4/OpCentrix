@page
@model OpCentrix.Pages.Admin.PartsModel
@{
    ViewData["Title"] = "Parts Management";
    ViewData["ActivePage"] = "Parts";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">Parts Management</h1>
                    <p class="text-muted">Manage SLS manufacturing parts and specifications</p>
                </div>
                <button type="button" class="btn btn-primary" onclick="showAddPartModal()">
                    <i class="fas fa-plus me-2"></i>Add Part
                </button>
            </div>

            <!-- Success/Error Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <!-- Search and Filter Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-search me-2"></i>Search & Filter
                    </h6>
                </div>
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-3">
                            <label for="searchTerm" class="form-label">Search</label>
                            <input type="text" class="form-control" id="searchTerm" name="SearchTerm" 
                                   value="@Model.SearchTerm" placeholder="Part number, name, description...">
                        </div>
                        <div class="col-md-2">
                            <label for="materialFilter" class="form-label">Material</label>
                            <select class="form-select" id="materialFilter" name="MaterialFilter">
                                <option value="">All Materials</option>
                                @foreach (var material in Model.AvailableMaterials)
                                {
                                    <option value="@material" selected="@(Model.MaterialFilter == material)">@material</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="industryFilter" class="form-label">Industry</label>
                            <select class="form-select" id="industryFilter" name="IndustryFilter">
                                <option value="">All Industries</option>
                                @foreach (var industry in Model.AvailableIndustries)
                                {
                                    <option value="@industry" selected="@(Model.IndustryFilter == industry)">@industry</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="categoryFilter" class="form-label">Category</label>
                            <select class="form-select" id="categoryFilter" name="CategoryFilter">
                                <option value="">All Categories</option>
                                @foreach (var category in Model.AvailableCategories)
                                {
                                    <option value="@category" selected="@(Model.CategoryFilter == category)">@category</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="sortOrder" class="form-label">Sort By</label>
                            <select class="form-select" id="sortOrder" name="SortOrder">
                                <option value="" selected="@(string.IsNullOrEmpty(Model.SortOrder))">Part Number ?</option>
                                <option value="partnumber_desc" selected="@(Model.SortOrder == "partnumber_desc")">Part Number ?</option>
                                <option value="name" selected="@(Model.SortOrder == "name")">Name ?</option>
                                <option value="name_desc" selected="@(Model.SortOrder == "name_desc")">Name ?</option>
                                <option value="material" selected="@(Model.SortOrder == "material")">Material ?</option>
                                <option value="material_desc" selected="@(Model.SortOrder == "material_desc")">Material ?</option>
                                <option value="created" selected="@(Model.SortOrder == "created")">Created ?</option>
                                <option value="created_desc" selected="@(Model.SortOrder == "created_desc")">Created ?</option>
                            </select>
                        </div>
                        <div class="col-md-1">
                            <label class="form-label">&nbsp;</label>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-outline-primary">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="activeOnly" name="ActiveOnly" 
                                       value="true" checked="@(Model.ActiveOnly == true)" onchange="this.form.submit()">
                                <label class="form-check-label" for="activeOnly">
                                    Show active parts only
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <a href="/Admin/Parts" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-times me-1"></i>Clear Filters
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Parts Table Card -->
            <div class="card shadow-sm">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-cogs me-2"></i>Parts (@Model.Parts.Count)
                    </h6>
                    <div class="text-muted small">
                        Page @Model.PageNumber of @Model.TotalPages
                    </div>
                </div>
                <div class="card-body p-0">
                    @if (Model.Parts.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Part Number</th>
                                        <th>Name</th>
                                        <th>Material</th>
                                        <th>Industry</th>
                                        <th>Category</th>
                                        <th>Est. Hours</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var part in Model.Parts)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@part.PartNumber</strong>
                                                @if (!string.IsNullOrEmpty(part.CustomerPartNumber))
                                                {
                                                    <br><small class="text-muted">Customer: @part.CustomerPartNumber</small>
                                                }
                                            </td>
                                            <td>
                                                @part.Name
                                                @if (!string.IsNullOrEmpty(part.Description))
                                                {
                                                    <br><small class="text-muted">@(part.Description.Length > 50 ? part.Description.Substring(0, 50) + "..." : part.Description)</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@part.Material</span>
                                                @if (part.SlsMaterial != part.Material)
                                                {
                                                    <br><small class="text-muted">SLS: @part.SlsMaterial</small>
                                                }
                                            </td>
                                            <td>@part.Industry</td>
                                            <td>
                                                <span class="badge bg-secondary">@part.PartCategory</span>
                                                @if (!string.IsNullOrEmpty(part.PartClass))
                                                {
                                                    <span class="badge bg-outline-dark ms-1">Class @part.PartClass</span>
                                                }
                                            </td>
                                            <td>
                                                @if (part.HasAdminOverride)
                                                {
                                                    <span class="text-warning">
                                                        <i class="fas fa-user-shield" title="Admin Override"></i>
                                                        @(part.EffectiveDurationHours.ToString("F1") + "h")
                                                    </span>
                                                }
                                                else
                                                {
                                                    @(part.EstimatedHours.ToString("F1") + "h")
                                                }
                                            </td>
                                            <td>
                                                @if (part.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Inactive</span>
                                                }
                                            </td>
                                            <td>
                                                <small class="text-muted">
                                                    @part.CreatedDate.ToString("MM/dd/yyyy")
                                                    <br>by @part.CreatedBy
                                                </small>
                                            </td>
                                            <td class="text-center">
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button type="button" class="btn btn-outline-primary" 
                                                            onclick="showEditPartModal(@part.Id)" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-outline-info" 
                                                            onclick="viewPartDetails(@part.Id)" title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-outline-danger" 
                                                            onclick="showDeleteConfirmation(@part.Id, '@part.PartNumber')" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (Model.TotalPages > 1)
                        {
                            <div class="card-footer">
                                <nav aria-label="Parts pagination">
                                    <ul class="pagination pagination-sm justify-content-center mb-0">
                                        @if (Model.PageNumber > 1)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="?PageNumber=@(Model.PageNumber - 1)&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&SortOrder=@Model.SortOrder&ActiveOnly=@Model.ActiveOnly">Previous</a>
                                            </li>
                                        }

                                        @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                                        {
                                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                                <a class="page-link" href="?PageNumber=@i&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&SortOrder=@Model.SortOrder&ActiveOnly=@Model.ActiveOnly">@i</a>
                                            </li>
                                        }

                                        @if (Model.PageNumber < Model.TotalPages)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="?PageNumber=@(Model.PageNumber + 1)&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&SortOrder=@Model.SortOrder&ActiveOnly=@Model.ActiveOnly">Next</a>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center p-5">
                            <i class="fas fa-cogs fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No parts found</h5>
                            <p class="text-muted">Try adjusting your search criteria or add a new part.</p>
                            <button type="button" class="btn btn-primary" onclick="showAddPartModal()">
                                <i class="fas fa-plus me-2"></i>Add First Part
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let currentPartId = null;

    // Show Add Part Modal using admin layout modal system
    async function showAddPartModal() {
        try {
            console.log('?? [PARTS] Opening add part modal');
            
            // Show modal container
            const modalContainer = document.getElementById('modal-container');
            const modalContent = modalContainer.querySelector('.modal-content');
            
            if (!modalContainer || !modalContent) {
                console.error('? [PARTS] Modal container not found');
                alert('Modal system not available');
                return;
            }
            
            // Show loading state
            modalContent.innerHTML = `
                <div class="p-8 text-center">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
                    <div class="text-gray-600">Loading part form...</div>
                </div>
            `;
            
            // Show modal
            modalContainer.classList.remove('hidden');
            modalContainer.classList.add('flex');
            
            // Load form content
            const response = await fetch('/Admin/Parts?handler=AddForm');
            if (response.ok) {
                const html = await response.text();
                modalContent.innerHTML = html;
                
                // Initialize form
                currentPartId = null;
                initializePartForm('create');
                
                console.log('? [PARTS] Add modal loaded successfully');
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            console.error('? [PARTS] Error loading add modal:', error);
            showModalError('Error loading form. Please try again.');
        }
    }

    // Show Edit Part Modal
    async function showEditPartModal(partId) {
        try {
            console.log('?? [PARTS] Opening edit part modal for ID:', partId);
            
            const modalContainer = document.getElementById('modal-container');
            const modalContent = modalContainer.querySelector('.modal-content');
            
            if (!modalContainer || !modalContent) {
                console.error('? [PARTS] Modal container not found');
                alert('Modal system not available');
                return;
            }
            
            // Show loading state
            modalContent.innerHTML = `
                <div class="p-8 text-center">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
                    <div class="text-gray-600">Loading part data...</div>
                </div>
            `;
            
            // Show modal
            modalContainer.classList.remove('hidden');
            modalContainer.classList.add('flex');
            
            // Load form with part data
            const response = await fetch(`/Admin/Parts?handler=EditForm&id=${partId}`);
            if (response.ok) {
                const html = await response.text();
                modalContent.innerHTML = html;
                
                // Initialize form
                currentPartId = partId;
                initializePartForm('edit', partId);
                
                console.log('? [PARTS] Edit modal loaded successfully');
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            console.error('? [PARTS] Error loading edit modal:', error);
            showModalError('Error loading part data. Please try again.');
        }
    }

    // Show Delete Confirmation
    function showDeleteConfirmation(partId, partNumber) {
        if (confirm(`Are you sure you want to delete part "${partNumber}"?\n\nThis action cannot be undone. If this part has associated jobs, it cannot be deleted.`)) {
            deletePart(partId);
        }
    }

    // Delete Part
    async function deletePart(partId) {
        try {
            console.log('?? [PARTS] Deleting part ID:', partId);
            
            const formData = new FormData();
            formData.append('id', partId);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value);
            
            const response = await fetch('/Admin/Parts?handler=Delete', {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                console.log('? [PARTS] Part deleted successfully');
                window.location.reload();
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            console.error('? [PARTS] Delete error:', error);
            alert('Error deleting part. Please try again.');
        }
    }

    // Initialize Part Form
    function initializePartForm(mode, partId = null) {
        const form = document.querySelector('#modal-container form');
        if (!form) {
            console.warn('?? [PARTS] No form found in modal');
            return;
        }
        
        // Set form action based on mode
        if (mode === 'create') {
            form.action = '/Admin/Parts?handler=Create';
        } else if (mode === 'edit' && partId) {
            form.action = `/Admin/Parts?handler=Edit&id=${partId}`;
        }
        
        // Add form submit handler
        form.addEventListener('submit', handleFormSubmit);
        
        // Add cancel button handler
        const cancelBtn = form.querySelector('[data-action="cancel"], .btn-secondary');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', hideModal);
        }
        
        // Initialize any material change handlers
        const materialSelect = form.querySelector('#materialSelect, [name*="Material"]');
        if (materialSelect) {
            materialSelect.addEventListener('change', function() {
                if (window.onMaterialChange) {
                    window.onMaterialChange(this.value);
                }
            });
        }
    }

    // Handle Form Submission
    async function handleFormSubmit(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        
        try {
            console.log('?? [PARTS] Submitting form:', form.action);
            
            // Show loading state on submit button
            const submitBtn = form.querySelector('button[type="submit"]');
            if (submitBtn) {
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<div class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>Saving...';
                submitBtn.disabled = true;
            }
            
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            });
            
            if (response.ok) {
                console.log('? [PARTS] Form submitted successfully');
                hideModal();
                window.location.reload();
            } else {
                // Handle validation errors - reload form with errors
                const html = await response.text();
                const modalContent = document.querySelector('#modal-container .modal-content');
                modalContent.innerHTML = html;
                initializePartForm(currentPartId ? 'edit' : 'create', currentPartId);
                console.log('?? [PARTS] Form submission returned validation errors');
            }
        } catch (error) {
            console.error('? [PARTS] Form submission error:', error);
            showModalError('Error saving part. Please try again.');
        }
    }

    // View Part Details
    function viewPartDetails(partId) {
        window.open(`/Admin/Parts/Details/${partId}`, '_blank');
    }

    // Hide Modal
    function hideModal() {
        const modalContainer = document.getElementById('modal-container');
        if (modalContainer) {
            modalContainer.classList.add('hidden');
            modalContainer.classList.remove('flex');
            
            // Clear modal content after animation
            setTimeout(() => {
                const modalContent = modalContainer.querySelector('.modal-content');
                if (modalContent) {
                    modalContent.innerHTML = '';
                }
            }, 300);
        }
        currentPartId = null;
    }

    // Show Modal Error
    function showModalError(message) {
        const modalContent = document.querySelector('#modal-container .modal-content');
        if (modalContent) {
            modalContent.innerHTML = `
                <div class="p-8 text-center">
                    <div class="text-red-500 mb-4">
                        <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                        </svg>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">Error</h3>
                    <p class="text-gray-600 mb-6">${message}</p>
                    <button type="button" class="btn btn-secondary" onclick="hideModal()">Close</button>
                </div>
            `;
        }
    }

    // Close modal when clicking outside (on overlay)
    document.addEventListener('click', function(event) {
        const modalContainer = document.getElementById('modal-container');
        if (event.target === modalContainer) {
            hideModal();
        }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const modalContainer = document.getElementById('modal-container');
            if (modalContainer && !modalContainer.classList.contains('hidden')) {
                hideModal();
            }
        }
    });
</script>
}