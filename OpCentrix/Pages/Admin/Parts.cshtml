@page
@model OpCentrix.Pages.Admin.PartsModel
@{
    ViewData["Title"] = "Parts Management";
    ViewData["Description"] = "Manage SLS manufacturing parts and specifications";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<!-- Enhanced CSS for Parts page -->
<style>
    .part-card { transition: transform 0.2s, box-shadow 0.2s; }
    .part-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
    .badge { font-size: 0.75rem; }
    .table-responsive { border-radius: 0.5rem; overflow: hidden; }
    .admin-override { background: linear-gradient(135deg, #fff5e6 0%, #ffe4b8 100%); border-left: 4px solid #f59e0b; }
    .loading-spinner { display: none; }
    .modal-xl { max-width: 90%; }
    .part-stats { background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); }

    /* Fix button visibility issues */
    .modal-footer .btn {
        background-color: transparent !important;
        border: 2px solid !important;
        color: inherit !important;
        font-weight: 500 !important;
        transition: all 0.2s ease !important;
    }
    
    .modal-footer .btn-secondary {
        background-color: #6c757d !important;
        border-color: #6c757d !important;
        color: #fff !important;
    }
    
    .modal-footer .btn-secondary:hover {
        background-color: #5c636a !important;
        border-color: #545b62 !important;
        color: #fff !important;
    }
    
    .modal-footer .btn-primary {
        background-color: #0d6efd !important;
        border-color: #0d6efd !important;
        color: #fff !important;
    }
    
    .modal-footer .btn-primary:hover {
        background-color: #0b5ed7 !important;
        border-color: #0a58ca !important;
        color: #fff !important;
    }
    
    /* Ensure proper modal z-index layering */
    .modal {
        z-index: 1055 !important;
    }
    
    .modal-backdrop {
        z-index: 1050 !important;
    }
    
    /* Fix action button visibility in main page */
    .btn-group .btn {
        background-color: transparent !important;
        border: 1px solid !important;
        color: inherit !important;
        min-height: 38px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
    
    .btn-outline-primary {
        background-color: #fff !important;
        border-color: #0d6efd !important;
        color: #0d6efd !important;
    }
    
    .btn-outline-primary:hover {
        background-color: #0d6efd !important;
        border-color: #0d6efd !important;
        color: #fff !important;
    }
    
    .btn-outline-info {
        background-color: #fff !important;
        border-color: #0dcaf0 !important;
        color: #0dcaf0 !important;
    }
    
    .btn-outline-info:hover {
        background-color: #0dcaf0 !important;
        border-color: #0dcaf0 !important;
        color: #000 !important;
    }
    
    .btn-outline-danger {
        background-color: #fff !important;
        border-color: #dc3545 !important;
        color: #dc3545 !important;
    }
    
    .btn-outline-danger:hover {
        background-color: #dc3545 !important;
        border-color: #dc3545 !important;
        color: #fff !important;
    }
    
    /* Ensure all buttons are visible and clickable */
    .btn {
        position: relative !important;
        z-index: 1 !important;
        pointer-events: auto !important;
        opacity: 1 !important;
    }
    
    /* Fix any overlay issues */
    .loading-overlay {
        z-index: 9999 !important;
        pointer-events: none !important;
    }
    
    .loading-overlay.active {
        pointer-events: auto !important;
    }
</style>

<div class="container-fluid">
    <!-- Header Section with Statistics -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <h1 class="h3 mb-1 text-gray-900">
                        <i class="fas fa-cogs text-primary me-2"></i>
                        Parts Management
                    </h1>
                    <p class="text-muted mb-0">Manage SLS manufacturing parts and specifications</p>
                </div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary" onclick="handleAddPartClick(this)" data-bs-toggle="tooltip" title="Add New Part">
                        <i class="fas fa-plus me-2"></i>Add New Part
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="window.location.reload()" data-bs-toggle="tooltip" title="Refresh">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>

            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card border-0 part-stats">
                        <div class="card-body text-center py-3">
                            <div class="h4 text-success mb-1">@Model.ActivePartsCount</div>
                            <div class="small text-muted">Active Parts</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 part-stats">
                        <div class="card-body text-center py-3">
                            <div class="h4 text-secondary mb-1">@Model.InactivePartsCount</div>
                            <div class="small text-muted">Inactive Parts</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 part-stats">
                        <div class="card-body text-center py-3">
                            <div class="h4 text-info mb-1">@Model.MostUsedMaterial</div>
                            <div class="small text-muted">Most Used Material</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 part-stats">
                        <div class="card-body text-center py-3">
                            <div class="h4 text-warning mb-1">@Model.AverageEstimatedHours.ToString("F1")h</div>
                            <div class="small text-muted">Average Duration</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body">
            <form method="get" class="row g-3" id="filterForm">
                <div class="col-md-3">
                    <label for="SearchTerm" class="form-label">Search</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input asp-for="SearchTerm" class="form-control" placeholder="Part number, name, description..." />
                    </div>
                </div>
                <div class="col-md-2">
                    <label for="MaterialFilter" class="form-label">Material</label>
                    <select asp-for="MaterialFilter" class="form-select">
                        <option value="">All Materials</option>
                        @foreach (var material in Model.AvailableMaterials)
                        {
                            <option value="@material" selected="@(Model.MaterialFilter == material)">@material</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="IndustryFilter" class="form-label">Industry</label>
                    <select asp-for="IndustryFilter" class="form-select">
                        <option value="">All Industries</option>
                        @foreach (var industry in Model.AvailableIndustries)
                        {
                            <option value="@industry" selected="@(Model.IndustryFilter == industry)">@industry</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="CategoryFilter" class="form-label">Category</label>
                    <select asp-for="CategoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.AvailableCategories)
                        {
                            <option value="@category" selected="@(Model.CategoryFilter == category)">@category</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Status</label>
                    <div class="form-check">
                        <input asp-for="ActiveOnly" class="form-check-input" type="checkbox" />
                        <label asp-for="ActiveOnly" class="form-check-label">Active Only</label>
                    </div>
                </div>
                <div class="col-md-1">
                    <label class="form-label d-block">&nbsp;</label>
                    <button type="submit" class="btn btn-outline-primary w-100">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Parts Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-header bg-white border-bottom">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-list text-primary me-2"></i>
                    Parts (@Model.TotalCount total)
                </h5>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                        <option value="25" selected="@(Model.PageSize == 25)">25 per page</option>
                        <option value="50" selected="@(Model.PageSize == 50)">50 per page</option>
                        <option value="100" selected="@(Model.PageSize == 100)">100 per page</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            @if (Model.Parts.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>
                                    <a href="?SortOrder=@(Model.GetSortDirection("partnumber"))&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" class="text-decoration-none text-dark">
                                        Part Number @Model.GetSortIcon("partnumber")
                                    </a>
                                </th>
                                <th>
                                    <a href="?SortOrder=@(Model.GetSortDirection("name"))&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" class="text-decoration-none text-dark">
                                        Name @Model.GetSortIcon("name")
                                    </a>
                                </th>
                                <th>
                                    <a href="?SortOrder=@(Model.GetSortDirection("material"))&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" class="text-decoration-none text-dark">
                                        Material @Model.GetSortIcon("material")
                                    </a>
                                </th>
                                <th>
                                    <a href="?SortOrder=@(Model.GetSortDirection("industry"))&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" class="text-decoration-none text-dark">
                                        Industry @Model.GetSortIcon("industry")
                                    </a>
                                </th>
                                <th>
                                    <a href="?SortOrder=@(Model.GetSortDirection("hours"))&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" class="text-decoration-none text-dark">
                                        Duration @Model.GetSortIcon("hours")
                                    </a>
                                </th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var part in Model.Parts)
                            {
                                <tr class="@(part.HasAdminOverride ? "admin-override" : "")">
                                    <td>
                                        <div class="fw-bold">@part.PartNumber</div>
                                        @if (!string.IsNullOrEmpty(part.CustomerPartNumber))
                                        {
                                            <div class="small text-muted">Customer: @part.CustomerPartNumber</div>
                                        }
                                    </td>
                                    <td>
                                        <div class="fw-semibold">@part.Name</div>
                                        @if (!string.IsNullOrEmpty(part.Description) && part.Description.Length > 50)
                                        {
                                            <div class="small text-muted">@(part.Description.Substring(0, 50))...</div>
                                        }
                                        else if (!string.IsNullOrEmpty(part.Description))
                                        {
                                            <div class="small text-muted">@part.Description</div>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">@part.Material</span>
                                        @if (part.Material != part.SlsMaterial)
                                        {
                                            <br><span class="badge bg-secondary mt-1">SLS: @part.SlsMaterial</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@part.Industry</span>
                                        <div class="small text-muted mt-1">@part.Application</div>
                                    </td>
                                    <td>
                                        @if (part.HasAdminOverride)
                                        {
                                            <div class="fw-bold text-warning">
                                                <i class="fas fa-user-cog me-1"></i>
                                                @(part.AdminEstimatedHoursOverride?.ToString("F1") ?? "0.0")h
                                            </div>
                                            <div class="small text-muted">
                                                Override: @part.EstimatedHours.ToString("F1")h
                                            </div>
                                        }
                                        else
                                        {
                                            <div>@part.EstimatedHours.ToString("F1")h</div>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @Model.GetStatusBadgeClass(part.IsActive)">
                                            @(part.IsActive ? "Active" : "Inactive")
                                        </span>
                                        <span class="badge @Model.GetPriorityBadgeClass(part.PartClass) ms-1">
                                            Class @part.PartClass
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button type="button" 
                                                    class="btn btn-outline-primary" 
                                                    onclick="handleEditPartClick(this, @part.Id)" 
                                                    data-bs-toggle="tooltip" 
                                                    title="Edit Part"
                                                    style="background-color: #fff !important; border-color: #0d6efd !important; color: #0d6efd !important;">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" 
                                                    class="btn btn-outline-info" 
                                                    onclick="showPartDetails(@part.Id)" 
                                                    data-bs-toggle="tooltip" 
                                                    title="View Details"
                                                    style="background-color: #fff !important; border-color: #0dcaf0 !important; color: #0dcaf0 !important;">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button type="button" 
                                                    class="btn btn-outline-danger" 
                                                    onclick="handleDeletePartClick(@part.Id, '@part.PartNumber', '@part.Name')" 
                                                    data-bs-toggle="tooltip" 
                                                    title="Delete Part"
                                                    style="background-color: #fff !important; border-color: #dc3545 !important; color: #dc3545 !important;">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <div class="card-footer bg-white">
                        <nav aria-label="Parts pagination">
                            <ul class="pagination pagination-sm justify-content-center mb-0">
                                @if (Model.PageNumber > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="?PageNumber=@(Model.PageNumber - 1)&SortOrder=@Model.SortOrder&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly">Previous</a>
                                    </li>
                                }

                                @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                                {
                                    <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                        <a class="page-link" href="?PageNumber=@i&SortOrder=@Model.SortOrder&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly">@i</a>
                                    </li>
                                }

                                @if (Model.PageNumber < Model.TotalPages)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="?PageNumber=@(Model.PageNumber + 1)&SortOrder=@Model.SortOrder&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly">Next</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                        <div class="text-center mt-2">
                            <small class="text-muted">
                                Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount) of @Model.TotalCount parts
                            </small>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-inbox text-muted fa-3x mb-3"></i>
                    <h5 class="text-muted">No parts found</h5>
                    <p class="text-muted">Try adjusting your search criteria or add a new part.</p>
                    <button type="button" class="btn btn-primary" onclick="handleAddPartClick(this)">
                        <i class="fas fa-plus me-2"></i>Add First Part
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal for Part Form -->
<div class="modal fade" id="partModal" tabindex="-1" aria-labelledby="partModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div id="partModalContent">
                <!-- Content loaded dynamically -->
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay position-fixed top-0 start-0 w-100 h-100 d-none" style="background: rgba(0,0,0,0.5); z-index: 9999;">
    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

<script>
// Enhanced JavaScript for Parts page
(function() {
    'use strict';

    // Global functions for button handlers with enhanced error handling and visibility fixes
    window.handleAddPartClick = function(button) {
        console.log('?? [PARTS] Add part button clicked');
        
        if (button) {
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading...';
        }

        // Hide any loading overlays that might interfere
        hideLoadingOverlay();

        // Try multiple methods for loading the modal
        const methods = [
            () => {
                if (typeof window.PartManagement !== 'undefined' && window.PartManagement.showAddForm) {
                    console.log('? [PARTS] Using PartManagement module');
                    return window.PartManagement.showAddForm();
                }
                return false;
            },
            () => {
                if (typeof window.OpCentrixAdmin !== 'undefined' && window.OpCentrixAdmin.Parts && window.OpCentrixAdmin.Parts.showAddModal) {
                    console.log('? [PARTS] Using OpCentrixAdmin.Parts module');
                    return window.OpCentrixAdmin.Parts.showAddModal();
                }
                return false;
            },
            () => {
                if (typeof window.UI !== 'undefined' && window.UI.loadModal) {
                    console.log('? [PARTS] Using UI.loadModal');
                    return window.UI.loadModal('/Admin/Parts?handler=AddForm', 'partModal');
                }
                return false;
            },
            () => {
                console.log('?? [PARTS] Using fetch fallback');
                return loadPartForm('/Admin/Parts?handler=AddForm');
            },
            () => {
                console.log('?? [PARTS] Using redirect fallback');
                window.location.href = '/Admin/Parts?Action=Add';
                return true;
            }
        ];

        // Try each method until one succeeds
        let success = false;
        for (const method of methods) {
            try {
                if (method()) {
                    success = true;
                    break;
                }
            } catch (error) {
                console.log('? [PARTS] Method failed:', error.message);
            }
        }

        // Reset button state
        setTimeout(() => {
            if (button) {
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-plus me-2"></i>Add New Part';
            }
        }, 2000);

        if (!success) {
            console.error('? [PARTS] All add part methods failed');
            showNotification('Error loading form. Please refresh the page and try again.', 'error');
        }
    };

    window.handleEditPartClick = function(button, partId) {
        console.log('?? [PARTS] Edit part button clicked for ID:', partId);
        
        if (button) {
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        }

        // Hide any loading overlays that might interfere
        hideLoadingOverlay();

        // Try multiple methods for loading the edit modal
        const methods = [
            () => {
                if (typeof window.PartManagement !== 'undefined' && window.PartManagement.showEditForm) {
                    console.log('? [PARTS] Using PartManagement.showEditForm');
                    return window.PartManagement.showEditForm(partId);
                }
                return false;
            },
            () => {
                if (typeof window.OpCentrixAdmin !== 'undefined' && window.OpCentrixAdmin.Parts && window.OpCentrixAdmin.Parts.showEditModal) {
                    console.log('? [PARTS] Using OpCentrixAdmin.Parts.showEditModal');
                    return window.OpCentrixAdmin.Parts.showEditModal(partId);
                }
                return false;
            },
            () => {
                if (typeof window.UI !== 'undefined' && window.UI.loadModal) {
                    console.log('? [PARTS] Using UI.loadModal for edit');
                    return window.UI.loadModal(`/Admin/Parts?handler=EditForm&id=${partId}`, 'partModal');
                }
                return false;
            },
            () => {
                console.log('?? [PARTS] Using fetch fallback for edit');
                return loadPartForm(`/Admin/Parts?handler=EditForm&id=${partId}`);
            },
            () => {
                console.log('?? [PARTS] Using redirect fallback for edit');
                window.location.href = `/Admin/Parts?Action=Edit&Id=${partId}`;
                return true;
            }
        ];

        // Try each method until one succeeds
        let success = false;
        for (const method of methods) {
            try {
                if (method()) {
                    success = true;
                    break;
                }
            } catch (error) {
                console.log('? [PARTS] Edit method failed:', error.message);
            }
        }

        // Reset button state
        setTimeout(() => {
            if (button) {
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-edit"></i>';
            }
        }, 2000);

        if (!success) {
            console.error('? [PARTS] All edit part methods failed');
            showNotification('Error loading edit form. Please refresh the page and try again.', 'error');
        }
    };

    window.handleDeletePartClick = function(partId, partNumber, partName) {
        console.log('??? [PARTS] Delete part button clicked for:', partNumber);
        
        const message = `Are you sure you want to delete part "${partNumber}" (${partName})?\n\nThis action cannot be undone.`;
        
        if (confirm(message)) {
            // Create a form to submit the delete request
            const form = document.createElement('form');
            form.method = 'post';
            form.action = '/Admin/Parts?handler=Delete';
            
            // Add antiforgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token.value;
                form.appendChild(tokenInput);
            }
            
            // Add part ID
            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = partId;
            form.appendChild(idInput);
            
            document.body.appendChild(form);
            form.submit();
        }
    };

    // Enhanced fetch-based modal loading with better error handling
    function loadPartForm(url) {
        return fetch(url, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return response.text();
        })
        .then(html => {
            const modalContent = document.getElementById('partModalContent');
            if (modalContent) {
                modalContent.innerHTML = html;
                
                // Ensure modal has proper z-index and is visible
                const modal = document.getElementById('partModal');
                if (modal) {
                    // Fix z-index issues
                    modal.style.zIndex = '1055';
                    
                    // Show the modal using Bootstrap
                    if (typeof bootstrap !== 'undefined') {
                        const bsModal = new bootstrap.Modal(modal, {
                            backdrop: 'static',
                            keyboard: true
                        });
                        bsModal.show();
                    } else {
                        // Fallback manual show
                        modal.style.display = 'block';
                        modal.classList.add('show');
                        document.body.classList.add('modal-open');
                    }
                    
                    // Ensure buttons are visible and clickable
                    setTimeout(() => {
                        fixModalButtonVisibility();
                    }, 100);
                }
                
                console.log('? [PARTS] Modal loaded successfully');
                return true;
            }
            return false;
        })
        .catch(error => {
            console.error('? [PARTS] Error loading modal:', error);
            return false;
        });
    }

    // Fix modal button visibility issues
    function fixModalButtonVisibility() {
        const modalButtons = document.querySelectorAll('.modal-footer .btn');
        modalButtons.forEach(button => {
            // Force visibility
            button.style.opacity = '1';
            button.style.visibility = 'visible';
            button.style.pointerEvents = 'auto';
            button.style.position = 'relative';
            button.style.zIndex = '10';
            
            // Ensure proper colors
            if (button.classList.contains('btn-primary')) {
                button.style.backgroundColor = '#0d6efd';
                button.style.borderColor = '#0d6efd';
                button.style.color = '#ffffff';
            } else if (button.classList.contains('btn-secondary')) {
                button.style.backgroundColor = '#6c757d';
                button.style.borderColor = '#6c757d';
                button.style.color = '#ffffff';
            }
        });
        
        console.log('?? [PARTS] Fixed modal button visibility');
    }

    // Hide any loading overlays that might interfere with modal interaction
    function hideLoadingOverlay() {
        const overlays = document.querySelectorAll('.loading-overlay, .htmx-indicator');
        overlays.forEach(overlay => {
            overlay.style.display = 'none';
            overlay.style.pointerEvents = 'none';
            overlay.classList.add('hidden');
        });
    }

    // Additional utility functions
    window.showPartDetails = function(partId) {
        fetch(`/Admin/Parts?handler=PartData&id=${partId}`)
            .then(response => response.json())
            .then(part => {
                const details = `
                    <div class="modal-header">
                        <h5 class="modal-title">Part Details: ${part.partNumber}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Basic Information</h6>
                                <p><strong>Name:</strong> ${part.name}</p>
                                <p><strong>Description:</strong> ${part.description}</p>
                                <p><strong>Industry:</strong> ${part.industry}</p>
                                <p><strong>Application:</strong> ${part.application}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Manufacturing</h6>
                                <p><strong>Material:</strong> ${part.material}</p>
                                <p><strong>SLS Material:</strong> ${part.slsMaterial}</p>
                                <p><strong>Estimated Hours:</strong> ${part.estimatedHours}h</p>
                                <p><strong>Process Type:</strong> ${part.processType}</p>
                            </div>
                        </div>
                    </div>
                `;
                
                document.getElementById('partModalContent').innerHTML = details;
                const modal = new bootstrap.Modal(document.getElementById('partModal'));
                modal.show();
            })
            .catch(error => {
                console.error('Error loading part details:', error);
                showNotification('Error loading part details.', 'error');
            });
    };

    window.changePageSize = function(newSize) {
        const url = new URL(window.location);
        url.searchParams.set('PageSize', newSize);
        url.searchParams.set('PageNumber', '1'); // Reset to first page
        window.location.href = url.toString();
    };

    // Initialize tooltips and modal event handlers
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Bootstrap tooltips
        if (typeof bootstrap !== 'undefined') {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        // Enhanced modal event handling for z-index and interaction fixes
        const partModal = document.getElementById('partModal');
        if (partModal) {
            partModal.addEventListener('shown.bs.modal', function() {
                console.log('? [PARTS] Modal shown, fixing visibility issues');
                
                // Ensure proper z-index layering
                this.style.zIndex = '1055';
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) {
                    backdrop.style.zIndex = '1050';
                }
                
                // Fix button visibility
                setTimeout(() => {
                    fixModalButtonVisibility();
                }, 50);
                
                // Focus first input for accessibility
                const firstInput = this.querySelector('input, select, textarea');
                if (firstInput) {
                    firstInput.focus();
                }
            });
            
            partModal.addEventListener('hidden.bs.modal', function() {
                console.log('? [PARTS] Modal hidden, cleaning up');
                
                // Clear modal content
                const modalContent = document.getElementById('partModalContent');
                if (modalContent) {
                    modalContent.innerHTML = '';
                }
                
                // Ensure body scroll is restored
                document.body.style.overflow = '';
                document.body.classList.remove('modal-open');
                
                // Remove any lingering backdrops
                const backdrops = document.querySelectorAll('.modal-backdrop');
                backdrops.forEach(backdrop => {
                    if (backdrop.parentNode) {
                        backdrop.parentNode.removeChild(backdrop);
                    }
                });
            });
        }

        console.log('? [PARTS] Page initialized successfully');
    });

    // Global modal management functions
    window.ensureModalVisibility = function() {
        const modal = document.getElementById('partModal');
        if (modal && modal.classList.contains('show')) {
            // Fix z-index issues
            modal.style.zIndex = '1055';
            
            const backdrop = document.querySelector('.modal-backdrop');
            if (backdrop) {
                backdrop.style.zIndex = '1050';
            }
            
            // Fix button visibility
            fixModalButtonVisibility();
            
            // Ensure no other overlays are interfering
            hideLoadingOverlay();
            
            console.log('?? [PARTS] Modal visibility ensured');
        }
    };

    // Enhanced notification system with proper z-index
    function showNotification(message, type = 'info') {
        // Create a simple toast notification with high z-index
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; pointer-events: auto;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 5000);
    }

    // Debug function for troubleshooting modal and button issues
    window.debugPartsModal = function() {
        console.group('?? Parts Modal Debug Information');
        
        const modal = document.getElementById('partModal');
        console.log('Modal element:', modal);
        console.log('Modal display:', modal ? window.getComputedStyle(modal).display : 'N/A');
        console.log('Modal z-index:', modal ? window.getComputedStyle(modal).zIndex : 'N/A');
        
        const backdrop = document.querySelector('.modal-backdrop');
        console.log('Backdrop element:', backdrop);
        console.log('Backdrop z-index:', backdrop ? window.getComputedStyle(backdrop).zIndex : 'N/A');
        
        const buttons = document.querySelectorAll('.modal-footer .btn');
        console.log('Modal buttons found:', buttons.length);
        buttons.forEach((btn, index) => {
            const styles = window.getComputedStyle(btn);
            console.log(`Button ${index + 1}:`, {
                opacity: styles.opacity,
                visibility: styles.visibility,
                backgroundColor: styles.backgroundColor,
                color: styles.color,
                zIndex: styles.zIndex,
                pointerEvents: styles.pointerEvents
            });
        });
        
        const overlays = document.querySelectorAll('.loading-overlay, .htmx-indicator');
        console.log('Loading overlays found:', overlays.length);
        overlays.forEach((overlay, index) => {
            const styles = window.getComputedStyle(overlay);
            console.log(`Overlay ${index + 1}:`, {
                display: styles.display,
                zIndex: styles.zIndex,
                pointerEvents: styles.pointerEvents
            });
        });
        
        console.log('Bootstrap available:', typeof bootstrap !== 'undefined');
        console.log('Current page URL:', window.location.href);
        console.log('Total parts:', @Model.TotalCount);
        console.log('Current page:', @Model.PageNumber, 'of', @Model.TotalPages);
        
        console.groupEnd();
    };

    // Auto-diagnostic and fix attempt
    setTimeout(() => {
        // Auto-fix any visibility issues on page load
        ensureModalVisibility();
        
        // Run debug in development
        if (window.location.hostname === 'localhost') {
            debugPartsModal();
        }
    }, 1000);
})();
</script>