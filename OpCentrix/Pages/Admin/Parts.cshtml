@page
@model OpCentrix.Pages.Admin.PartsModel
@{
    ViewData["Title"] = "Parts Management";
    ViewData["Description"] = "Manage SLS manufacturing parts and specifications";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <!-- Simplified Header Section -->
    <div class="parts-page-header">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <h1 class="parts-page-title">
                    <i class="fas fa-cogs text-primary"></i>
                    Parts Management (@Model.TotalCount)
                </h1>
                <p class="parts-page-subtitle">Manufacturing Parts Library</p>
            </div>
            <div class="d-flex gap-3">
                <button type="button" 
                        class="btn btn-primary btn-lg" 
                        onclick="handleAddPartClick()"
                        data-bs-toggle="tooltip" 
                        title="Add New Part">
                    <i class="fas fa-plus me-2"></i>Add New Part
                </button>
                <button type="button" 
                        class="btn btn-outline-secondary" 
                        onclick="window.location.reload()" 
                        data-bs-toggle="tooltip" 
                        title="Refresh Parts List">
                    <i class="fas fa-sync-alt"></i>
                </button>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row g-4">
            <div class="col-md-3">
                <div class="card parts-stats-card active-parts border-0">
                    <div class="card-body text-center">
                        <div class="parts-stats-number text-success">@Model.ActivePartsCount</div>
                        <div class="parts-stats-label">Active Parts</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card parts-stats-card inactive-parts border-0">
                    <div class="card-body text-center">
                        <div class="parts-stats-number">@Model.InactivePartsCount</div>
                        <div class="parts-stats-label">Inactive Parts</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card parts-stats-card top-material border-0">
                    <div class="card-body text-center">
                        <div class="parts-stats-number">@Model.MostUsedMaterial</div>
                        <div class="parts-stats-label">Top Material</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card parts-stats-card avg-duration border-0">
                    <div class="card-body text-center">
                        <div class="parts-stats-number">@Model.AverageEstimatedHours.ToString("F1")h</div>
                        <div class="parts-stats-label">Avg Duration</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Simplified Filters Section -->
    <div class="card parts-filter-section mb-4">
        <div class="card-header parts-filter-header">
            <h6 class="parts-filter-title">
                <i class="fas fa-filter text-primary"></i>
                Filters & Search
            </h6>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3" id="filterForm">
                <div class="col-md-4">
                    <label for="SearchTerm" class="form-label">
                        <i class="fas fa-search me-1"></i>Search
                    </label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input asp-for="SearchTerm" 
                               class="form-control" 
                               placeholder="Part number, name, description..." />
                    </div>
                </div>
                <div class="col-md-2">
                    <label for="MaterialFilter" class="form-label">
                        <i class="fas fa-flask me-1"></i>Material
                    </label>
                    <select asp-for="MaterialFilter" class="form-select">
                        <option value="">All Materials</option>
                        @foreach (var material in Model.AvailableMaterials)
                        {
                            <option value="@material" selected="@(Model.MaterialFilter == material)">@material</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="IndustryFilter" class="form-label">
                        <i class="fas fa-industry me-1"></i>Industry
                    </label>
                    <select asp-for="IndustryFilter" class="form-select">
                        <option value="">All Industries</option>
                        @foreach (var industry in Model.AvailableIndustries)
                        {
                            <option value="@industry" selected="@(Model.IndustryFilter == industry)">@industry</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="CategoryFilter" class="form-label">
                        <i class="fas fa-tags me-1"></i>Category
                    </label>
                    <select asp-for="CategoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.AvailableCategories)
                        {
                            <option value="@category" selected="@(Model.CategoryFilter == category)">@category</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">
                        <i class="fas fa-toggle-on me-1"></i>Options
                    </label>
                    <div class="form-check">
                        <input asp-for="ActiveOnly" class="form-check-input" type="checkbox" />
                        <label asp-for="ActiveOnly" class="form-check-label">Active Only</label>
                    </div>
                    <button type="submit" class="btn btn-primary btn-sm w-100 mt-1">
                        <i class="fas fa-filter"></i>
                        <span class="d-none d-lg-inline ms-1">Apply</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Simplified Parts Table -->
    <div class="card parts-card border-0">
        <div class="card-header bg-white border-bottom">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="parts-card-title">
                    <i class="fas fa-list text-primary"></i>
                    Parts Library
                    <span class="badge bg-secondary ms-2">@Model.TotalCount total</span>
                </h5>
                <div class="d-flex gap-3 align-items-center">
                    <div class="d-flex align-items-center gap-2">
                        <span class="text-muted small">
                            <i class="fas fa-info-circle me-1"></i>
                            Page @Model.PageNumber of @Model.TotalPages
                        </span>
                        <select class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                            <option value="10" selected="@(Model.PageSize == 10)">10 per page</option>
                            <option value="20" selected="@(Model.PageSize == 20)">20 per page</option>
                            <option value="50" selected="@(Model.PageSize == 50)">50 per page</option>
                            <option value="100" selected="@(Model.PageSize == 100)">100 per page</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            @if (Model.Parts.Any())
            {
                <div class="table-responsive">
                    <table class="table parts-table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>
                                    <a href="?SortBy=PartNumber&SortDirection=@Model.GetSortDirection("PartNumber")&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" 
                                       class="text-decoration-none">
                                        <i class="fas fa-hashtag me-1"></i>
                                        Part Number @Model.GetSortIcon("PartNumber")
                                    </a>
                                </th>
                                <th>
                                    <a href="?SortBy=Name&SortDirection=@Model.GetSortDirection("Name")&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" 
                                       class="text-decoration-none">
                                        <i class="fas fa-tag me-1"></i>
                                        Name @Model.GetSortIcon("Name")
                                    </a>
                                </th>
                                <th>
                                    <a href="?SortBy=Material&SortDirection=@Model.GetSortDirection("Material")&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" 
                                       class="text-decoration-none">
                                        <i class="fas fa-flask me-1"></i>
                                        Material @Model.GetSortIcon("Material")
                                    </a>
                                </th>
                                <th>
                                    <i class="fas fa-tasks me-1"></i>
                                    Manufacturing Stages
                                </th>
                                <th>
                                    <a href="?SortBy=Hours&SortDirection=@Model.GetSortDirection("Hours")&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly&PageNumber=@Model.PageNumber" 
                                       class="text-decoration-none">
                                        <i class="fas fa-clock me-1"></i>
                                        Duration @Model.GetSortIcon("Hours")
                                    </a>
                                </th>
                                <th>
                                    <i class="fas fa-info-circle me-1"></i>
                                    Status
                                </th>
                                <th width="200">
                                    <i class="fas fa-cog me-1"></i>
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var part in Model.Parts)
                            {
                                <tr class="@(part.HasAdminOverride ? "parts-admin-override" : "")">
                                    <td>
                                        <div class="fw-bold text-primary">@part.PartNumber</div>
                                        @if (!string.IsNullOrEmpty(part.CustomerPartNumber))
                                        {
                                            <div class="small text-muted">
                                                <i class="fas fa-external-link-alt me-1"></i>
                                                Customer: @part.CustomerPartNumber
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <div class="fw-semibold">@part.Name</div>
                                        @if (!string.IsNullOrEmpty(part.Description) && part.Description.Length > 40)
                                        {
                                            <div class="small text-muted">@(part.Description.Substring(0, 40))...</div>
                                        }
                                        else if (!string.IsNullOrEmpty(part.Description))
                                        {
                                            <div class="small text-muted">@part.Description</div>
                                        }
                                        <div class="small text-info mt-1">
                                            <i class="fas fa-building me-1"></i>@part.Industry
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge parts-badge bg-primary">
                                            <i class="fas fa-atom me-1"></i>
                                            @part.Material
                                        </span>
                                    </td>
                                    <td>
                                        <!-- Simple Stage Indicators using boolean flags -->
                                        <div class="d-flex flex-wrap gap-1 mb-1">
                                            @if (part.RequiresSLSPrinting)
                                            {
                                                <span class="badge stage-indicator bg-primary" data-bs-toggle="tooltip" title="SLS Printing Required">
                                                    <i class="fas fa-print me-1"></i>SLS
                                                </span>
                                            }
                                            @if (part.RequiresCNCMachining)
                                            {
                                                <span class="badge stage-indicator bg-success" data-bs-toggle="tooltip" title="CNC Machining Required">
                                                    <i class="fas fa-cogs me-1"></i>CNC
                                                </span>
                                            }
                                            @if (part.RequiresEDMOperations)
                                            {
                                                <span class="badge stage-indicator bg-warning text-dark" data-bs-toggle="tooltip" title="EDM Operations Required">
                                                    <i class="fas fa-bolt me-1"></i>EDM
                                                </span>
                                            }
                                            @if (part.RequiresAssembly)
                                            {
                                                <span class="badge stage-indicator bg-info" data-bs-toggle="tooltip" title="Assembly Required">
                                                    <i class="fas fa-puzzle-piece me-1"></i>Assembly
                                                </span>
                                            }
                                            @if (part.RequiresFinishing)
                                            {
                                                <span class="badge stage-indicator bg-secondary" data-bs-toggle="tooltip" title="Finishing Required">
                                                    <i class="fas fa-brush me-1"></i>Finishing
                                                </span>
                                            }
                                            @if (part.RequiresInspection)
                                            {
                                                <span class="badge stage-indicator bg-danger" data-bs-toggle="tooltip" title="Quality Inspection Required">
                                                    <i class="fas fa-search me-1"></i>QC
                                                </span>
                                            }
                                        </div>
                                        @{
                                            var stageCount = 0;
                                            if (part.RequiresSLSPrinting) stageCount++;
                                            if (part.RequiresCNCMachining) stageCount++;
                                            if (part.RequiresEDMOperations) stageCount++;
                                            if (part.RequiresAssembly) stageCount++;
                                            if (part.RequiresFinishing) stageCount++;
                                            if (part.RequiresInspection) stageCount++;
                                        }
                                        @if (stageCount > 0)
                                        {
                                            <div class="small text-muted">
                                                <i class="fas fa-route me-1"></i>
                                                @stageCount stage@(stageCount == 1 ? "" : "s")
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="small text-muted">
                                                <i class="fas fa-info-circle me-1"></i>
                                                No stages specified
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        @if (part.HasAdminOverride)
                                        {
                                            <div class="fw-bold text-warning">
                                                <i class="fas fa-user-shield me-1"></i>
                                                @(part.AdminEstimatedHoursOverride?.ToString("F1") ?? "0.0")h
                                                <span class="badge bg-warning text-dark ms-1">OVERRIDE</span>
                                            </div>
                                            <div class="small text-muted">
                                                <i class="fas fa-clock me-1"></i>
                                                Standard: @part.EstimatedHours.ToString("F1")h
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="fw-semibold">
                                                <i class="fas fa-clock me-1"></i>
                                                @part.EstimatedHours.ToString("F1")h
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <div class="d-flex flex-wrap gap-1">
                                            <span class="badge parts-badge @Model.GetStatusBadgeClass(part.IsActive)">
                                                <i class="fas fa-@(part.IsActive ? "check-circle" : "pause-circle") me-1"></i>
                                                @(part.IsActive ? "Active" : "Inactive")
                                            </span>
                                            <span class="badge parts-badge @(part.PartClass == "A" ? "bg-danger" : part.PartClass == "B" ? "bg-warning text-dark" : "bg-info")">
                                                <i class="fas fa-star me-1"></i>
                                                Class @part.PartClass
                                            </span>
                                        </div>
                                        @if (part.RequiresFDA || part.RequiresAS9100 || part.RequiresNADCAP)
                                        {
                                            <div class="mt-1 d-flex flex-wrap gap-1">
                                                @if (part.RequiresFDA)
                                                {
                                                    <span class="badge parts-badge bg-danger">
                                                        <i class="fas fa-shield-alt me-1"></i>FDA
                                                    </span>
                                                }
                                                @if (part.RequiresAS9100)
                                                {
                                                    <span class="badge parts-badge bg-danger">
                                                        <i class="fas fa-certificate me-1"></i>AS9100
                                                    </span>
                                                }
                                                @if (part.RequiresNADCAP)
                                                {
                                                    <span class="badge parts-badge bg-danger">
                                                        <i class="fas fa-award me-1"></i>NADCAP
                                                    </span>
                                                }
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group parts-btn-group btn-group-sm d-flex flex-wrap gap-1" role="group">
                                            <!-- Edit button -->
                                            <button type="button" class="btn btn-sm btn-primary" 
                                                    onclick="handleEditPartClick(@part.Id)" 
                                                    data-bs-toggle="tooltip" title="Edit Part">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            
                                            <!-- Delete button -->
                                            <button type="button" 
                                                    class="btn btn-sm btn-outline-danger" 
                                                    onclick="handleDeletePartClick(@part.Id, '@part.PartNumber', '@part.Name')" 
                                                    data-bs-toggle="tooltip" 
                                                    title="Delete Part">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <div class="card-footer bg-white border-top">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <nav aria-label="Parts pagination">
                                    <ul class="pagination pagination-sm mb-0">
                                        @if (Model.PageNumber > 1)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="?PageNumber=@(Model.PageNumber - 1)&SortBy=@Model.SortBy&SortDirection=@Model.SortDirection&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly">
                                                    <i class="fas fa-chevron-left me-1"></i>Previous
                                                </a>
                                            </li>
                                        }

                                        @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                                        {
                                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                                <a class="page-link" href="?PageNumber=@i&SortBy=@Model.SortBy&SortDirection=@Model.SortDirection&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly">@i</a>
                                            </li>
                                        }

                                        @if (Model.PageNumber < Model.TotalPages)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="?PageNumber=@(Model.PageNumber + 1)&SortBy=@Model.SortBy&SortDirection=@Model.SortDirection&SearchTerm=@Model.SearchTerm&MaterialFilter=@Model.MaterialFilter&IndustryFilter=@Model.IndustryFilter&CategoryFilter=@Model.CategoryFilter&ActiveOnly=@Model.ActiveOnly">
                                                    Next<i class="fas fa-chevron-right ms-1"></i>
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                            </div>
                            <div class="col-md-6 text-end">
                                <small class="text-muted d-flex align-items-center justify-content-end">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount) of @Model.TotalCount parts
                                </small>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="parts-empty-state">
                    <i class="fas fa-cogs text-muted fa-3x mb-3"></i>
                    <h5 class="text-muted">No parts found</h5>
                    <p class="text-muted">Try adjusting your search criteria or add a new part to get started.</p>
                    <button type="button" 
                            class="btn btn-primary btn-lg" 
                            onclick="handleAddPartClick()">
                        <i class="fas fa-plus me-2"></i>Add Your First Part
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal for Part Form -->
<div class="modal fade" id="partModal" tabindex="-1" aria-labelledby="partModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div id="partModalContent">
                <!-- Content loaded dynamically -->
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>

<!-- Hidden antiforgery token form for JavaScript access -->
<form id="hiddenAntiforgeryForm" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<!-- HTMX for seamless form submission -->
<script src="https://unpkg.com/htmx.org@1.9.10/dist/htmx.min.js"></script>

<!-- BULLETPROOF PARTS PAGE JAVASCRIPT - COMPREHENSIVE SOLUTION -->
<script>
(function() {
    'use strict';
    
    console.log('?? [PARTS] Loading bulletproof Parts page with comprehensive debugging');
    
    // ===================================================================
    // GLOBAL CONFIGURATION AND STATE
    // ===================================================================
    
    const CONFIG = {
        DEBUG: true,
        RETRY_ATTEMPTS: 3,
        RETRY_DELAY: 1000,
        TIMEOUT: 30000,
        ANTIFORGERY_TOKEN_SELECTOR: 'input[name="__RequestVerificationToken"]'
    };
    
    let antiforgeryToken = '';
    let pageState = {
        modalsInitialized: false,
        toastsInitialized: false,
        formValidationActive: false
    };
    
    // ===================================================================
    // ANTIFORGERY TOKEN MANAGEMENT - BULLETPROOF
    // ===================================================================
    
    function initializeAntiforgeryToken() {
        try {
            const tokenInput = document.querySelector(CONFIG.ANTIFORGERY_TOKEN_SELECTOR);
            if (tokenInput) {
                antiforgeryToken = tokenInput.value;
                console.log('? [PARTS] Antiforgery token initialized:', antiforgeryToken.substring(0, 20) + '...');
                return true;
            } else {
                console.warn('?? [PARTS] Antiforgery token not found');
                return false;
            }
        } catch (error) {
            console.error('? [PARTS] Error initializing antiforgery token:', error);
            return false;
        }
    }
    
    function getAntiforgeryToken() {
        if (!antiforgeryToken) {
            initializeAntiforgeryToken();
        }
        return antiforgeryToken;
    }
    
    // ===================================================================
    // MAIN BUTTON HANDLERS - BULLETPROOF WITH COMPREHENSIVE FALLBACKS
    // ===================================================================
    
    window.handleAddPartClick = function() {
        const operationId = generateOperationId();
        console.log(`?? [PARTS-${operationId}] Add part button clicked`);
        
        try {
            loadPartForm('add', null, operationId);
        } catch (error) {
            console.error(`? [PARTS-${operationId}] Error in handleAddPartClick:`, error);
            showToast('error', 'Failed to open add part form. Please try again.');
        }
    };
    
    window.handleEditPartClick = function(partId) {
        const operationId = generateOperationId();
        console.log(`?? [PARTS-${operationId}] Edit part button clicked for ID: ${partId}`);
        
        try {
            if (!partId || partId <= 0) {
                console.error(`? [PARTS-${operationId}] Invalid part ID: ${partId}`);
                showToast('error', 'Invalid part ID');
                return;
            }
            
            loadPartForm('edit', partId, operationId);
        } catch (error) {
            console.error(`? [PARTS-${operationId}] Error in handleEditPartClick:`, error);
            showToast('error', 'Failed to open edit part form. Please try again.');
        }
    };
    
    window.handleDeletePartClick = function(partId, partNumber, partName) {
        const operationId = generateOperationId();
        console.log(`??? [PARTS-${operationId}] Delete part button clicked for: ${partNumber}`);
        
        try {
            if (!partId || partId <= 0) {
                console.error(`? [PARTS-${operationId}] Invalid part ID: ${partId}`);
                showToast('error', 'Invalid part ID');
                return;
            }
            
            const message = `Are you sure you want to delete part "${partNumber}" (${partName})?\n\nThis action cannot be undone.`;
            
            if (confirm(message)) {
                console.log(`? [PARTS-${operationId}] Delete confirmed, submitting form`);
                submitDeleteForm(partId, operationId);
            } else {
                console.log(`? [PARTS-${operationId}] Delete cancelled by user`);
            }
        } catch (error) {
            console.error(`? [PARTS-${operationId}] Error in handleDeletePartClick:`, error);
            showToast('error', 'Failed to process delete request. Please try again.');
        }
    };
    
    // ===================================================================
    // CORE FUNCTIONALITY - ENHANCED WITH COMPREHENSIVE ERROR HANDLING
    // ===================================================================
    
    function loadPartForm(action, partId, operationId) {
        console.log(`?? [PARTS-${operationId}] Loading part form: ${action}${partId ? `, ID: ${partId}` : ''}`);
        
        // Validate inputs
        if (!action || (action !== 'add' && action !== 'edit')) {
            throw new Error(`Invalid action: ${action}`);
        }
        
        if (action === 'edit' && (!partId || partId <= 0)) {
            throw new Error(`Invalid partId for edit: ${partId}`);
        }
        
        // Build URL
        let url = '/Admin/Parts?handler=';
        if (action === 'add') {
            url += 'Add';
        } else if (action === 'edit') {
            url += `Edit&id=${partId}`;
        }
        
        console.log(`?? [PARTS-${operationId}] Request URL: ${url}`);
        
        // Get modal elements
        const modal = document.getElementById('partModal');
        const modalContent = document.getElementById('partModalContent');
        
        if (!modal || !modalContent) {
            console.error(`? [PARTS-${operationId}] Modal elements not found, redirecting to full page`);
            window.location.href = url;
            return;
        }
        
        // Show loading state
        modalContent.innerHTML = createLoadingContent(action, operationId);
        
        // Show modal
        showModal(modal, operationId);
        
        // Fetch form content with comprehensive error handling
        fetchFormContent(url, modalContent, action, operationId);
    }
    
    function fetchFormContent(url, modalContent, action, operationId) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
            console.error(`? [PARTS-${operationId}] Request timed out after ${CONFIG.TIMEOUT}ms`);
        }, CONFIG.TIMEOUT);
        
        const headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'X-Requested-With': 'XMLHttpRequest',
            'HX-Request': 'true',
            'Cache-Control': 'no-cache'
        };
        
        // Add antiforgery token
        const token = getAntiforgeryToken();
        if (token) {
            headers['RequestVerificationToken'] = token;
        }
        
        fetch(url, {
            method: 'GET',
            headers: headers,
            signal: controller.signal,
            credentials: 'same-origin'
        })
        .then(response => {
            clearTimeout(timeoutId);
            
            console.log(`?? [PARTS-${operationId}] Response received: ${response.status} ${response.statusText}`);
            
            if (!response.ok) {
                throw new Error(`Server error: ${response.status} ${response.statusText}`);
            }
            
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('text/html')) {
                throw new Error(`Invalid response type: Expected HTML, got ${contentType}`);
            }
            
            return response.text();
        })
        .then(html => {
            if (!html || html.trim() === '') {
                throw new Error('Empty response received from server');
            }
            
            if (html.includes('<!DOCTYPE html>') && !html.includes('modal-header')) {
                throw new Error('Received full page instead of form partial');
            }
            
            console.log(`? [PARTS-${operationId}] Form HTML received, length: ${html.length}`);
            
            // Load content into modal
            modalContent.innerHTML = html;
            
            // Initialize form after loading
            setTimeout(() => {
                initializeFormComponents(operationId);
                setModalFocus();
                console.log(`? [PARTS-${operationId}] Form initialized successfully`);
            }, 200);
            
        })
        .catch(error => {
            clearTimeout(timeoutId);
            console.error(`? [PARTS-${operationId}] Error loading part form:`, error);
            
            const errorMessage = getErrorMessage(error);
            modalContent.innerHTML = createErrorContent(action, errorMessage, url, operationId);
            showToast('error', `Failed to load ${action} form: ${errorMessage}`);
        });
    }
    
    function submitDeleteForm(partId, operationId) {
        try {
            // Create and submit form
            const form = document.createElement('form');
            form.method = 'post';
            form.action = '/Admin/Parts?handler=Delete';
            form.style.display = 'none';
            
            // Add antiforgery token
            const token = getAntiforgeryToken();
            if (token) {
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token;
                form.appendChild(tokenInput);
            } else {
                console.warn(`?? [PARTS-${operationId}] No antiforgery token available for delete`);
            }
            
            // Add part ID
            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = partId;
            form.appendChild(idInput);
            
            // Submit form
            document.body.appendChild(form);
            form.submit();
            
            console.log(`? [PARTS-${operationId}] Delete form submitted successfully`);
            
        } catch (error) {
            console.error(`? [PARTS-${operationId}] Error creating delete form:`, error);
            showToast('error', 'Failed to delete part. Please try again.');
        }
    }
    
    // ===================================================================
    // UI COMPONENTS AND MODAL MANAGEMENT
    // ===================================================================
    
    function showModal(modal, operationId) {
        try {
            if (typeof bootstrap !== 'undefined') {
                const bootstrapModal = new bootstrap.Modal(modal, {
                    backdrop: 'static',
                    keyboard: true
                });
                bootstrapModal.show();
                console.log(`? [PARTS-${operationId}] Bootstrap modal shown`);
            } else {
                // Fallback modal display
                modal.style.display = 'block';
                modal.classList.add('show');
                document.body.classList.add('modal-open');
                console.log(`? [PARTS-${operationId}] Fallback modal shown`);
            }
        } catch (error) {
            console.error(`? [PARTS-${operationId}] Error showing modal:`, error);
            throw new Error('Failed to show modal');
        }
    }
    
    window.showToast = function(type, message) {
        const operationId = generateOperationId();
        console.log(`?? [PARTS-${operationId}] Showing ${type} toast: ${message}`);
        
        try {
            if (typeof bootstrap !== 'undefined') {
                const toastId = `toast-${Date.now()}`;
                const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
                const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
                
                const toastHtml = `
                    <div id="${toastId}" class="toast align-items-center text-white ${bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="5000">
                        <div class="d-flex">
                            <div class="toast-body">
                                <i class="fas ${iconClass} me-2"></i>
                                ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;
                
                let toastContainer = document.getElementById('toast-container');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.id = 'toast-container';
                    toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
                    toastContainer.style.zIndex = '1055';
                    document.body.appendChild(toastContainer);
                }
                
                toastContainer.insertAdjacentHTML('beforeend', toastHtml);
                const toastElement = document.getElementById(toastId);
                const toast = new bootstrap.Toast(toastElement);
                toast.show();
                
                toastElement.addEventListener('hidden.bs.toast', () => {
                    toastElement.remove();
                });
                
                console.log(`? [PARTS-${operationId}] Bootstrap toast displayed successfully`);
            } else {
                console.warn(`?? [PARTS-${operationId}] Bootstrap not available, using alert fallback`);
                alert(`${type.toUpperCase()}: ${message}`);
            }
        } catch (error) {
            console.error(`? [PARTS-${operationId}] Error showing toast:`, error);
            alert(`${type.toUpperCase()}: ${message}`);
        }
    };
    
    // ===================================================================
    // UTILITY AND HELPER FUNCTIONS
    // ===================================================================
    
    window.changePageSize = function(newSize) {
        const url = new URL(window.location);
        url.searchParams.set('PageSize', newSize);
        url.searchParams.set('PageNumber', '1');
        window.location.href = url.toString();
    };
    
    function generateOperationId() {
        return Math.random().toString(36).substring(2, 10);
    }
    
    function initializeFormComponents(operationId) {
        try {
            // Initialize Bootstrap tooltips
            if (typeof bootstrap !== 'undefined') {
                const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                tooltipTriggerList.forEach(tooltipTriggerEl => {
                    new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }
            
            // Add form validation classes
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                if (form.checkValidity) {
                    form.addEventListener('submit', function(event) {
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    });
                }
            });
            
            console.log(`? [PARTS-${operationId}] Form components initialized`);
        } catch (error) {
            console.warn(`?? [PARTS-${operationId}] Error initializing form components:`, error);
        }
    }
    
    function setModalFocus() {
        try {
            const modal = document.getElementById('partModal');
            if (modal) {
                const firstInput = modal.querySelector('input:not([type="hidden"]), select, textarea');
                if (firstInput && typeof firstInput.focus === 'function') {
                    setTimeout(() => {
                        firstInput.focus();
                    }, 300);
                }
            }
        } catch (error) {
            console.warn('?? [PARTS] Error setting modal focus:', error);
        }
    }
    
    function createLoadingContent(action, operationId) {
        const actionText = action === 'add' ? 'Add Part' : 'Edit Part';
        
        return `
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <i class="fas fa-cogs me-2"></i>
                        Loading ${actionText}... (${operationId})
                    </div>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center py-5">
                <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="text-muted">Loading part form...</p>
                <div class="progress" style="height: 6px;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                         role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
                    </div>
                </div>
                <small class="text-muted">Operation ID: ${operationId}</small>
            </div>
        `;
    }
    
    function createErrorContent(action, errorMessage, fallbackUrl, operationId) {
        return `
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Error Loading ${action === 'add' ? 'Add Part' : 'Edit Part'} Form
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger d-flex align-items-center" role="alert">
                    <i class="fas fa-exclamation-circle me-3 fa-lg"></i>
                    <div>
                        <strong>Unable to load form:</strong><br>
                        ${errorMessage}
                    </div>
                </div>
                <div class="mt-3">
                    <h6 class="text-muted">What you can do:</h6>
                    <ul class="text-muted small">
                        <li>Try refreshing the page and attempting again</li>
                        <li>Check your internet connection</li>
                        <li>Contact support if the problem persists</li>
                    </ul>
                    <p class="small text-muted mt-2">Operation ID: ${operationId}</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Close
                </button>
                <button type="button" class="btn btn-primary" onclick="window.location.reload()">
                    <i class="fas fa-sync-alt me-2"></i>Refresh Page
                </button>
                <button type="button" class="btn btn-info" onclick="window.open('${fallbackUrl}', '_blank')">
                    <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                </button>
            </div>
        `;
    }
    
    function getErrorMessage(error) {
        if (error.name === 'AbortError') {
            return 'Request timed out. Please check your connection and try again.';
        }
        if (error.message) {
            return error.message;
        }
        return 'An unexpected error occurred.';
    }
    
    // ===================================================================
    // INITIALIZATION AND EVENT LISTENERS
    // ===================================================================
    
    document.addEventListener('DOMContentLoaded', function() {
        const operationId = generateOperationId();
        console.log(`?? [PARTS-${operationId}] Initializing bulletproof Parts page`);
        
        try {
            // Initialize antiforgery token
            if (!initializeAntiforgeryToken()) {
                console.warn(`?? [PARTS-${operationId}] Failed to initialize antiforgery token`);
            }
            
            // Initialize Bootstrap tooltips
            if (typeof bootstrap !== 'undefined') {
                const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                tooltipTriggerList.forEach(tooltipTriggerEl => {
                    new bootstrap.Tooltip(tooltipTriggerEl, {
                        trigger: 'hover',
                        delay: { show: 500, hide: 100 }
                    });
                });
                console.log(`? [PARTS-${operationId}] Bootstrap tooltips initialized`);
            }
            
            // Initialize HTMX event listeners
            if (typeof htmx !== 'undefined') {
                document.addEventListener('htmx:afterRequest', function(event) {
                    if (event.target.closest('#partModal') && event.detail.successful) {
                        console.log(`? [PARTS] HTMX form submission successful`);
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    }
                });
                console.log(`? [PARTS-${operationId}] HTMX event listeners initialized`);
            }
            
            console.log(`? [PARTS-${operationId}] Bulletproof Parts page initialized successfully`);
            
        } catch (error) {
            console.error(`? [PARTS-${operationId}] Error initializing Parts page:`, error);
        }
    });
    
    // Global error handler
    window.addEventListener('error', function(event) {
        console.error('?? [PARTS] Global error caught:', event.error);
    });
    
    // Debug functions for troubleshooting
    window.debugPartsPage = function() {
        console.group('?? [PARTS] Debug Information');
        console.log('Antiforgery token:', antiforgeryToken ? 'Present' : 'Missing');
        console.log('Bootstrap available:', typeof bootstrap !== 'undefined');
        console.log('HTMX available:', typeof htmx !== 'undefined');
        console.log('Page state:', pageState);
        console.log('Config:', CONFIG);
        console.groupEnd();
    };
    
    console.log('? [PARTS] Bulletproof Parts page JavaScript loaded and ready');
})();
</script>

<style>
    .stage-indicator {
        font-size: 0.75rem;
        font-weight: 500;
        border-radius: 4px;
        padding: 2px 6px;
        margin: 1px;
        display: inline-flex;
        align-items: center;
        white-space: nowrap;
    }

    .parts-admin-override {
        background-color: rgba(255, 193, 7, 0.1);
        border-left: 3px solid #ffc107;
    }

    .parts-stats-card {
        transition: transform 0.2s ease-in-out;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .parts-stats-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .parts-stats-number {
        font-size: 2rem;
        font-weight: 700;
        line-height: 1;
    }

    .parts-stats-label {
        font-size: 0.9rem;
        color: #6c757d;
        margin-top: 5px;
    }

    .parts-badge {
        font-size: 0.75rem;
        font-weight: 500;
        margin: 1px;
    }

    .parts-empty-state {
        text-align: center;
        padding: 60px 20px;
    }

    .parts-filter-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-bottom: 1px solid #dee2e6;
    }

    .parts-filter-title {
        margin: 0;
        color: #495057;
        font-weight: 600;
    }

    .parts-table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #495057;
        border-color: #dee2e6;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .parts-table th a {
        color: #495057;
        text-decoration: none;
    }

    .parts-table th a:hover {
        color: #007bff;
    }

    .parts-table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .parts-btn-group .btn {
        border-radius: 4px;
        font-size: 0.8rem;
        padding: 4px 8px;
    }
</style>

<!-- TempData message handling -->
@if(TempData["SuccessMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            if (window.showToast) {
                window.showToast('success', '@Html.Raw(Html.Encode(TempData["SuccessMessage"]))');
            }
        });
    </script>
}

@if(TempData["ErrorMessage"] != null)
{
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            if (window.showToast) {
                window.showToast('error', '@Html.Raw(Html.Encode(TempData["ErrorMessage"]))');
            }
        });
    </script>
}