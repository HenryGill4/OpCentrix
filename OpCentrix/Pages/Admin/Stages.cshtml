@page
@model OpCentrix.Pages.Admin.StagesModel
@{
    ViewData["Title"] = "Enhanced Stage Management";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Enhanced Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="text-primary mb-1">
                        <i class="fas fa-project-diagram me-2"></i>
                        Enhanced Stage Management
                    </h2>
                    <p class="text-muted mb-0">Unified management of stage templates and active job execution stages</p>
                </div>
                <div>
                    <div class="btn-group me-2">
                        <a href="?view=active" class="btn @(Model.SelectedView == "active" ? "btn-primary" : "btn-outline-primary")">
                            <i class="fas fa-play me-1"></i>Active Stages
                        </a>
                        <a href="?view=templates" class="btn @(Model.SelectedView == "templates" ? "btn-primary" : "btn-outline-primary")">
                            <i class="fas fa-template me-1"></i>Templates
                        </a>
                        <a href="?view=dependencies" class="btn @(Model.SelectedView == "dependencies" ? "btn-primary" : "btn-outline-primary")">
                            <i class="fas fa-sitemap me-1"></i>Dependencies
                        </a>
                    </div>
                    @if (Model.SelectedView == "active")
                    {
                        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createFromTemplateModal">
                            <i class="fas fa-plus me-1"></i>Add Stage to Job
                        </button>
                    }
                    else if (Model.SelectedView == "templates")
                    {
                        <a href="/Admin/ProductionStages" class="btn btn-primary">
                            <i class="fas fa-cogs me-1"></i>Manage Templates
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Dashboard Statistics -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-template fa-2x"></i>
                        </div>
                        <div>
                            <div class="fs-4 fw-bold">@Model.ProductionStageTemplates.Count</div>
                            <div class="small">Stage Templates</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-play fa-2x"></i>
                        </div>
                        <div>
                            <div class="fs-4 fw-bold">@Model.ActiveJobStages.Count</div>
                            <div class="small">Active Job Stages</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-exclamation-triangle fa-2x"></i>
                        </div>
                        <div>
                            <div class="fs-4 fw-bold">@Model.OverdueStages.Count</div>
                            <div class="small">Overdue Stages</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-link fa-2x"></i>
                        </div>
                        <div>
                            <div class="fs-4 fw-bold">@Model.StageDependencies.Count</div>
                            <div class="small">Stage Dependencies</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters for Active Stages View -->
    @if (Model.SelectedView == "active")
    {
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-filter me-2"></i>Filter Active Job Stages
                </h6>
            </div>
            <div class="card-body">
                <form method="get" class="row g-3">
                    <input type="hidden" name="view" value="active" />
                    <div class="col-md-3">
                        <label class="form-label">Department</label>
                        <select asp-for="SelectedDepartment" class="form-select">
                            <option value="">All Departments</option>
                            @foreach (var dept in Model.Departments)
                            {
                                <option value="@dept">@dept</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Status</label>
                        <select asp-for="SelectedStatus" class="form-select">
                            <option value="">All Statuses</option>
                            <option value="Scheduled">Scheduled</option>
                            <option value="Ready">Ready</option>
                            <option value="In-Progress">In-Progress</option>
                            <option value="On-Hold">On-Hold</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Start Date</label>
                        <input asp-for="StartDate" type="date" class="form-control" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">End Date</label>
                        <input asp-for="EndDate" type="date" class="form-control" />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-search me-1"></i>Filter
                        </button>
                    </div>
                </form>
            </div>
        </div>
    }

    <!-- Content based on selected view -->
    @if (Model.SelectedView == "active")
    {
        <!-- Active Job Stages View -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-play me-2 text-info"></i>
                    Active Job Stages (@Model.ActiveJobStages.Count)
                </h5>
                <div>
                    @if (Model.StatusCounts.Any())
                    {
                        @foreach (var status in Model.StatusCounts)
                        {
                            <span class="badge me-1" style="background-color: @GetStatusColor(status.Key);">
                                @status.Key: @status.Value
                            </span>
                        }
                    }
                </div>
            </div>
            <div class="card-body">
                @if (Model.ActiveJobStages.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Job Info</th>
                                    <th>Stage Details</th>
                                    <th>Schedule & Progress</th>
                                    <th>Machine & Operator</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var stage in Model.ActiveJobStages)
                                {
                                    <tr class="@(stage.IsOverdue ? "table-warning" : "")">
                                        <td>
                                            <div>
                                                <strong>Job #@stage.JobId</strong>
                                                @if (stage.Job != null)
                                                {
                                                    <div class="small text-muted">@stage.Job.PartNumber</div>
                                                    <div class="small text-info">Priority: @stage.Job.Priority</div>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                <strong>@stage.StageName</strong>
                                                <span class="badge bg-secondary ms-2">Order @stage.ExecutionOrder</span>
                                                <div class="small text-muted">@stage.Department</div>
                                                @if (!string.IsNullOrEmpty(stage.StageType))
                                                {
                                                    <div class="small">Type: @stage.StageType</div>
                                                }
                                                @if (stage.IsBlocking)
                                                {
                                                    <span class="badge bg-warning text-dark">Blocking</span>
                                                }
                                                @if (stage.AllowParallel)
                                                {
                                                    <span class="badge bg-info">Parallel OK</span>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                <div class="small">
                                                    <i class="fas fa-clock me-1"></i>
                                                    Scheduled: @stage.ScheduledStart.ToString("MM/dd HH:mm") - @stage.ScheduledEnd.ToString("MM/dd HH:mm")
                                                </div>
                                                @if (stage.ActualStart.HasValue)
                                                {
                                                    <div class="small text-success">
                                                        <i class="fas fa-play me-1"></i>
                                                        Started: @stage.ActualStart.Value.ToString("MM/dd HH:mm")
                                                    </div>
                                                }
                                                @if (stage.ActualEnd.HasValue)
                                                {
                                                    <div class="small text-primary">
                                                        <i class="fas fa-stop me-1"></i>
                                                        Completed: @stage.ActualEnd.Value.ToString("MM/dd HH:mm")
                                                    </div>
                                                }
                                                @if (stage.Status == "In-Progress")
                                                {
                                                    <div class="progress mt-2" style="height: 4px;">
                                                        <div class="progress-bar" style="width: @(stage.ProgressPercent)%"></div>
                                                    </div>
                                                    <div class="small text-muted">@(stage.ProgressPercent)% Complete</div>
                                                }
                                                <div class="small">
                                                    Est: @stage.EstimatedDurationHours.ToString("F1")h
                                                    @if (stage.ActualDurationHours.HasValue)
                                                    {
                                                        <span class="text-info">(Actual: @(stage.ActualDurationHours.Value.ToString("F1"))h)</span>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                @if (!string.IsNullOrEmpty(stage.MachineId))
                                                {
                                                    <div>
                                                        <i class="fas fa-cogs me-1"></i>
                                                        <strong>@stage.MachineId</strong>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(stage.AssignedOperator))
                                                {
                                                    <div class="small">
                                                        <i class="fas fa-user me-1"></i>
                                                        @stage.AssignedOperator
                                                    </div>
                                                }
                                                @if (stage.EstimatedCost > 0)
                                                {
                                                    <div class="small text-success">
                                                        Est: $@(stage.EstimatedCost.ToString("F2"))
                                                        @if (stage.ActualCost.HasValue)
                                                        {
                                                            <br />
                                                            <span>Actual: $@(stage.ActualCost.Value.ToString("F2"))</span>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge fs-6" style="background-color: @GetStatusColor(stage.Status);">
                                                @stage.Status
                                            </span>
                                            @if (stage.IsOverdue)
                                            {
                                                <div class="small text-danger mt-1">
                                                    <i class="fas fa-exclamation-triangle me-1"></i>Overdue
                                                </div>
                                            }
                                            @if (!stage.CanStart && stage.Status == "Scheduled")
                                            {
                                                <div class="small text-warning mt-1">
                                                    <i class="fas fa-lock me-1"></i>Blocked
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group-vertical btn-group-sm">
                                                @if (stage.Status == "Scheduled" && stage.CanStart)
                                                {
                                                    <button class="btn btn-success" onclick="startStage(@stage.Id)" title="Start Stage">
                                                        <i class="fas fa-play"></i>
                                                    </button>
                                                }
                                                @if (stage.Status == "In-Progress")
                                                {
                                                    <button class="btn btn-primary" onclick="completeStage(@stage.Id)" title="Complete Stage">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                    <button class="btn btn-warning" onclick="updateProgress(@stage.Id)" title="Update Progress">
                                                        <i class="fas fa-percent"></i>
                                                    </button>
                                                }
                                                <button class="btn btn-info" onclick="viewStageDetails(@stage.Id)" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                @if (stage.Status == "Scheduled")
                                                {
                                                    <button class="btn btn-outline-danger" onclick="deleteStage(@stage.Id)" title="Delete Stage">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Active Job Stages</h5>
                        <p class="text-muted">
                            @if (!string.IsNullOrEmpty(Model.SelectedDepartment) || !string.IsNullOrEmpty(Model.SelectedStatus))
                            {
                                <span>No stages match your current filters. Try adjusting the filters or</span>
                            }
                            else
                            {
                                <span>Get started by</span>
                            }
                            adding a stage to an active job using a template.
                        </p>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createFromTemplateModal">
                            <i class="fas fa-plus me-1"></i>Add Stage to Job
                        </button>
                    </div>
                }
            </div>
        </div>
    }
    else if (Model.SelectedView == "templates")
    {
        <!-- Stage Templates View -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-template me-2 text-primary"></i>
                    Production Stage Templates (@Model.ProductionStageTemplates.Count)
                </h5>
            </div>
            <div class="card-body">
                @if (Model.ProductionStageTemplates.Any())
                {
                    <div class="row">
                        @foreach (var template in Model.ProductionStageTemplates)
                        {
                            var usage = Model.StageTemplateUsage.GetValueOrDefault(template.Id, new StageUsageStats());
                            
                            <div class="col-md-6 col-lg-4 mb-4">
                                <div class="card h-100 border-start" style="border-left-color: @template.StageColor !important; border-left-width: 4px !important;">
                                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <i class="@template.StageIcon me-2" style="color: @template.StageColor;"></i>
                                            <strong>@template.Name</strong>
                                        </div>
                                        <span class="badge bg-secondary">@template.DisplayOrder</span>
                                    </div>
                                    <div class="card-body">
                                        @if (!string.IsNullOrEmpty(template.Description))
                                        {
                                            <p class="small text-muted">@template.Description</p>
                                        }
                                        
                                        <div class="row g-2 mb-3">
                                            <div class="col-6">
                                                <div class="text-center">
                                                    <div class="fw-bold text-info">@template.DefaultDurationHours.ToString("F1")h</div>
                                                    <div class="small text-muted">Duration</div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="text-center">
                                                    <div class="fw-bold text-success">$@template.GetTotalEstimatedCost().ToString("F0")</div>
                                                    <div class="small text-muted">Est. Cost</div>
                                                </div>
                                            </div>
                                        </div>

                                        @if (!string.IsNullOrEmpty(template.Department))
                                        {
                                            <div class="mb-2">
                                                <span class="badge bg-info">@template.Department</span>
                                                @if (!string.IsNullOrEmpty(template.RequiredRole))
                                                {
                                                    <span class="badge bg-warning text-dark">@template.RequiredRole</span>
                                                }
                                            </div>
                                        }

                                        <div class="d-flex justify-content-between align-items-center small">
                                            <div>
                                                <i class="fas fa-cube text-primary me-1"></i>
                                                @usage.PartUsageCount parts
                                            </div>
                                            <div>
                                                <i class="fas fa-play text-success me-1"></i>
                                                @usage.CompletedExecutions done
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-footer bg-transparent">
                                        <div class="d-flex justify-content-between">
                                            <button class="btn btn-sm btn-outline-primary" onclick="editTemplate(@template.Id)">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                            <button class="btn btn-sm btn-success" onclick="useTemplate(@template.Id)">
                                                <i class="fas fa-plus"></i> Use Template
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-template fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Production Stage Templates</h5>
                        <p class="text-muted">Create stage templates to standardize your manufacturing processes.</p>
                        <a href="/Admin/ProductionStages" class="btn btn-primary">
                            <i class="fas fa-plus me-1"></i>Create Stage Templates
                        </a>
                    </div>
                }
            </div>
        </div>
    }
    else if (Model.SelectedView == "dependencies")
    {
        <!-- Stage Dependencies View -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-sitemap me-2 text-success"></i>
                    Stage Dependencies (@Model.StageDependencies.Count)
                </h5>
            </div>
            <div class="card-body">
                @if (Model.StageDependencies.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Dependent Stage</th>
                                    <th>Required Stage</th>
                                    <th>Type</th>
                                    <th>Lag Time</th>
                                    <th>Mandatory</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var dep in Model.StageDependencies)
                                {
                                    <tr>
                                        <td>
                                            <strong>@dep.DependentStage.StageName</strong>
                                            <div class="small text-muted">Job #@dep.DependentStage.JobId</div>
                                        </td>
                                        <td>
                                            <strong>@dep.RequiredStage.StageName</strong>
                                            <div class="small text-muted">Job #@dep.RequiredStage.JobId</div>
                                        </td>
                                        <td>
                                            <span class="badge bg-info">@dep.DependencyType</span>
                                        </td>
                                        <td>
                                            @if (dep.LagTimeHours > 0)
                                            {
                                                <span>+@dep.LagTimeHours.ToString("F1")h</span>
                                            }
                                            else if (dep.LagTimeHours < 0)
                                            {
                                                <span class="text-warning">@dep.LagTimeHours.ToString("F1")h</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">None</span>
                                            }
                                        </td>
                                        <td>
                                            @if (dep.IsMandatory)
                                            {
                                                <span class="badge bg-danger">Required</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Optional</span>
                                            }
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-danger" onclick="removeDependency(@dep.Id)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-sitemap fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No Stage Dependencies</h5>
                        <p class="text-muted">Stage dependencies control the order and conditions for stage execution.</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Create Stage from Template Modal -->
<div class="modal fade" id="createFromTemplateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-page-handler="CreateStageFromTemplate">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-plus me-2"></i>Add Stage to Job
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- ADDED: Validation Summary -->
                    <div asp-validation-summary="All" class="alert alert-danger" role="alert" style="display: none;"></div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStageFromTemplate.JobId" class="form-label">Job *</label>
                                <select asp-for="NewStageFromTemplate.JobId" class="form-select" required>
                                    <option value="">Select a job...</option>
                                    @foreach (var job in Model.ActiveJobs)
                                    {
                                        <option value="@job.Id">Job #@job.Id - @job.PartNumber (@job.Status)</option>
                                    }
                                </select>
                                <span asp-validation-for="NewStageFromTemplate.JobId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStageFromTemplate.ProductionStageId" class="form-label">Stage Template *</label>
                                <select asp-for="NewStageFromTemplate.ProductionStageId" class="form-select" required>
                                    <option value="">Select a template...</option>
                                    @foreach (var template in Model.ProductionStageTemplates)
                                    {
                                        <option value="@template.Id">@template.Name (@template.Department)</option>
                                    }
                                </select>
                                <span asp-validation-for="NewStageFromTemplate.ProductionStageId" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStageFromTemplate.ScheduledStart" class="form-label">Scheduled Start *</label>
                                <input asp-for="NewStageFromTemplate.ScheduledStart" type="datetime-local" class="form-control" required>
                                <span asp-validation-for="NewStageFromTemplate.ScheduledStart" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStageFromTemplate.MachineId" class="form-label">Machine</label>
                                <select asp-for="NewStageFromTemplate.MachineId" class="form-select">
                                    <option value="">Auto-assign machine</option>
                                    @foreach (var machine in Model.AvailableMachines)
                                    {
                                        <option value="@machine.MachineId">@machine.MachineId - @machine.MachineName</option>
                                    }
                                </select>
                                <span asp-validation-for="NewStageFromTemplate.MachineId" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStageFromTemplate.Priority" class="form-label">Priority</label>
                                <select asp-for="NewStageFromTemplate.Priority" class="form-select">
                                    <option value="1">1 - Critical</option>
                                    <option value="2">2 - High</option>
                                    <option value="3" selected>3 - Normal</option>
                                    <option value="4">4 - Low</option>
                                    <option value="5">5 - Lowest</option>
                                </select>
                                <span asp-validation-for="NewStageFromTemplate.Priority" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStageFromTemplate.AssignedOperator" class="form-label">Assigned Operator</label>
                                <input asp-for="NewStageFromTemplate.AssignedOperator" class="form-control" placeholder="Optional operator assignment">
                                <span asp-validation-for="NewStageFromTemplate.AssignedOperator" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewStageFromTemplate.Notes" class="form-label">Notes</label>
                        <textarea asp-for="NewStageFromTemplate.Notes" class="form-control" rows="3" placeholder="Optional notes for this stage execution"></textarea>
                        <span asp-validation-for="NewStageFromTemplate.Notes" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="createStageBtn">
                        <i class="fas fa-save me-1"></i>Create Stage
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <!-- ADDED: Validation Scripts -->
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        console.log('?? [ENHANCED STAGES] Loading enhanced stage management page');
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('?? [ENHANCED STAGES] Initializing enhanced stage management');
            
            // Initialize tooltips
            if (typeof bootstrap !== 'undefined') {
                const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                tooltipTriggerList.forEach(tooltipTriggerEl => {
                    new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }
            
            // ADDED: Check for validation errors and keep modal open
            checkValidationErrors();
            
            // ADDED: Form submission handling
            setupFormValidation();
        });
        
        // ADDED: Check for validation errors and show modal if needed
        function checkValidationErrors() {
            const validationSummary = document.querySelector('[asp-validation-summary]');
            const hasErrors = validationSummary && 
                Array.from(validationSummary.querySelectorAll('li')).length > 0;
            
            if (hasErrors) {
                // Show the validation summary
                validationSummary.style.display = 'block';
                
                // Keep the modal open
                const modal = new bootstrap.Modal(document.getElementById('createFromTemplateModal'));
                modal.show();
            }
        }
        
        // ADDED: Enhanced form submission handling
        function setupFormValidation() {
            const form = document.querySelector('#createFromTemplateModal form');
            const submitBtn = document.getElementById('createStageBtn');
            
            if (form && submitBtn) {
                form.addEventListener('submit', function(e) {
                    // Show loading state
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Creating...';
                    
                    // Reset loading state if validation fails
                    setTimeout(() => {
                        if (form.querySelector('.text-danger:not(:empty)')) {
                            resetSubmitButton();
                        }
                    }, 100);
                });
            }
        }
        
        function resetSubmitButton() {
            const submitBtn = document.getElementById('createStageBtn');
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-save me-1"></i>Create Stage';
            }
        }

        // Stage management functions
        async function startStage(stageId) {
            try {
                const response = await fetch('@Url.Page("/Admin/Stages", "StartStage")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ stageId: stageId })
                });

                const result = await response.json();
                
                if (result.success) {
                    showNotification('Stage started successfully', 'success');
                    window.location.reload();
                } else {
                    showNotification(result.message || 'Failed to start stage', 'error');
                }
            } catch (error) {
                console.error('Error starting stage:', error);
                showNotification('An error occurred while starting the stage', 'error');
            }
        }

        async function completeStage(stageId) {
            const actualCost = prompt('Enter actual cost for this stage (optional):');
            const cost = actualCost && !isNaN(actualCost) ? parseFloat(actualCost) : null;
            
            try {
                const response = await fetch('@Url.Page("/Admin/Stages", "CompleteStage")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ stageId: stageId, actualCost: cost })
                });

                const result = await response.json();
                
                if (result.success) {
                    showNotification('Stage completed successfully', 'success');
                    window.location.reload();
                } else {
                    showNotification(result.message || 'Failed to complete stage', 'error');
                }
            } catch (error) {
                console.error('Error completing stage:', error);
                showNotification('An error occurred while completing the stage', 'error');
            }
        }

        function updateProgress(stageId) {
            const progressPercent = prompt('Enter progress percentage (0-100):');
            if (progressPercent === null) return;
            
            const progress = parseInt(progressPercent);
            if (isNaN(progress) || progress < 0 || progress > 100) {
                showNotification('Please enter a valid percentage between 0 and 100', 'error');
                return;
            }
            
            // Implementation for progress update would go here
            showNotification('Progress update functionality coming soon', 'info');
        }

        function viewStageDetails(stageId) {
            // Implementation for viewing stage details would go here
            showNotification('Stage details view coming soon', 'info');
        }

        function deleteStage(stageId) {
            if (confirm('Are you sure you want to delete this stage? This action cannot be undone.')) {
                // Implementation for stage deletion would go here
                showNotification('Stage deletion functionality coming soon', 'info');
            }
        }

        function editTemplate(templateId) {
            // Open edit template modal
            showNotification('Template editing opens in Production Stages page', 'info');
            window.open('/Admin/ProductionStages', '_blank');
        }

        function useTemplate(templateId) {
            // Auto-fill the create from template modal
            const modal = new bootstrap.Modal(document.getElementById('createFromTemplateModal'));
            const select = document.querySelector('select[name="NewStageFromTemplate.ProductionStageId"]');
            if (select) {
                select.value = templateId;
            }
            modal.show();
        }

        function removeDependency(dependencyId) {
            if (confirm('Are you sure you want to remove this stage dependency?')) {
                // Implementation for dependency removal would go here
                showNotification('Dependency removal functionality coming soon', 'info');
            }
        }

        function showNotification(message, type) {
            // Use the shared alert system
            window.dispatchEvent(new CustomEvent('opcentrix:alert', {
                detail: {
                    type: type,
                    message: message,
                    autoHide: true
                }
            }));
        }
    </script>
}

@functions {
    private string GetStatusColor(string status)
    {
        return status.ToLower() switch
        {
            "scheduled" => "#3B82F6",
            "ready" => "#10B981",
            "in-progress" => "#F59E0B",
            "completed" => "#059669",
            "on-hold" => "#F97316",
            "cancelled" => "#6B7280",
            "delayed" => "#EF4444",
            "blocked" => "#DC2626",
            _ => "#9CA3AF"
        };
    }
}