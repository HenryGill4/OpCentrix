@page
@model OpCentrix.Pages.Admin.CheckpointsModel
@{
    ViewData["Title"] = "Inspection Checkpoints";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<div class="space-y-6">
    <!-- Header Section -->
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">Inspection Checkpoints</h1>
            <p class="mt-1 text-sm text-gray-600">Configure quality control checkpoints for parts inspection</p>
        </div>
        <div class="flex space-x-3">
            <button type="button" 
                    data-action="show-modal" 
                    data-target="createCheckpointModal"
                    class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                ?? Add Checkpoint
            </button>
        </div>
    </div>

    <!-- Checkpoints Statistics -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="flex items-center justify-center w-10 h-10 bg-blue-100 rounded-lg">
                        <span class="text-xl">??</span>
                    </div>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-500">Total Checkpoints</p>
                    <p class="text-lg font-semibold text-gray-900">@Model.Checkpoints.Count()</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="flex items-center justify-center w-10 h-10 bg-green-100 rounded-lg">
                        <span class="text-xl">?</span>
                    </div>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-500">Active Checkpoints</p>
                    <p class="text-lg font-semibold text-gray-900">@Model.Checkpoints.Count(c => c.IsActive)</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="flex items-center justify-center w-10 h-10 bg-purple-100 rounded-lg">
                        <span class="text-xl">??</span>
                    </div>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-500">Dimensional</p>
                    <p class="text-lg font-semibold text-gray-900">@Model.Checkpoints.Count(c => c.InspectionType == "Dimensional")</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="flex items-center justify-center w-10 h-10 bg-yellow-100 rounded-lg">
                        <span class="text-xl">??</span>
                    </div>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-500">Visual</p>
                    <p class="text-lg font-semibold text-gray-900">@Model.Checkpoints.Count(c => c.InspectionType == "Visual")</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Checkpoints Table -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
            <h3 class="text-lg font-medium text-gray-900">Inspection Checkpoints (@Model.Checkpoints.Count())</h3>
        </div>
        
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Checkpoint</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Part</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var checkpoint in Model.Checkpoints)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4">
                                <div>
                                    <div class="text-sm font-medium text-gray-900">
                                        @Html.Raw(Html.Encode(checkpoint.CheckpointName))
                                        @if (checkpoint.IsRequired)
                                        {
                                            <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                ?? Required
                                            </span>
                                        }
                                    </div>
                                    @if (!string.IsNullOrEmpty(checkpoint.Description))
                                    {
                                        <div class="text-sm text-gray-500 mt-1">@Html.Raw(Html.Encode(checkpoint.Description))</div>
                                    }
                                    @if (checkpoint.InspectionType == "Dimensional")
                                    {
                                        <div class="text-xs text-gray-400 mt-1">
                                            @if (checkpoint.TargetValue.HasValue)
                                            {
                                                <span>Target: @checkpoint.TargetValue.Value</span>
                                            }
                                            @if (checkpoint.UpperTolerance.HasValue && checkpoint.LowerTolerance.HasValue)
                                            {
                                                <span class="ml-2">Tolerance: +@checkpoint.UpperTolerance.Value / -@checkpoint.LowerTolerance.Value</span>
                                            }
                                            @if (!string.IsNullOrEmpty(checkpoint.Unit))
                                            {
                                                <span class="ml-2">Units: @checkpoint.Unit</span>
                                            }
                                        </div>
                                    }
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-900">@Html.Raw(Html.Encode(checkpoint.Part?.PartNumber))</div>
                                <div class="text-sm text-gray-500">@Html.Raw(Html.Encode(checkpoint.Part?.Name))</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(checkpoint.InspectionType == "Dimensional" ? "bg-purple-100 text-purple-800" : "bg-yellow-100 text-yellow-800")">
                                    @(checkpoint.InspectionType == "Dimensional" ? "??" : "??") @checkpoint.InspectionType
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @if (checkpoint.IsActive)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        ? Active
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                        ? Inactive
                                    </span>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <div class="flex justify-end space-x-2">
                                    <button type="button" 
                                            data-action="duplicate-checkpoint"
                                            data-checkpoint-id="@checkpoint.Id"
                                            data-checkpoint-name="@checkpoint.CheckpointName"
                                            class="text-blue-600 hover:text-blue-900 text-sm">
                                        ?? Duplicate
                                    </button>
                                    <form method="post" asp-page-handler="DeleteCheckpoint" class="inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="checkpointId" value="@checkpoint.Id">
                                        <button type="submit" 
                                                data-action="confirm-delete"
                                                data-item-name="@checkpoint.CheckpointName"
                                                class="text-red-600 hover:text-red-900 text-sm">
                                            ??? Delete
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (!Model.Checkpoints.Any())
    {
        <div class="text-center py-12">
            <div class="text-gray-400 text-6xl mb-4">??</div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No checkpoints found</h3>
            <p class="text-gray-600 mb-4">Create your first inspection checkpoint to get started.</p>
            <button type="button" data-action="show-modal" data-target="createCheckpointModal"
                    class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                ?? Add First Checkpoint
            </button>
        </div>
    }
</div>

<!-- Create Checkpoint Modal -->
<div class="modal fade" id="createCheckpointModal" tabindex="-1" aria-labelledby="createCheckpointModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-page-handler="CreateCheckpoint">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="createCheckpointModalLabel">Create Inspection Checkpoint</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Validation Summary -->
                    <div asp-validation-summary="All" class="alert alert-danger d-none" role="alert"></div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3 form-field">
                                <label asp-for="Checkpoint.PartId" class="form-label">Part</label>
                                <select asp-for="Checkpoint.PartId" class="form-select" required>
                                    <option value="">Select Part</option>
                                    @foreach (var part in Model.Parts)
                                    {
                                        <option value="@part.Id">@Html.Raw(Html.Encode(part.PartNumber)) - @Html.Raw(Html.Encode(part.Name))</option>
                                    }
                                </select>
                                <span asp-validation-for="Checkpoint.PartId" class="text-danger invalid-feedback"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3 form-field">
                                <label asp-for="Checkpoint.CheckpointName" class="form-label">Checkpoint Name</label>
                                <input asp-for="Checkpoint.CheckpointName" type="text" class="form-control" required>
                                <span asp-validation-for="Checkpoint.CheckpointName" class="text-danger invalid-feedback"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3 form-field">
                        <label asp-for="Checkpoint.Description" class="form-label">Description</label>
                        <textarea asp-for="Checkpoint.Description" class="form-control" rows="2"></textarea>
                        <span asp-validation-for="Checkpoint.Description" class="text-danger invalid-feedback"></span>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3 form-field">
                                <label asp-for="Checkpoint.InspectionType" class="form-label">Inspection Type</label>
                                <select asp-for="Checkpoint.InspectionType" class="form-select" required data-toggle-dimensional="true">
                                    <option value="">Select Type</option>
                                    <option value="Visual">Visual</option>
                                    <option value="Dimensional">Dimensional</option>
                                    <option value="Functional">Functional</option>
                                    <option value="Material">Material</option>
                                </select>
                                <span asp-validation-for="Checkpoint.InspectionType" class="text-danger invalid-feedback"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3 form-field">
                                <label asp-for="Checkpoint.SortOrder" class="form-label">Sort Order</label>
                                <input asp-for="Checkpoint.SortOrder" type="number" class="form-control" value="100">
                                <span asp-validation-for="Checkpoint.SortOrder" class="text-danger invalid-feedback"></span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Dimensional fields (initially hidden) -->
                    <div id="dimensionalFields" class="dimensional-fields" style="display: none;">
                        <hr>
                        <h6 class="mb-3">Dimensional Specifications</h6>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3 form-field">
                                    <label asp-for="Checkpoint.TargetValue" class="form-label">Target Value</label>
                                    <input asp-for="Checkpoint.TargetValue" type="number" step="0.0001" class="form-control">
                                    <span asp-validation-for="Checkpoint.TargetValue" class="text-danger invalid-feedback"></span>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3 form-field">
                                    <label asp-for="Checkpoint.UpperTolerance" class="form-label">Upper Tolerance (+)</label>
                                    <input asp-for="Checkpoint.UpperTolerance" type="number" step="0.0001" class="form-control">
                                    <span asp-validation-for="Checkpoint.UpperTolerance" class="text-danger invalid-feedback"></span>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3 form-field">
                                    <label asp-for="Checkpoint.LowerTolerance" class="form-label">Lower Tolerance (-)</label>
                                    <input asp-for="Checkpoint.LowerTolerance" type="number" step="0.0001" class="form-control">
                                    <span asp-validation-for="Checkpoint.LowerTolerance" class="text-danger invalid-feedback"></span>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3 form-field">
                                    <label asp-for="Checkpoint.Unit" class="form-label">Unit</label>
                                    <select asp-for="Checkpoint.Unit" class="form-select">
                                        <option value="">Select Unit</option>
                                        <option value="inches">inches</option>
                                        <option value="mm">mm</option>
                                        <option value="cm">cm</option>
                                        <option value="degrees">degrees</option>
                                        <option value="percent">percent</option>
                                    </select>
                                    <span asp-validation-for="Checkpoint.Unit" class="text-danger invalid-feedback"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input asp-for="Checkpoint.IsRequired" class="form-check-input" type="checkbox">
                                <label asp-for="Checkpoint.IsRequired" class="form-check-label">Required Checkpoint</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input asp-for="Checkpoint.IsActive" class="form-check-input" type="checkbox" checked>
                                <label asp-for="Checkpoint.IsActive" class="form-check-label">Active</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="createSubmitBtn">
                        <span class="submit-text">Create Checkpoint</span>
                        <span class="submit-loading d-none">
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            Creating...
                        </span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Duplicate Checkpoint Modal -->
<div class="modal fade" id="duplicateModal" tabindex="-1" aria-labelledby="duplicateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="Duplicate">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="duplicateModalLabel">Duplicate Checkpoint</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Validation Summary -->
                    <div asp-validation-summary="All" class="alert alert-danger d-none" role="alert"></div>
                    
                    <p>Select the target part to duplicate "<span id="sourceCheckpointName"></span>" to:</p>
                    <input type="hidden" id="sourceCheckpointId" name="sourceId" />
                    <div class="mb-3 form-field">
                        <label class="form-label">Target Part</label>
                        <select name="targetPartId" class="form-select" required>
                            <option value="">Select Target Part</option>
                            @foreach (var part in Model.Parts)
                            {
                                <option value="@part.Id">@Html.Raw(Html.Encode(part.PartNumber)) - @Html.Raw(Html.Encode(part.Name))</option>
                            }
                        </select>
                        <div class="invalid-feedback"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="duplicateSubmitBtn">
                        <span class="submit-text">Duplicate Checkpoint</span>
                        <span class="submit-loading d-none">
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            Duplicating...
                        </span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@* Include the shared alert notifications *@
<partial name="_AlertNotifications" />

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        // Checkpoints Page JavaScript - Using OpCentrix Admin Module
        // Define functions at global scope
function setupDimensionalToggle() {
    const inspectionTypeSelect = document.querySelector('[data-toggle-dimensional]');
    if (inspectionTypeSelect) {
        inspectionTypeSelect.addEventListener('change', toggleDimensionalFields);
        toggleDimensionalFields(); // Initial check
    }
}

function toggleDimensionalFields() {
    const inspectionTypeSelect = document.querySelector('[data-toggle-dimensional]');
    const dimensionalFields = document.getElementById('dimensionalFields');
    
    if (inspectionTypeSelect && dimensionalFields) {
        const isDimensional = inspectionTypeSelect.value === 'Dimensional';
        dimensionalFields.style.display = isDimensional ? 'block' : 'none';
        
        // Update required status for dimensional fields
        const dimensionalInputs = dimensionalFields.querySelectorAll('input, select');
        dimensionalInputs.forEach(input => {
            if (isDimensional) {
                // Make certain fields required for dimensional inspections
                if (input.name.includes('TargetValue') || input.name.includes('Unit')) {
                    input.setAttribute('required', 'required');
                }
            } else {
                input.removeAttribute('required');
            }
        });
    }
}

function setupDuplicateCheckpoint() {
    const duplicateModal = document.getElementById('duplicateModal');
    if (duplicateModal) {
        duplicateModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            const sourceId = button.getAttribute('data-checkpoint-id');
            const sourceName = button.getAttribute('data-checkpoint-name');
            
            document.getElementById('sourceCheckpointId').value = sourceId;
            document.getElementById('sourceCheckpointName').textContent = sourceName;
        });
    }
}

function setupCustomActions() {
    document.addEventListener('click', function(e) {
        const target = e.target;
        
        // Handle duplicate checkpoint action
        if (target.getAttribute('data-action') === 'duplicate-checkpoint') {
            e.preventDefault();
            showDuplicateModal(target);
        }
    });
}

function showDuplicateModal(button) {
    const checkpointId = button.getAttribute('data-checkpoint-id');
    const checkpointName = button.getAttribute('data-checkpoint-name');
    
    // Populate modal data
    document.getElementById('sourceCheckpointId').value = checkpointId;
    document.getElementById('sourceCheckpointName').textContent = checkpointName;
    
    // Show Bootstrap modal
    const duplicateModal = new bootstrap.Modal(document.getElementById('duplicateModal'));
    duplicateModal.show();
}

function checkValidationErrors() {
    const validationErrors = document.querySelectorAll('.text-danger');
    const hasErrors = Array.from(validationErrors).some(error => error.textContent.trim());
    
    if (hasErrors) {
        // Determine which modal has errors and show it
        const createModal = document.querySelector('#createCheckpointModal .text-danger');
        const duplicateModal = document.querySelector('#duplicateModal .text-danger');
        
        if (createModal && createModal.textContent.trim()) {
            const modal = new bootstrap.Modal(document.getElementById('createCheckpointModal'));
            modal.show();
        } else if (duplicateModal && duplicateModal.textContent.trim()) {
            const modal = new bootstrap.Modal(document.getElementById('duplicateModal'));
            modal.show();
        }
        
        // Show validation summary
        const validationSummary = document.querySelector('[asp-validation-summary] .alert');
        if (validationSummary && hasErrors) {
            validationSummary.classList.remove('d-none');
        }
    }
}

// Now initialize everything when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    setupDimensionalToggle();
    setupDuplicateCheckpoint();
    setupCustomActions();
    checkValidationErrors();
    
    // Reset loading states when modals are closed
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('hidden.bs.modal', function() {
            const submitBtns = this.querySelectorAll('[id$="SubmitBtn"]');
            submitBtns.forEach(btn => {
                if (window.OpCentrixAdmin && window.OpCentrixAdmin.Loading) {
                    OpCentrixAdmin.Loading.hide(btn);
                }
            });
        });
    });
    
    console.log('✅ [CHECKPOINTS] Page initialized successfully');
});

// Global functions for backward compatibility
window.CheckpointsPage = {
    toggleDimensionalFields,
    showDuplicateModal,
    setupDimensionalToggle,
    setupDuplicateCheckpoint
};
    </script>
}

<style>
    /* Bootstrap modal integration with admin styles */
    .modal-content {
        border-radius: 0.5rem;
        border: none;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }
    
    .modal-header {
        border-bottom: 1px solid #e5e7eb;
        padding: 1.5rem;
    }
    
    .modal-body {
        padding: 1.5rem;
    }
    
    .modal-footer {
        border-top: 1px solid #e5e7eb;
        padding: 1.5rem;
    }
    
    /* Form validation styles */
    .form-field .form-control:focus,
    .form-field .form-select:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 0.125rem rgba(59, 130, 246, 0.25);
    }
    
    .form-field .form-control.is-invalid:focus {
        border-color: #ef4444;
        box-shadow: 0 0 0 0.125rem rgba(239, 68, 68, 0.25);
    }
    
    /* Loading state styles */
    .submit-loading {
        display: none;
    }
    
    button.loading .submit-text {
        display: none;
    }
    
    button.loading .submit-loading {
        display: inline-flex !important;
    }
    
    /* Dimensional fields styling */
    .dimensional-fields {
        background-color: #f8fafc;
        padding: 1rem;
        border-radius: 0.375rem;
        border: 1px solid #e2e8f0;
    }
</style>