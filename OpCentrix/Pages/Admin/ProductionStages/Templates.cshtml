@page "/admin/productionstages/templates"
@model OpCentrix.Pages.Admin.ProductionStages.TemplatesModel
@{
    ViewData["Title"] = "Production Stage Templates";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<!-- Page Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="fas fa-template me-2 text-primary"></i>
            Production Stage Templates
        </h1>
        <p class="text-muted mb-0">Pre-configured custom field templates for manufacturing stages</p>
    </div>
    <div>
        <a href="/Admin/ProductionStages" class="btn btn-outline-secondary">
            <i class="far fa-arrow-left me-1"></i>Back to Stages
        </a>
    </div>
</div>

<!-- Alert Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Templates Overview -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card bg-light">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-info-circle text-info me-2"></i>
                    Stage Template System
                </h5>
                <p class="card-text mb-2">
                    This page displays pre-configured custom field templates for common manufacturing stages. 
                    These templates provide standardized field configurations that can be applied when creating new production stages.
                </p>
                <div class="row text-center">
                    <div class="col-md-3">
                        <div class="fw-bold text-primary fs-4">@Model.StageTemplates.Count</div>
                        <div class="text-muted small">Available Templates</div>
                    </div>
                    <div class="col-md-3">
                        <div class="fw-bold text-success fs-4">@Model.StageTemplates.Sum(t => t.CustomFields.Count)</div>
                        <div class="text-muted small">Total Custom Fields</div>
                    </div>
                    <div class="col-md-3">
                        <div class="fw-bold text-info fs-4">@Model.StageTemplates.Count(t => t.RequiresMachineAssignment)</div>
                        <div class="text-muted small">Machine-Dependent</div>
                    </div>
                    <div class="col-md-3">
                        <div class="fw-bold text-warning fs-4">@Model.StageTemplates.Count(t => t.RequiresQualityCheck)</div>
                        <div class="text-muted small">Quality Required</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Stage Templates Grid -->
<div class="row">
    @foreach (var template in Model.StageTemplates)
    {
        <div class="col-lg-6 col-xl-4 mb-4">
            <div class="card h-100 shadow-sm">
                <!-- Card Header -->
                <div class="card-header" style="background-color: @template.StageColor; color: white;">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0 fw-bold">
                            <i class="@template.StageIcon me-2"></i>
                            @template.Name
                        </h6>
                        <span class="badge bg-light text-dark">
                            @template.CustomFields.Count fields
                        </span>
                    </div>
                </div>

                <!-- Card Body -->
                <div class="card-body">
                    <p class="text-muted small mb-3">@template.Description</p>
                    
                    <!-- Template Details -->
                    <div class="row g-2 mb-3">
                        <div class="col-6">
                            <div class="text-muted small">Setup Time</div>
                            <div class="fw-semibold">@template.DefaultSetupMinutes min</div>
                        </div>
                        <div class="col-6">
                            <div class="text-muted small">Hourly Rate</div>
                            <div class="fw-semibold">$@template.DefaultHourlyRate.ToString("F2")</div>
                        </div>
                        <div class="col-6">
                            <div class="text-muted small">Duration</div>
                            <div class="fw-semibold">@template.DefaultDurationHours.ToString("F1")h</div>
                        </div>
                        <div class="col-6">
                            <div class="text-muted small">Department</div>
                            <div class="fw-semibold small">@(template.Department ?? "General")</div>
                        </div>
                    </div>

                    <!-- Features -->
                    <div class="mb-3">
                        <div class="d-flex flex-wrap gap-1">
                            @if (template.RequiresQualityCheck)
                            {
                                <span class="badge bg-success">Quality Check</span>
                            }
                            @if (template.RequiresApproval)
                            {
                                <span class="badge bg-warning">Approval Required</span>
                            }
                            @if (template.RequiresMachineAssignment)
                            {
                                <span class="badge bg-info">Machine Assignment</span>
                            }
                            @if (template.AllowParallelExecution)
                            {
                                <span class="badge bg-secondary">Parallel Execution</span>
                            }
                            @if (template.IsOptional)
                            {
                                <span class="badge bg-light text-dark">Optional</span>
                            }
                        </div>
                    </div>

                    <!-- Custom Fields Preview -->
                    <div class="mb-3">
                        <h6 class="text-primary mb-2">
                            <i class="fas fa-wrench me-1"></i>
                            Custom Fields (@template.CustomFields.Count)
                        </h6>
                        @if (template.CustomFields.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var field in template.CustomFields.Take(3).OrderBy(f => f.DisplayOrder))
                                {
                                    <div class="list-group-item px-0 py-1 border-0">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <span class="fw-semibold small">@field.Label</span>
                                                @if (field.Required)
                                                {
                                                    <span class="text-danger">*</span>
                                                }
                                            </div>
                                            <span class="badge bg-light text-dark small">@field.Type</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(field.Description))
                                        {
                                            <div class="text-muted small">@field.Description</div>
                                        }
                                    </div>
                                }
                                @if (template.CustomFields.Count > 3)
                                {
                                    <div class="text-muted small text-center py-1">
                                        ... and @(template.CustomFields.Count - 3) more fields
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-muted small">No custom fields defined</div>
                        }
                    </div>
                </div>

                <!-- Card Footer -->
                <div class="card-footer bg-light">
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-outline-primary btn-sm flex-fill" 
                                onclick="viewTemplateDetails('@template.Name')">
                            <i class="fas fa-eye me-1"></i>View Details
                        </button>
                        <button type="button" class="btn btn-primary btn-sm flex-fill" 
                                onclick="createStageFromTemplate('@template.Name')">
                            <i class="fas fa-plus me-1"></i>Create Stage
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!Model.StageTemplates.Any())
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-info text-center">
                <i class="fas fa-info-circle fa-2x mb-3"></i>
                <h5>No Stage Templates Available</h5>
                <p class="mb-0">No production stage templates are currently available. Please check the StageTemplateService configuration.</p>
            </div>
        </div>
    </div>
}

<!-- Template Details Modal -->
<div class="modal fade" id="templateDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-template me-2"></i>
                    <span id="modalTemplateTitle">Template Details</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="templateDetailsContent">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="mt-2">Loading template details...</div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="createStageFromModalBtn">
                    <i class="fas fa-plus me-1"></i>Create Stage from Template
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let currentTemplateName = '';

    // View template details in modal
    async function viewTemplateDetails(stageName) {
        currentTemplateName = stageName;
        
        // Update modal title
        document.getElementById('modalTemplateTitle').textContent = `${stageName} Template`;
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('templateDetailsModal'));
        modal.show();
        
        try {
            // Load template details via AJAX
            const response = await fetch(`/admin/productionstages/templates?handler=TemplateCustomFields&stageName=${encodeURIComponent(stageName)}`);
            const data = await response.json();
            
            if (data.success) {
                renderTemplateDetails(data);
            } else {
                showError('Error loading template details: ' + (data.error || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error loading template details:', error);
            showError('Error loading template details');
        }
    }

    // Render template details in modal
    function renderTemplateDetails(data) {
        const content = document.getElementById('templateDetailsContent');
        
        if (!data.customFields || data.customFields.length === 0) {
            content.innerHTML = `
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    No custom fields defined for this template.
                </div>
            `;
            return;
        }

        let html = `
            <div class="mb-3">
                <h6 class="text-primary border-bottom pb-2">
                    <i class="fas fa-wrench me-2"></i>
                    Custom Fields (${data.customFields.length})
                </h6>
            </div>
        `;

        data.customFields.forEach((field, index) => {
            html += `
                <div class="card mb-3">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                ${field.label}
                                ${field.required ? '<span class="text-danger">*</span>' : ''}
                            </h6>
                            <span class="badge bg-primary">${field.type}</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <strong>Field Name:</strong> <code>${field.name}</code>
                            </div>
                            <div class="col-md-6">
                                <strong>Display Order:</strong> ${field.displayOrder}
                            </div>
                            ${field.description ? `
                            <div class="col-12">
                                <strong>Description:</strong> ${field.description}
                            </div>
                            ` : ''}
                            ${field.defaultValue ? `
                            <div class="col-md-6">
                                <strong>Default Value:</strong> ${field.defaultValue}
                            </div>
                            ` : ''}
                            ${field.unit ? `
                            <div class="col-md-6">
                                <strong>Unit:</strong> ${field.unit}
                            </div>
                            ` : ''}
                            ${field.minValue !== null ? `
                            <div class="col-md-6">
                                <strong>Min Value:</strong> ${field.minValue}
                            </div>
                            ` : ''}
                            ${field.maxValue !== null ? `
                            <div class="col-md-6">
                                <strong>Max Value:</strong> ${field.maxValue}
                            </div>
                            ` : ''}
                            ${field.options && field.options.length > 0 ? `
                            <div class="col-12">
                                <strong>Options:</strong>
                                <div class="mt-1">
                                    ${field.options.map(opt => `<span class="badge bg-light text-dark me-1">${opt}</span>`).join('')}
                                </div>
                            </div>
                            ` : ''}
                            ${field.placeholderText ? `
                            <div class="col-12">
                                <strong>Placeholder:</strong> <em>${field.placeholderText}</em>
                            </div>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;
        });

        content.innerHTML = html;
    }

    // Create stage from template
    async function createStageFromTemplate(stageName) {
        if (confirm(`Create a new production stage using the "${stageName}" template?`)) {
            try {
                const response = await fetch('/admin/productionstages/templates?handler=CreateStageFromTemplate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: `stageName=${encodeURIComponent(stageName)}`
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess(data.message);
                    console.log('Created stage:', data.stage);
                } else {
                    showError(data.error || 'Error creating stage from template');
                }
            } catch (error) {
                console.error('Error creating stage from template:', error);
                showError('Error creating stage from template');
            }
        }
    }

    // Create stage from template modal button
    document.getElementById('createStageFromModalBtn').addEventListener('click', function() {
        if (currentTemplateName) {
            createStageFromTemplate(currentTemplateName);
        }
    });

    // Utility functions
    function showSuccess(message) {
        console.log('Success:', message);
        // You can implement toast notifications here
        alert('Success: ' + message);
    }

    function showError(message) {
        console.error('Error:', message);
        // You can implement toast notifications here
        alert('Error: ' + message);
    }

    function getAntiForgeryToken() {
        return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
    }
</script>
}

<style>
    .card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .list-group-item {
        border-left: 3px solid transparent;
    }
    
    .list-group-item:hover {
        border-left-color: var(--bs-primary);
        background-color: rgba(var(--bs-primary-rgb), 0.05);
    }
</style>