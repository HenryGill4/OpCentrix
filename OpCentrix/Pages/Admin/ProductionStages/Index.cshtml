@page
@model OpCentrix.Pages.Admin.ProductionStages.IndexModel
@{
    ViewData["Title"] = "Production Stage Configuration";
    ViewData["PageHeader"] = "?? Production Stage Configuration";
    ViewData["PageDescription"] = "Configure and manage manufacturing stages for prototype tracking";
}

<div class="container-fluid">
    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["WarningMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="text-primary mb-1">
                        <i class="fas fa-cogs me-2"></i>
                        Production Stage Configuration
                    </h2>
                    <p class="text-muted mb-0">Configure manufacturing stages for prototype tracking workflow</p>
                </div>
                <div>
                    <button class="btn btn-outline-secondary me-2" data-bs-toggle="modal" data-bs-target="#reorderModal">
                        <i class="fas fa-sort me-1"></i>
                        Reorder Stages
                    </button>
                    <button class="btn btn-secondary me-2" onclick="createDefaultStages()">
                        <i class="fas fa-download me-1"></i>
                        Import Defaults
                    </button>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addStageModal">
                        <i class="fas fa-plus me-1"></i>
                        Add New Stage
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Production Stages Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list me-2 text-primary"></i>
                        Production Stages
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.ProductionStages.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th width="80">Order</th>
                                        <th>Stage Name</th>
                                        <th>Description</th>
                                        <th width="120">Default Hours</th>
                                        <th width="120">Hourly Rate</th>
                                        <th width="100">Quality Check</th>
                                        <th width="100">Required Role</th>
                                        <th width="120">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var stage in Model.ProductionStages.OrderBy(s => s.DisplayOrder))
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge bg-secondary fs-6">@stage.DisplayOrder</span>
                                            </td>
                                            <td>
                                                <strong>@stage.Name</strong>
                                                @if (stage.IsOptional)
                                                {
                                                    <span class="badge bg-info ms-1">Optional</span>
                                                }
                                                @if (stage.AllowSkip)
                                                {
                                                    <span class="badge bg-warning ms-1">Skippable</span>
                                                }
                                            </td>
                                            <td class="text-muted">
                                                @if (!string.IsNullOrEmpty(stage.Description))
                                                {
                                                    @stage.Description
                                                }
                                                else
                                                {
                                                    <em>No description</em>
                                                }
                                            </td>
                                            <td>
                                                <span class="text-info">
                                                    @((stage.DefaultSetupMinutes / 60.0 + 1.0).ToString("F1"))h
                                                </span>
                                                <div class="small text-muted">
                                                    Setup: @stage.DefaultSetupMinutes min
                                                </div>
                                            </td>
                                            <td>
                                                <span class="text-success fw-bold">
                                                    $@stage.DefaultHourlyRate.ToString("F2")
                                                </span>
                                            </td>
                                            <td class="text-center">
                                                @if (stage.RequiresQualityCheck)
                                                {
                                                    <i class="fas fa-check-circle text-success" title="Quality check required"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times-circle text-muted" title="No quality check"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(stage.RequiredRole))
                                                {
                                                    <span class="badge bg-primary">@stage.RequiredRole</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Any</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-primary" 
                                                            onclick="editStage(@stage.Id)" 
                                                            title="Edit Stage">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" 
                                                            onclick="deleteStage(@stage.Id, '@stage.Name')" 
                                                            title="Delete Stage">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5 text-muted">
                            <i class="fas fa-cogs fa-3x mb-3"></i>
                            <h5>No Production Stages Configured</h5>
                            <p>Configure production stages to enable prototype tracking workflow.</p>
                            <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#addStageModal">
                                <i class="fas fa-plus me-1"></i>
                                Add First Stage
                            </button>
                            <button class="btn btn-secondary" onclick="createDefaultStages()">
                                <i class="fas fa-download me-1"></i>
                                Import Default Stages
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add New Stage Modal -->
<div class="modal fade" id="addStageModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-page-handler="CreateStage" id="addStageForm">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-plus me-2"></i>
                        Add New Production Stage
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label asp-for="NewStage.Name" class="form-label">Stage Name *</label>
                                <input asp-for="NewStage.Name" class="form-control" placeholder="e.g., CNC Machining" required>
                                <span asp-validation-for="NewStage.Name" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label asp-for="NewStage.RequiredRole" class="form-label">Required Role</label>
                                <select asp-for="NewStage.RequiredRole" class="form-select">
                                    <option value="">Any Role</option>
                                    <option value="Operator">Operator</option>
                                    <option value="Machinist">Machinist</option>
                                    <option value="EDM Specialist">EDM Specialist</option>
                                    <option value="Finisher">Finisher</option>
                                    <option value="Coater">Coater</option>
                                    <option value="Assembler">Assembler</option>
                                </select>
                                <span asp-validation-for="NewStage.RequiredRole" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewStage.Description" class="form-label">Description</label>
                        <textarea asp-for="NewStage.Description" class="form-control" rows="2" placeholder="Brief description of this manufacturing stage"></textarea>
                        <span asp-validation-for="NewStage.Description" class="text-danger"></span>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStage.DefaultSetupMinutes" class="form-label">Setup Time (minutes)</label>
                                <input asp-for="NewStage.DefaultSetupMinutes" type="number" class="form-control" min="0" max="480" value="30">
                                <span asp-validation-for="NewStage.DefaultSetupMinutes" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStage.DefaultHourlyRate" class="form-label">Hourly Rate ($)</label>
                                <input asp-for="NewStage.DefaultHourlyRate" type="number" step="0.01" class="form-control" min="0" max="500" value="85.00">
                                <span asp-validation-for="NewStage.DefaultHourlyRate" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input asp-for="NewStage.RequiresQualityCheck" class="form-check-input" type="checkbox" checked>
                                <label asp-for="NewStage.RequiresQualityCheck" class="form-check-label">
                                    Requires Quality Check
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input asp-for="NewStage.RequiresApproval" class="form-check-input" type="checkbox">
                                <label asp-for="NewStage.RequiresApproval" class="form-check-label">
                                    Requires Approval
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input asp-for="NewStage.AllowSkip" class="form-check-input" type="checkbox">
                                <label asp-for="NewStage.AllowSkip" class="form-check-label">
                                    Allow Skip
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input asp-for="NewStage.IsOptional" class="form-check-input" type="checkbox">
                                <label asp-for="NewStage.IsOptional" class="form-check-label">
                                    Optional Stage
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="createStageBtn">
                        <i class="fas fa-save me-1"></i>
                        <span class="btn-text">Create Stage</span>
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Stage Modal -->
<div class="modal fade" id="editStageModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit me-2"></i>
                    Edit Production Stage
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="editStageForm">
                    <!-- Dynamic content loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Reorder Stages Modal -->
<div class="modal fade" id="reorderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="ReorderStages" id="reorderForm">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-sort me-2"></i>
                        Reorder Production Stages
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted">Drag and drop stages to reorder them:</p>
                    <div class="alert alert-info small">
                        <i class="fas fa-info-circle me-1"></i>
                        Drag the grip icon (??) to reorder stages. Changes will be saved when you click "Save Order".
                    </div>
                    <div id="sortableStages" class="list-group">
                        @foreach (var stage in Model.ProductionStages.OrderBy(s => s.DisplayOrder))
                        {
                            <div class="list-group-item d-flex align-items-center" data-id="@stage.Id">
                                <i class="fas fa-grip-vertical text-muted me-3"></i>
                                <div class="flex-grow-1">
                                    <strong>@stage.Name</strong>
                                    @if (!string.IsNullOrEmpty(stage.Description))
                                    {
                                        <div class="small text-muted">@stage.Description</div>
                                    }
                                </div>
                                <div class="text-muted small">
                                    Order: @stage.DisplayOrder
                                </div>
                            </div>
                        }
                    </div>
                    <input type="hidden" name="ReorderStageIds" id="reorderStageIds" asp-for="ReorderStageIds" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveOrderBtn">
                        <i class="fas fa-save me-1"></i>
                        Save Order
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include basic validation without custom handlers -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    
    <!-- Include SortableJS library -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    
    <script>
        // Initialize form handling when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing Production Stages page...');
            
            // Initialize basic form validation without complex handlers
            initializeBasicValidation();
            
            // Initialize sortable functionality
            initializeSortableStages();
            
            // Setup form handling
            setupFormHandling();
        });

        // Basic validation setup
        function initializeBasicValidation() {
            // Simple jQuery validation setup
            $('form').each(function() {
                const $form = $(this);
                if (!$form.data('validator')) {
                    $form.validate({
                        errorClass: 'is-invalid',
                        validClass: 'is-valid',
                        errorElement: 'div',
                        errorPlacement: function(error, element) {
                            error.addClass('invalid-feedback');
                            element.closest('.mb-3').append(error);
                        }
                    });
                }
            });
        }

        // Setup form handling without interference
        function setupFormHandling() {
            const addStageForm = document.getElementById('addStageForm');
            const createStageBtn = document.getElementById('createStageBtn');
            const btnText = createStageBtn ? createStageBtn.querySelector('.btn-text') : null;
            const btnSpinner = createStageBtn ? createStageBtn.querySelector('.spinner-border') : null;

            if (addStageForm) {
                console.log('Setting up add stage form handling...');
                
                addStageForm.addEventListener('submit', function(e) {
                    console.log('Form submission started');
                    
                    // Show loading state
                    if (createStageBtn) {
                        createStageBtn.disabled = true;
                        if (btnText) btnText.textContent = 'Creating...';
                        if (btnSpinner) btnSpinner.classList.remove('d-none');
                    }
                    
                    // Let the form submit naturally - don't prevent default
                    console.log('Form submitting naturally...');
                });
            }

            // Reset form when modal is closed
            const addStageModal = document.getElementById('addStageModal');
            if (addStageModal) {
                addStageModal.addEventListener('hidden.bs.modal', function() {
                    console.log('Modal closed, resetting form');
                    
                    if (addStageForm) {
                        addStageForm.reset();
                        
                        // Reset checkboxes to default values
                        const qualityCheckbox = document.querySelector('input[name="NewStage.RequiresQualityCheck"]');
                        const approvalCheckbox = document.querySelector('input[name="NewStage.RequiresApproval"]');
                        const skipCheckbox = document.querySelector('input[name="NewStage.AllowSkip"]');
                        const optionalCheckbox = document.querySelector('input[name="NewStage.IsOptional"]');
                        const setupMinutes = document.querySelector('input[name="NewStage.DefaultSetupMinutes"]');
                        const hourlyRate = document.querySelector('input[name="NewStage.DefaultHourlyRate"]');
                        
                        if (qualityCheckbox) qualityCheckbox.checked = true;
                        if (approvalCheckbox) approvalCheckbox.checked = false;
                        if (skipCheckbox) skipCheckbox.checked = false;
                        if (optionalCheckbox) optionalCheckbox.checked = false;
                        if (setupMinutes) setupMinutes.value = 30;
                        if (hourlyRate) hourlyRate.value = 85.00;
                    }
                    
                    // Reset button state
                    if (createStageBtn) {
                        createStageBtn.disabled = false;
                        if (btnText) btnText.textContent = 'Create Stage';
                        if (btnSpinner) btnSpinner.classList.add('d-none');
                    }
                });
            }
        }

        // Initialize sortable for reordering
        function initializeSortableStages() {
            const sortableList = document.getElementById('sortableStages');
            const saveOrderBtn = document.getElementById('saveOrderBtn');
            let hasChanges = false;
            
            if (sortableList && typeof Sortable !== 'undefined') {
                console.log('Initializing SortableJS');
                
                // Initialize the sortable list
                const sortable = Sortable.create(sortableList, {
                    animation: 150,
                    ghostClass: 'sortable-ghost',
                    chosenClass: 'sortable-chosen',
                    dragClass: 'sortable-drag',
                    handle: '.fas.fa-grip-vertical', // Only allow dragging by the grip icon
                    onStart: function(evt) {
                        console.log('Drag started');
                        evt.item.classList.add('dragging');
                    },
                    onEnd: function(evt) {
                        console.log('Drag ended');
                        evt.item.classList.remove('dragging');
                        
                        // Update the hidden input with new order
                        const stageIds = Array.from(sortableList.children).map(item => {
                            return item.getAttribute('data-id');
                        });
                        
                        console.log('New order:', stageIds);
                        document.getElementById('reorderStageIds').value = stageIds.join(',');
                        
                        // Update order display in modal
                        sortableList.childNodes.forEach((item, index) => {
                            if (item.nodeType === 1) { // Element node
                                const orderDisplay = item.querySelector('.text-muted.small');
                                if (orderDisplay) {
                                    orderDisplay.textContent = `Order: ${index + 1}`;
                                }
                            }
                        });
                        
                        // Enable save button and mark as changed
                        hasChanges = true;
                        if (saveOrderBtn) {
                            saveOrderBtn.classList.remove('btn-primary');
                            saveOrderBtn.classList.add('btn-warning');
                            saveOrderBtn.innerHTML = '<i class="fas fa-save me-1"></i>Save Changes';
                        }
                    }
                });
                
                console.log('SortableJS initialized successfully');
            } else {
                console.error('SortableJS not available or sortableStages element not found');
            }
            
            // Reset modal when it's opened
            const reorderModal = document.getElementById('reorderModal');
            if (reorderModal) {
                reorderModal.addEventListener('show.bs.modal', function() {
                    // Reset changes flag
                    hasChanges = false;
                    if (saveOrderBtn) {
                        saveOrderBtn.classList.remove('btn-warning');
                        saveOrderBtn.classList.add('btn-primary');
                        saveOrderBtn.innerHTML = '<i class="fas fa-save me-1"></i>Save Order';
                    }
                    console.log('Reorder modal opened');
                });
            }
        }

        // Edit stage functionality
        async function editStage(stageId) {
            try {
                const response = await fetch(`?handler=StageDetails&stageId=${stageId}`);
                if (!response.ok) throw new Error('Failed to load stage details');
                
                const stage = await response.json();
                
                // Create edit form HTML
                const formHtml = `
                    <form method="post" action="?handler=UpdateStage">
                        <input name="__RequestVerificationToken" type="hidden" value="${$('input[name="__RequestVerificationToken"]').val()}" />
                        <input type="hidden" name="Id" value="${stage.id}" />
                        
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">Stage Name *</label>
                                    <input type="text" name="Name" class="form-control" value="${stage.name}" required>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Required Role</label>
                                    <select name="RequiredRole" class="form-select">
                                        <option value="">Any Role</option>
                                        <option value="Operator" ${stage.requiredRole === 'Operator' ? 'selected' : ''}>Operator</option>
                                        <option value="Machinist" ${stage.requiredRole === 'Machinist' ? 'selected' : ''}>Machinist</option>
                                        <option value="EDM Specialist" ${stage.requiredRole === 'EDM Specialist' ? 'selected' : ''}>EDM Specialist</option>
                                        <option value="Finisher" ${stage.requiredRole === 'Finisher' ? 'selected' : ''}>Finisher</option>
                                        <option value="Coater" ${stage.requiredRole === 'Coater' ? 'selected' : ''}>Coater</option>
                                        <option value="Assembler" ${stage.requiredRole === 'Assembler' ? 'selected' : ''}>Assembler</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea name="Description" class="form-control" rows="2">${stage.description || ''}</textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Setup Time (minutes)</label>
                                    <input type="number" name="DefaultSetupMinutes" class="form-control" min="0" max="480" value="${stage.defaultSetupMinutes}">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Hourly Rate ($)</label>
                                    <input type="number" name="DefaultHourlyRate" step="0.01" class="form-control" min="0" max="500" value="${stage.defaultHourlyRate}">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <input name="RequiresQualityCheck" class="form-check-input" type="checkbox" ${stage.requiresQualityCheck ? 'checked' : ''}>
                                    <label class="form-check-label">Requires Quality Check</label>
                                </div>
                                <div class="form-check mb-3">
                                    <input name="RequiresApproval" class="form-check-input" type="checkbox" ${stage.requiresApproval ? 'checked' : ''}>
                                    <label class="form-check-label">Requires Approval</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check mb-3">
                                    <input name="AllowSkip" class="form-check-input" type="checkbox" ${stage.allowSkip ? 'checked' : ''}>
                                    <label class="form-check-label">Allow Skip</label>
                                </div>
                                <div class="form-check mb-3">
                                    <input name="IsOptional" class="form-check-input" type="checkbox" ${stage.isOptional ? 'checked' : ''}>
                                    <label class="form-check-label">Optional Stage</label>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i>
                                Save Changes
                            </button>
                        </div>
                    </form>
                `;
                
                document.getElementById('editStageForm').innerHTML = formHtml;
                new bootstrap.Modal(document.getElementById('editStageModal')).show();
                
            } catch (error) {
                console.error('Error loading stage details:', error);
                alert('Error loading stage details. Please try again.');
            }
        }

        // Delete stage
        function deleteStage(stageId, stageName) {
            if (confirm(`Are you sure you want to delete the "${stageName}" stage? This action cannot be undone.`)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '?handler=DeleteStage';
                
                const stageInput = document.createElement('input');
                stageInput.type = 'hidden';
                stageInput.name = 'stageId';
                stageInput.value = stageId;
                
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = $('input[name="__RequestVerificationToken"]').val();
                
                form.appendChild(stageInput);
                form.appendChild(tokenInput);
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Create default stages
        function createDefaultStages() {
            if (confirm('This will create default B&T manufacturing stages. Continue?')) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '?handler=CreateDefaultStages';
                
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = $('input[name="__RequestVerificationToken"]').val();
                
                form.appendChild(tokenInput);
                document.body.appendChild(form);
                form.submit();
            }
        }
    </script>
}

@section Styles {
    <style>
        .sortable-ghost {
            opacity: 0.4;
            background: #f8f9fa;
        }
        
        .sortable-chosen {
            background: #e3f2fd;
        }
        
        .sortable-drag {
            background: #fff;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        #sortableStages .list-group-item {
            cursor: move;
            user-select: none;
            transition: all 0.2s ease;
        }
        
        #sortableStages .list-group-item:hover {
            background-color: #f8f9fa;
        }
        
        #sortableStages .list-group-item.dragging {
            opacity: 0.8;
            transform: rotate(2deg);
        }
        
        .fas.fa-grip-vertical {
            cursor: grab;
        }
        
        .fas.fa-grip-vertical:active {
            cursor: grabbing;
        }
    </style>
}