@page
@model OpCentrix.Pages.Admin.ProductionStages.IndexModel
@{
    ViewData["Title"] = "Production Stage Configuration";
    ViewData["PageHeader"] = "?? Production Stage Configuration";
    ViewData["PageDescription"] = "Configure and manage manufacturing stages for prototype tracking";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="text-primary mb-1">
                        <i class="fas fa-cogs me-2"></i>
                        Production Stage Configuration
                    </h2>
                    <p class="text-muted mb-0">Configure manufacturing stages for prototype tracking workflow</p>
                </div>
                <div>
                    <button class="btn btn-outline-secondary me-2" data-bs-toggle="modal" data-bs-target="#reorderModal">
                        <i class="fas fa-sort me-1"></i>
                        Reorder Stages
                    </button>
                    <button class="btn btn-secondary me-2" onclick="createDefaultStages()">
                        <i class="fas fa-download me-1"></i>
                        Import Defaults
                    </button>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addStageModal">
                        <i class="fas fa-plus me-1"></i>
                        Add New Stage
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Production Stages Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list me-2 text-primary"></i>
                        Production Stages
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.ProductionStages.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th width="80">Order</th>
                                        <th>Stage Name</th>
                                        <th>Description</th>
                                        <th width="120">Default Hours</th>
                                        <th width="120">Hourly Rate</th>
                                        <th width="100">Quality Check</th>
                                        <th width="100">Required Role</th>
                                        <th width="120">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var stage in Model.ProductionStages.OrderBy(s => s.DisplayOrder))
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge bg-secondary fs-6">@stage.DisplayOrder</span>
                                            </td>
                                            <td>
                                                <strong>@stage.Name</strong>
                                                @if (stage.IsOptional)
                                                {
                                                    <span class="badge bg-info ms-1">Optional</span>
                                                }
                                                @if (stage.AllowSkip)
                                                {
                                                    <span class="badge bg-warning ms-1">Skippable</span>
                                                }
                                            </td>
                                            <td class="text-muted">
                                                @if (!string.IsNullOrEmpty(stage.Description))
                                                {
                                                    @stage.Description
                                                }
                                                else
                                                {
                                                    <em>No description</em>
                                                }
                                            </td>
                                            <td>
                                                <span class="text-info">
                                                    @((stage.DefaultSetupMinutes / 60.0 + 1.0).ToString("F1"))h
                                                </span>
                                                <div class="small text-muted">
                                                    Setup: @stage.DefaultSetupMinutes min
                                                </div>
                                            </td>
                                            <td>
                                                <span class="text-success fw-bold">
                                                    $@stage.DefaultHourlyRate.ToString("F2")
                                                </span>
                                            </td>
                                            <td class="text-center">
                                                @if (stage.RequiresQualityCheck)
                                                {
                                                    <i class="fas fa-check-circle text-success" title="Quality check required"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times-circle text-muted" title="No quality check"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(stage.RequiredRole))
                                                {
                                                    <span class="badge bg-primary">@stage.RequiredRole</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Any</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-primary" 
                                                            onclick="editStage(@stage.Id)" 
                                                            title="Edit Stage">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" 
                                                            onclick="deleteStage(@stage.Id, '@stage.Name')" 
                                                            title="Delete Stage">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5 text-muted">
                            <i class="fas fa-cogs fa-3x mb-3"></i>
                            <h5>No Production Stages Configured</h5>
                            <p>Configure production stages to enable prototype tracking workflow.</p>
                            <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#addStageModal">
                                <i class="fas fa-plus me-1"></i>
                                Add First Stage
                            </button>
                            <button class="btn btn-secondary" onclick="createDefaultStages()">
                                <i class="fas fa-download me-1"></i>
                                Import Default Stages
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add New Stage Modal -->
<div class="modal fade" id="addStageModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-page-handler="CreateStage">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-plus me-2"></i>
                        Add New Production Stage
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label asp-for="NewStage.Name" class="form-label">Stage Name *</label>
                                <input asp-for="NewStage.Name" class="form-control" placeholder="e.g., CNC Machining" required>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label asp-for="NewStage.RequiredRole" class="form-label">Required Role</label>
                                <select asp-for="NewStage.RequiredRole" class="form-select">
                                    <option value="">Any Role</option>
                                    <option value="Operator">Operator</option>
                                    <option value="Machinist">Machinist</option>
                                    <option value="EDM Specialist">EDM Specialist</option>
                                    <option value="Finisher">Finisher</option>
                                    <option value="Coater">Coater</option>
                                    <option value="Assembler">Assembler</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NewStage.Description" class="form-label">Description</label>
                        <textarea asp-for="NewStage.Description" class="form-control" rows="2" placeholder="Brief description of this manufacturing stage"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStage.DefaultSetupMinutes" class="form-label">Setup Time (minutes)</label>
                                <input asp-for="NewStage.DefaultSetupMinutes" type="number" class="form-control" min="0" max="480" value="30">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="NewStage.DefaultHourlyRate" class="form-label">Hourly Rate ($)</label>
                                <input asp-for="NewStage.DefaultHourlyRate" type="number" step="0.01" class="form-control" min="0" max="500" value="85.00">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input asp-for="NewStage.RequiresQualityCheck" class="form-check-input" type="checkbox" checked>
                                <label asp-for="NewStage.RequiresQualityCheck" class="form-check-label">
                                    Requires Quality Check
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input asp-for="NewStage.RequiresApproval" class="form-check-input" type="checkbox">
                                <label asp-for="NewStage.RequiresApproval" class="form-check-label">
                                    Requires Approval
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input asp-for="NewStage.AllowSkip" class="form-check-input" type="checkbox">
                                <label asp-for="NewStage.AllowSkip" class="form-check-label">
                                    Allow Skip
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input asp-for="NewStage.IsOptional" class="form-check-input" type="checkbox">
                                <label asp-for="NewStage.IsOptional" class="form-check-label">
                                    Optional Stage
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i>
                        Create Stage
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Stage Modal -->
<div class="modal fade" id="editStageModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit me-2"></i>
                    Edit Production Stage
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="editStageForm">
                    <!-- Dynamic content loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Reorder Stages Modal -->
<div class="modal fade" id="reorderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="ReorderStages">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-sort me-2"></i>
                        Reorder Production Stages
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted">Drag and drop stages to reorder them:</p>
                    <div id="sortableStages" class="list-group">
                        @foreach (var stage in Model.ProductionStages.OrderBy(s => s.DisplayOrder))
                        {
                            <div class="list-group-item d-flex align-items-center" data-id="@stage.Id">
                                <i class="fas fa-grip-vertical text-muted me-3"></i>
                                <div class="flex-grow-1">
                                    <strong>@stage.Name</strong>
                                    @if (!string.IsNullOrEmpty(stage.Description))
                                    {
                                        <div class="small text-muted">@stage.Description</div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <input type="hidden" name="ReorderStageIds" id="reorderStageIds" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i>
                        Save Order
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Edit stage functionality
        async function editStage(stageId) {
            try {
                const response = await fetch(`?handler=StageDetails&stageId=${stageId}`);
                if (!response.ok) throw new Error('Failed to load stage details');
                
                const stage = await response.json();
                
                // Create edit form HTML
                const formHtml = `
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">Stage Name *</label>
                                <input type="text" class="form-control" id="editName" value="${stage.name}" required>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Required Role</label>
                                <select class="form-select" id="editRequiredRole">
                                    <option value="">Any Role</option>
                                    <option value="Operator" ${stage.requiredRole === 'Operator' ? 'selected' : ''}>Operator</option>
                                    <option value="Machinist" ${stage.requiredRole === 'Machinist' ? 'selected' : ''}>Machinist</option>
                                    <option value="EDM Specialist" ${stage.requiredRole === 'EDM Specialist' ? 'selected' : ''}>EDM Specialist</option>
                                    <option value="Finisher" ${stage.requiredRole === 'Finisher' ? 'selected' : ''}>Finisher</option>
                                    <option value="Coater" ${stage.requiredRole === 'Coater' ? 'selected' : ''}>Coater</option>
                                    <option value="Assembler" ${stage.requiredRole === 'Assembler' ? 'selected' : ''}>Assembler</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="editDescription" rows="2">${stage.description || ''}</textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Setup Time (minutes)</label>
                                <input type="number" class="form-control" id="editSetupMinutes" min="0" max="480" value="${stage.defaultSetupMinutes}">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Hourly Rate ($)</label>
                                <input type="number" step="0.01" class="form-control" id="editHourlyRate" min="0" max="500" value="${stage.defaultHourlyRate}">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="editRequiresQualityCheck" ${stage.requiresQualityCheck ? 'checked' : ''}>
                                <label class="form-check-label">Requires Quality Check</label>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="editRequiresApproval" ${stage.requiresApproval ? 'checked' : ''}>
                                <label class="form-check-label">Requires Approval</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="editAllowSkip" ${stage.allowSkip ? 'checked' : ''}>
                                <label class="form-check-label">Allow Skip</label>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="editIsOptional" ${stage.isOptional ? 'checked' : ''}>
                                <label class="form-check-label">Optional Stage</label>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="saveStage(${stage.id})">
                            <i class="fas fa-save me-1"></i>
                            Save Changes
                        </button>
                    </div>
                `;
                
                document.getElementById('editStageForm').innerHTML = formHtml;
                new bootstrap.Modal(document.getElementById('editStageModal')).show();
                
            } catch (error) {
                console.error('Error loading stage details:', error);
                alert('Error loading stage details. Please try again.');
            }
        }

        // Save stage changes
        async function saveStage(stageId) {
            try {
                const updatedStage = {
                    id: stageId,
                    name: document.getElementById('editName').value,
                    description: document.getElementById('editDescription').value,
                    defaultSetupMinutes: parseInt(document.getElementById('editSetupMinutes').value),
                    defaultHourlyRate: parseFloat(document.getElementById('editHourlyRate').value),
                    requiresQualityCheck: document.getElementById('editRequiresQualityCheck').checked,
                    requiresApproval: document.getElementById('editRequiresApproval').checked,
                    allowSkip: document.getElementById('editAllowSkip').checked,
                    isOptional: document.getElementById('editIsOptional').checked,
                    requiredRole: document.getElementById('editRequiredRole').value
                };

                const response = await fetch('?handler=UpdateStage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify(updatedStage)
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error updating stage. Please try again.');
                }
            } catch (error) {
                console.error('Error saving stage:', error);
                alert('Error saving stage. Please try again.');
            }
        }

        // Delete stage
        function deleteStage(stageId, stageName) {
            if (confirm(`Are you sure you want to delete the "${stageName}" stage? This action cannot be undone.`)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '?handler=DeleteStage';
                
                const stageInput = document.createElement('input');
                stageInput.type = 'hidden';
                stageInput.name = 'stageId';
                stageInput.value = stageId;
                
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = $('input[name="__RequestVerificationToken"]').val();
                
                form.appendChild(stageInput);
                form.appendChild(tokenInput);
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Create default stages
        function createDefaultStages() {
            if (confirm('This will create default B&T manufacturing stages. Continue?')) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '?handler=CreateDefaultStages';
                
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = $('input[name="__RequestVerificationToken"]').val();
                
                form.appendChild(tokenInput);
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Initialize sortable for reordering
        document.addEventListener('DOMContentLoaded', function() {
            if (typeof Sortable !== 'undefined') {
                const sortableList = document.getElementById('sortableStages');
                if (sortableList) {
                    Sortable.create(sortableList, {
                        animation: 150,
                        ghostClass: 'sortable-ghost',
                        onEnd: function(evt) {
                            const stageIds = Array.from(sortableList.children).map(item => item.dataset.id);
                            document.getElementById('reorderStageIds').value = stageIds.join(',');
                        }
                    });
                }
            }
        });
    </script>
}

@section Styles {
    <style>
        .sortable-ghost {
            opacity: 0.4;
        }
        
        #sortableStages .list-group-item {
            cursor: move;
        }
        
        #sortableStages .list-group-item:hover {
            background-color: #f8f9fa;
        }
    </style>
}