@page
@using OpCentrix.Models
@model OpCentrix.Pages.Admin.UsersModel
@{
    ViewData["Title"] = "User Management";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<div class="space-y-6">
    <!-- Header Section -->
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">User Management</h1>
            <p class="mt-1 text-sm text-gray-600">Manage user accounts, roles, and permissions</p>
        </div>
        <div class="flex space-x-3">
            <button onclick="showCreateUserModal()" class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-blue-700 active:bg-blue-900 focus:outline-none focus:border-blue-900 focus:ring ring-blue-300 transition ease-in-out duration-150">
                ? Add New User
            </button>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div class="bg-white rounded-lg shadow p-6 border-l-4 border-blue-500">
            <div class="flex items-center">
                <div class="flex-1">
                    <h3 class="text-sm font-medium text-gray-500">Total Users</h3>
                    <p class="text-2xl font-bold text-gray-900">@Model.TotalUsers</p>
                </div>
                <div class="text-blue-500 text-3xl">??</div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6 border-l-4 border-green-500">
            <div class="flex items-center">
                <div class="flex-1">
                    <h3 class="text-sm font-medium text-gray-500">Active Users</h3>
                    <p class="text-2xl font-bold text-gray-900">@Model.ActiveUsers</p>
                </div>
                <div class="text-green-500 text-3xl">?</div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6 border-l-4 border-red-500">
            <div class="flex items-center">
                <div class="flex-1">
                    <h3 class="text-sm font-medium text-gray-500">Inactive Users</h3>
                    <p class="text-2xl font-bold text-gray-900">@Model.InactiveUsers</p>
                </div>
                <div class="text-red-500 text-3xl">?</div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6 border-l-4 border-purple-500">
            <div class="flex items-center">
                <div class="flex-1">
                    <h3 class="text-sm font-medium text-gray-500">Roles</h3>
                    <p class="text-2xl font-bold text-gray-900">@Model.RoleStatistics.Count</p>
                </div>
                <div class="text-purple-500 text-3xl">??</div>
            </div>
        </div>
    </div>

    <!-- Role Statistics -->
    @if (Model.RoleStatistics.Any())
    {
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Users by Role</h3>
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
                @foreach (var roleStats in Model.RoleStatistics.OrderByDescending(r => r.Value))
                {
                    <div class="text-center p-3 bg-gray-50 rounded-lg">
                        <div class="text-2xl font-bold text-blue-600">@roleStats.Value</div>
                        <div class="text-sm text-gray-600">@UserRoles.GetDisplayName(roleStats.Key)</div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Search and Filter Section -->
    <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Search & Filter</h3>
        <form method="get" class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700">Search</label>
                <input type="text" name="searchTerm" value="@Model.SearchTerm" placeholder="Username, name, email..." 
                       class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700">Role</label>
                <select name="roleFilter" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    <option value="">All Roles</option>
                    @foreach (var role in UserRoles.AllRoles)
                    {
                        <option value="@role" selected="@(Model.RoleFilter == role)">@UserRoles.GetDisplayName(role)</option>
                    }
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700">Status</label>
                <select name="statusFilter" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    <option value="">All Statuses</option>
                    <option value="Active" selected="@(Model.StatusFilter == "Active")">Active</option>
                    <option value="Inactive" selected="@(Model.StatusFilter == "Inactive")">Inactive</option>
                </select>
            </div>
            
            <div class="flex items-end">
                <button type="submit" class="w-full px-4 py-2 bg-gray-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 focus:outline-none focus:border-gray-700 focus:ring ring-gray-300 transition ease-in-out duration-150">
                    ?? Search
                </button>
            </div>
        </form>
    </div>

    <!-- Users Table -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
            <h3 class="text-lg font-medium text-gray-900">Users (@Model.Users.Count)</h3>
        </div>
        
        @if (Model.Users.Any())
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <a href="?searchTerm=@Model.SearchTerm&roleFilter=@Model.RoleFilter&statusFilter=@Model.StatusFilter&sortBy=Username&sortDirection=@Model.GetNextSortDirection("Username")" 
                                   class="flex items-center hover:text-gray-700">
                                    Username @Model.GetSortIcon("Username")
                                </a>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <a href="?searchTerm=@Model.SearchTerm&roleFilter=@Model.RoleFilter&statusFilter=@Model.StatusFilter&sortBy=FullName&sortDirection=@Model.GetNextSortDirection("FullName")" 
                                   class="flex items-center hover:text-gray-700">
                                    Full Name @Model.GetSortIcon("FullName")
                                </a>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <a href="?searchTerm=@Model.SearchTerm&roleFilter=@Model.RoleFilter&statusFilter=@Model.StatusFilter&sortBy=Email&sortDirection=@Model.GetNextSortDirection("Email")" 
                                   class="flex items-center hover:text-gray-700">
                                    Email @Model.GetSortIcon("Email")
                                </a>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <a href="?searchTerm=@Model.SearchTerm&roleFilter=@Model.RoleFilter&statusFilter=@Model.StatusFilter&sortBy=Role&sortDirection=@Model.GetNextSortDirection("Role")" 
                                   class="flex items-center hover:text-gray-700">
                                    Role @Model.GetSortIcon("Role")
                                </a>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <a href="?searchTerm=@Model.SearchTerm&roleFilter=@Model.RoleFilter&statusFilter=@Model.StatusFilter&sortBy=Department&sortDirection=@Model.GetNextSortDirection("Department")" 
                                   class="flex items-center hover:text-gray-700">
                                    Department @Model.GetSortIcon("Department")
                                </a>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <a href="?searchTerm=@Model.SearchTerm&roleFilter=@Model.RoleFilter&statusFilter=@Model.StatusFilter&sortBy=IsActive&sortDirection=@Model.GetNextSortDirection("IsActive")" 
                                   class="flex items-center hover:text-gray-700">
                                    Status @Model.GetSortIcon("IsActive")
                                </a>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <a href="?searchTerm=@Model.SearchTerm&roleFilter=@Model.RoleFilter&statusFilter=@Model.StatusFilter&sortBy=LastLoginDate&sortDirection=@Model.GetNextSortDirection("LastLoginDate")" 
                                   class="flex items-center hover:text-gray-700">
                                    Last Login @Model.GetSortIcon("LastLoginDate")
                                </a>
                            </th>
                            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var user in Model.Users)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="text-sm font-medium text-gray-900">@user.Username</div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@user.FullName</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@user.Email</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(user.Role switch 
                                    { 
                                        "Admin" => "bg-red-100 text-red-800", 
                                        "Manager" => "bg-purple-100 text-purple-800", 
                                        "Scheduler" => "bg-blue-100 text-blue-800", 
                                        "Operator" => "bg-green-100 text-green-800", 
                                        _ => "bg-gray-100 text-gray-800" 
                                    })">
                                        @UserRoles.GetDisplayName(user.Role)
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@(string.IsNullOrEmpty(user.Department) ? "-" : user.Department)</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (user.IsActive)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            ? Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                            ? Inactive
                                        </span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    @(user.LastLoginDate == default ? "Never" : user.LastLoginDate.ToString("MM/dd/yyyy"))
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center justify-end space-x-2">
                                        <button onclick="editUser(@user.Id, '@user.Username', '@user.FullName', '@user.Email', '@user.Role', '@user.Department', @(user.IsActive ? "true" : "false"))" 
                                                class="text-blue-600 hover:text-blue-900" title="Edit User">
                                            ??
                                        </button>
                                        
                                        <button onclick="showPasswordResetModal(@user.Id, '@user.Username')" 
                                                class="text-yellow-600 hover:text-yellow-900" title="Reset Password">
                                            ??
                                        </button>
                                        
                                        <form method="post" asp-page-handler="ToggleUserStatus" class="inline">
                                            <input type="hidden" name="userId" value="@user.Id" />
                                            <button type="submit" 
                                                    class="@(user.IsActive ? "text-orange-600 hover:text-orange-900" : "text-green-600 hover:text-green-900")" 
                                                    title="@(user.IsActive ? "Disable User" : "Enable User")"
                                                    onclick="return confirm('@(user.IsActive ? "Disable" : "Enable") user @user.Username?')">
                                                @(user.IsActive ? "??" : "?")
                                            </button>
                                        </form>
                                        
                                        @if (user.Role != UserRoles.Admin)
                                        {
                                            <form method="post" asp-page-handler="DeleteUser" class="inline">
                                                <input type="hidden" name="userId" value="@user.Id" />
                                                <button type="submit" 
                                                        class="text-red-600 hover:text-red-900" 
                                                        title="Delete User"
                                                        onclick="return confirm('Are you sure you want to delete user @user.Username? This action cannot be undone.')">
                                                    ???
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <div class="text-gray-400 text-6xl mb-4">??</div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No users found</h3>
                <p class="text-gray-600 mb-4">Try adjusting your search criteria or create a new user.</p>
                <button onclick="showCreateUserModal()" class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-blue-700">
                    ? Add First User
                </button>
            </div>
        }
    </div>
</div>

<!-- Create/Edit User Modal -->
<div id="userModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 id="userModalTitle" class="text-lg font-medium text-gray-900 mb-4">Add New User</h3>
            
            <form method="post" id="userForm">
                <input type="hidden" id="editingUserId" name="EditingUserId" value="" />
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Username*</label>
                        <input type="text" name="UserInput.Username" id="username" required minlength="3" maxlength="50" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Full Name*</label>
                        <input type="text" name="UserInput.FullName" id="fullName" required minlength="2" maxlength="100" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Email*</label>
                        <input type="email" name="UserInput.Email" id="email" required maxlength="100" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div id="passwordField">
                        <label class="block text-sm font-medium text-gray-700">Password*</label>
                        <input type="password" name="UserInput.Password" id="password" required minlength="6" maxlength="50" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Role*</label>
                        <select name="UserInput.Role" id="role" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            @foreach (var role in UserRoles.AllRoles)
                            {
                                <option value="@role">@UserRoles.GetDisplayName(role)</option>
                            }
                        </select>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Department</label>
                        <input type="text" name="UserInput.Department" id="department" maxlength="100" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div class="flex items-center">
                        <input type="checkbox" name="UserInput.IsActive" id="isActive" value="true" checked 
                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                        <label for="isActive" class="ml-2 block text-sm text-gray-900">Active</label>
                        <input type="hidden" name="UserInput.IsActive" value="false" />
                    </div>
                </div>
                
                <div class="flex items-center justify-end space-x-2 mt-6">
                    <button type="button" onclick="hideUserModal()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Cancel
                    </button>
                    <button type="submit" id="userSubmitBtn" 
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Create User
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Password Reset Modal -->
<div id="passwordModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 id="passwordModalTitle" class="text-lg font-medium text-gray-900 mb-4">Reset Password</h3>
            
            <form method="post" asp-page-handler="ResetPassword">
                <input type="hidden" id="resetUserId" name="PasswordReset.UserId" value="" />
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">New Password*</label>
                        <input type="password" name="PasswordReset.NewPassword" id="newPassword" required minlength="6" maxlength="50" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Confirm Password*</label>
                        <input type="password" name="PasswordReset.ConfirmPassword" id="confirmPassword" required minlength="6" maxlength="50" 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                </div>
                
                <div class="flex items-center justify-end space-x-2 mt-6">
                    <button type="button" onclick="hidePasswordModal()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        Reset Password
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
@if (TempData["Success"] != null)
{
    <div class="fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50" role="alert">
        <strong class="font-bold">Success!</strong>
        <span class="block sm:inline">@TempData["Success"]</span>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50" role="alert">
        <strong class="font-bold">Error!</strong>
        <span class="block sm:inline">@TempData["Error"]</span>
    </div>
}

@section Scripts {
    <script>
        let isEditMode = false;

        function showCreateUserModal() {
            isEditMode = false;
            document.getElementById('userModalTitle').textContent = 'Add New User';
            document.getElementById('userSubmitBtn').textContent = 'Create User';
            document.getElementById('userForm').action = '?handler=CreateUser';
            document.getElementById('editingUserId').value = '';
            document.getElementById('passwordField').style.display = 'block';
            document.getElementById('password').required = true;
            
            // Clear form
            document.getElementById('username').value = '';
            document.getElementById('fullName').value = '';
            document.getElementById('email').value = '';
            document.getElementById('password').value = '';
            document.getElementById('role').value = 'Operator';
            document.getElementById('department').value = '';
            document.getElementById('isActive').checked = true;
            
            document.getElementById('userModal').classList.remove('hidden');
        }

        function editUser(id, username, fullName, email, role, department, isActive) {
            isEditMode = true;
            document.getElementById('userModalTitle').textContent = 'Edit User';
            document.getElementById('userSubmitBtn').textContent = 'Update User';
            document.getElementById('userForm').action = '?handler=EditUser';
            document.getElementById('editingUserId').value = id;
            document.getElementById('passwordField').style.display = 'none';
            document.getElementById('password').required = false;
            
            // Populate form
            document.getElementById('username').value = username;
            document.getElementById('fullName').value = fullName;
            document.getElementById('email').value = email;
            document.getElementById('role').value = role;
            document.getElementById('department').value = department;
            document.getElementById('isActive').checked = isActive;
            
            document.getElementById('userModal').classList.remove('hidden');
        }

        function hideUserModal() {
            document.getElementById('userModal').classList.add('hidden');
        }

        function showPasswordResetModal(userId, username) {
            document.getElementById('passwordModalTitle').textContent = `Reset Password for ${username}`;
            document.getElementById('resetUserId').value = userId;
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmPassword').value = '';
            document.getElementById('passwordModal').classList.remove('hidden');
        }

        function hidePasswordModal() {
            document.getElementById('passwordModal').classList.add('hidden');
        }

        // Form validation
        document.getElementById('userForm').addEventListener('submit', function(e) {
            const password = document.getElementById('password');
            if (!isEditMode && password.value.length < 6) {
                e.preventDefault();
                alert('Password must be at least 6 characters long.');
                return false;
            }
        });

        // Password confirmation validation
        document.getElementById('confirmPassword').addEventListener('input', function() {
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = this.value;
            
            if (newPassword !== confirmPassword) {
                this.setCustomValidity('Passwords do not match');
            } else {
                this.setCustomValidity('');
            }
        });

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            const userModal = document.getElementById('userModal');
            const passwordModal = document.getElementById('passwordModal');
            
            if (event.target === userModal) {
                hideUserModal();
            }
            if (event.target === passwordModal) {
                hidePasswordModal();
            }
        });

        // Auto-hide alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('[role="alert"]');
            alerts.forEach(alert => {
                alert.style.opacity = '0';
                alert.style.transform = 'translateX(100%)';
                setTimeout(() => alert.remove(), 300);
            });
        }, 5000);

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Escape to close modals
            if (e.key === 'Escape') {
                hideUserModal();
                hidePasswordModal();
            }
            
            // Ctrl+N to create new user
            if (e.ctrlKey && e.key === 'n') {
                e.preventDefault();
                showCreateUserModal();
            }
        });
    </script>
}