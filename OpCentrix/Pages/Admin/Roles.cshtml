@page
@model OpCentrix.Pages.Admin.RolesModel
@{
    ViewData["Title"] = "Role Management";
    Layout = "~/Pages/Admin/Shared/_AdminLayout.cshtml";
}

<div class="space-y-6">
    <!-- Header Section -->
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">Role Management</h1>
            <p class="mt-1 text-sm text-gray-600">Configure role permissions and access controls</p>
        </div>
        <div class="flex space-x-3">
            <button type="button" 
                    data-action="show-modal" 
                    data-target="copyPermissionsModal"
                    class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                📋 Copy Permissions
            </button>
        </div>
    </div>

    <!-- Role Statistics -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="flex items-center justify-center w-10 h-10 bg-blue-100 rounded-lg">
                        <span class="text-xl">👥</span>
                    </div>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-500">Total Roles</p>
                    <p class="text-lg font-semibold text-gray-900">@Model.AvailableRoles.Count</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="flex items-center justify-center w-10 h-10 bg-purple-100 rounded-lg">
                        <span class="text-xl">🔧</span>
                    </div>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-500">Features</p>
                    <p class="text-lg font-semibold text-gray-900">@Model.AvailableFeatures.Count</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="flex items-center justify-center w-10 h-10 bg-green-100 rounded-lg">
                        <span class="text-xl">✅</span>
                    </div>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-500">Total Permissions</p>
                    <p class="text-lg font-semibold text-gray-900">@(Model.AvailableRoles.Count * Model.AvailableFeatures.Count)</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <div class="flex items-center justify-center w-10 h-10 bg-yellow-100 rounded-lg">
                        <span class="text-xl">🔐</span>
                    </div>
                </div>
                <div class="ml-3">
                    <p class="text-sm font-medium text-gray-500">Active Permissions</p>
                    <p class="text-lg font-semibold text-gray-900">@Model.PermissionMatrix.Values.SelectMany(d => d.Values).Count(p => p.HasPermission)</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Permission Matrix -->
    <form method="post" asp-page-handler="UpdatePermissions" id="permissionsForm">
        @Html.AntiForgeryToken()
        <div class="bg-white rounded-lg shadow overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
                <h3 class="text-lg font-medium text-gray-900">Role Permission Matrix</h3>
                <p class="mt-1 text-sm text-gray-600">Configure which features each role can access</p>
            </div>
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Feature</th>
                            @foreach (var role in Model.AvailableRoles.OrderBy(r => r))
                            {
                                <th scope="col" class="px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    <div class="flex flex-col items-center">
                                        <span>@role</span>
                                        <button type="button" 
                                                class="mt-1 text-xs text-blue-600 hover:text-blue-800"
                                                data-action="reset-role-permissions"
                                                data-role="@role"
                                                title="Reset @role to defaults">
                                            🔄 Reset
                                        </button>
                                    </div>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @{
                            int updateIndex = 0;
                        }
                        @foreach (var feature in Model.AvailableFeatures.OrderBy(f => f))
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    @Model.GetFeatureDisplayName(feature)
                                </td>
                                @foreach (var role in Model.AvailableRoles.OrderBy(r => r))
                                {
                                    var permission = Model.PermissionMatrix.ContainsKey(role) && Model.PermissionMatrix[role].ContainsKey(feature) 
                                        ? Model.PermissionMatrix[role][feature] 
                                        : null;
                                    var isEnabled = permission?.HasPermission ?? false;
                                    var accessLevel = permission?.PermissionLevel ?? "Read";
                                    var permissionKey = $"{role}_{feature}";
                                    
                                    <td class="px-3 py-4 whitespace-nowrap text-center">
                                        <div class="flex flex-col items-center space-y-1">
                                            <!-- Enable/Disable Checkbox -->
                                            <label class="flex items-center">
                                                <input type="checkbox" 
                                                       name="PermissionUpdates[@updateIndex].IsGranted" 
                                                       value="true"
                                                       @(isEnabled ? "checked" : "")
                                                       class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded permission-toggle"
                                                       data-role="@role"
                                                       data-feature="@feature">
                                                <input type="hidden" name="PermissionUpdates[@updateIndex].IsGranted" value="false">
                                            </label>
                                            
                                            <!-- Access Level Dropdown (without tag helpers) -->
                                            <select name="PermissionUpdates[@updateIndex].AccessLevel" 
                                                    class="text-xs border-gray-300 rounded access-level-select @(isEnabled ? "" : "opacity-50")"
                                                    data-permission-key="@permissionKey">
                                                @if (accessLevel == "Read")
                                                {
                                                    <option value="Read" selected>Read</option>
                                                    <option value="Write">Write</option>
                                                    <option value="Admin">Admin</option>
                                                }
                                                else if (accessLevel == "Write")
                                                {
                                                    <option value="Read">Read</option>
                                                    <option value="Write" selected>Write</option>
                                                    <option value="Admin">Admin</option>
                                                }
                                                else
                                                {
                                                    <option value="Read">Read</option>
                                                    <option value="Write">Write</option>
                                                    <option value="Admin" selected>Admin</option>
                                                }
                                            </select>
                                            
                                            <!-- Hidden fields for role and feature -->
                                            <input type="hidden" name="PermissionUpdates[@updateIndex].Role" value="@role">
                                            <input type="hidden" name="PermissionUpdates[@updateIndex].Feature" value="@feature">
                                        </div>
                                    </td>
                                    updateIndex++;
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Save Button -->
        <div class="flex items-center justify-between pt-6">
            <div class="text-sm text-gray-600">
                @Model.AvailableRoles.Count role(s) × @Model.AvailableFeatures.Count feature(s) = @(Model.AvailableRoles.Count * Model.AvailableFeatures.Count) permissions
            </div>
            <div class="flex space-x-3">
                <button type="button" onclick="resetForm()" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    🔄 Reset Changes
                </button>
                <button type="submit" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    💾 Save Permission Changes
                </button>
            </div>
        </div>
    </form>

    @if (!Model.AvailableRoles.Any() || !Model.AvailableFeatures.Any())
    {
        <div class="text-center py-12">
            <div class="text-gray-400 text-6xl mb-4">🔐</div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No roles or features found</h3>
            <p class="text-gray-600 mb-4">The system needs to be initialized with default roles and features.</p>
            <a href="/Admin" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                🏠 Back to Admin Dashboard
            </a>
        </div>
    }
</div>

<!-- Copy Permissions Modal -->
<div id="copyPermissionsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50" aria-hidden="true" role="dialog" aria-labelledby="copyPermissionsTitle">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 id="copyPermissionsTitle" class="text-lg font-medium text-gray-900">Copy Permissions</h3>
            <button type="button" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600" data-action="hide-modal" data-target="copyPermissionsModal" aria-label="Close">
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        
        <form method="post" asp-page-handler="CopyPermissions" class="p-6">
            @Html.AntiForgeryToken()
            
            <div class="space-y-4">
                <div class="form-field">
                    <label for="sourceRole" class="block text-sm font-medium text-gray-700">Source Role</label>
                    <select id="sourceRole" name="sourceRole" required 
                            class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                        <option value="">Select source role</option>
                        @foreach (var role in Model.AvailableRoles.OrderBy(r => r))
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>
                
                <div class="form-field">
                    <label for="targetRole" class="block text-sm font-medium text-gray-700">Target Role</label>
                    <select id="targetRole" name="targetRole" required 
                            class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                        <option value="">Select target role</option>
                        @foreach (var role in Model.AvailableRoles.OrderBy(r => r))
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>
                
                <div class="bg-yellow-50 border border-yellow-200 rounded-md p-3">
                    <div class="flex">
                        <svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                        </svg>
                        <div class="ml-3">
                            <p class="text-sm text-yellow-800">
                                This will overwrite all existing permissions for the target role.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="mt-6 flex items-center justify-end space-x-3">
                <button type="button" data-action="hide-modal" data-target="copyPermissionsModal"
                        class="px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    ❌ Cancel
                </button>
                <button type="submit"
                        class="px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    📋 Copy Permissions
                </button>
            </div>
        </form>
    </div>
</div>

@* Include the shared alert notifications *@
<partial name="_AlertNotifications" />

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        // Roles Page JavaScript - Using OpCentrix Admin Module
        document.addEventListener('DOMContentLoaded', function() {
            
            // Setup permission toggles
            setupPermissionToggles();
            
            // Setup custom data action handlers
            setupCustomActions();
            
            console.log('✅ [ROLES] Page initialized successfully');
        });

        /**
         * Setup permission toggle functionality
         */
        function setupPermissionToggles() {
            // Handle permission checkbox changes
            document.querySelectorAll('.permission-toggle').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const isEnabled = this.checked;
                    const role = this.getAttribute('data-role');
                    const feature = this.getAttribute('data-feature');
                    const permissionKey = `${role}_${feature}`;
                    
                    // Find corresponding access level dropdown
                    const accessLevelSelect = document.querySelector(`[data-permission-key="${permissionKey}"]`);
                    if (accessLevelSelect) {
                        accessLevelSelect.disabled = !isEnabled;
                        if (isEnabled) {
                            accessLevelSelect.classList.remove('opacity-50');
                        } else {
                            accessLevelSelect.classList.add('opacity-50');
                        }
                    }
                });
            });
        }

        /**
         * Setup custom data action handlers
         */
        function setupCustomActions() {
            document.addEventListener('click', function(e) {
                const target = e.target;
                
                // Handle reset role permissions action
                if (target.getAttribute('data-action') === 'reset-role-permissions') {
                    e.preventDefault();
                    const role = target.getAttribute('data-role');
                    resetRolePermissions(role);
                }
            });
        }

        /**
         * Reset permissions for a specific role
         */
        function resetRolePermissions(role) {
            if (!role) return;
            
            if (confirm(`Are you sure you want to reset all permissions for the "${role}" role to default values? This cannot be undone.`)) {
                // Create and submit a form for role reset
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '?handler=ResetRolePermissions';
                
                // Add anti-forgery token
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                form.appendChild(tokenInput);
                
                // Add role name
                const roleInput = document.createElement('input');
                roleInput.type = 'hidden';
                roleInput.name = 'roleName';
                roleInput.value = role;
                form.appendChild(roleInput);
                
                // Submit form
                document.body.appendChild(form);
                form.submit();
            }
        }

        /**
         * Reset entire form
         */
        function resetForm() {
            if (confirm('Are you sure you want to reset all changes? This will reload the page and lose any unsaved modifications.')) {
                window.location.reload();
            }
        }

        // Global functions for backward compatibility
        window.RolesPage = {
            resetRolePermissions,
            setupPermissionToggles
        };
    </script>
}

<style>
    /* Enhanced styles for permission matrix */
    .permission-toggle:checked {
        background-color: #3b82f6;
        border-color: #3b82f6;
    }
    
    .access-level-select {
        min-width: 80px;
    }
    
    .access-level-select:disabled {
        background-color: #f3f4f6;
        cursor: not-allowed;
    }
    
    /* Hover effects for matrix */
    .permission-toggle:hover {
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    /* Enhanced table styling */
    table th {
        position: sticky;
        top: 0;
        background-color: #f9fafb;
        z-index: 10;
    }
    
    /* Loading state styles */
    .submit-loading {
        display: none;
    }
    
    button.loading .submit-text {
        display: none;
    }
    
    button.loading .submit-loading {
        display: inline-flex !important;
    }
</style>