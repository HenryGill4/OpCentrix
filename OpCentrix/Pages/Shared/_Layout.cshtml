@* _layout.cshtml *@
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - OpCentrix</title>
    
    @* Load OpCentrix styles FIRST to avoid conflicts *@
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    
    @* Font Awesome for icons (including fas fa-calendar-plus) *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    @* Use Tailwind CDN only in development, production CSS in production *@
    @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
    {
        <script src="https://cdn.tailwindcss.com"></script>
        <script>
            tailwind.config = {
                theme: {
                    extend: {
                        colors: {
                            'opcentrix': {
                                'primary': '#3B82F6',
                                'secondary': '#6366F1',
                                'accent': '#10B981'
                            }
                        },
                        fontFamily: {
                            'sans': ['Inter', 'ui-sans-serif', 'system-ui']
                        }
                    }
                }
            }
        </script>
    }
    else
    {
        <link rel="stylesheet" href="~/css/tailwind-output.css" asp-append-version="true" />
    }
    
    @* Load Bootstrap LAST and only what we need *@
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    
    @* HTMX for dynamic content *@
    <script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
    
    @* Render Styles section *@
    @await RenderSectionAsync("Styles", required: false)
</head>
<body class="bg-gray-50">
    @{
        var user = Context.User;
        var isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        var userRole = user.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value ?? "";
        var userName = user.FindFirst(System.Security.Claims.ClaimTypes.GivenName)?.Value ?? user.Identity?.Name ?? "";
        var currentPage = ViewContext.RouteData.Values["page"]?.ToString()?.TrimStart('/');
    }

    <!-- Session Timeout Warning -->
    <div id="session-timeout-warning" class="session-timeout-warning">
        <div class="max-w-7xl mx-auto px-4 flex items-center justify-center space-x-4">
            <div class="flex items-center space-x-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span id="timeout-message">Your session will expire in <span id="timeout-countdown">5</span> minutes</span>
            </div>
            <button onclick="extendSession()" class="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200">
                Extend Session
            </button>
        </div>
    </div>

    <!-- Enhanced Navigation -->
    <nav class="bg-white shadow-lg border-b border-gray-200">
        <div class="max-w-full mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <!-- Logo and Primary Navigation -->
                <div class="flex items-center space-x-8">
                    <!-- Enhanced Logo -->
                    <div class="flex-shrink-0 flex items-center">
                        <a href="/" class="flex items-center">
                            <div class="w-10 h-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center mr-3 shadow-lg">
                                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 11.172V5l-1-1z"></path>
                                </svg>
                            </div>
                            <div>
                                <span class="text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">OpCentrix</span>
                                <p class="text-xs text-gray-500 leading-none">Manufacturing Execution System v4.0</p>
                            </div>
                        </a>
                    </div>

                    @if (isAuthenticated)
                    {
                        <!-- Simplified Main Navigation Links -->
                        <div class="hidden md:flex space-x-6">
                            <a href="/Scheduler" class="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors">
                                Scheduler
                            </a>
                            <a href="/PrintTracking" class="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors">
                                Print Tracking
                            </a>
                            <a href="/PrintJobLog" class="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors">
                                Print Job Log
                            </a>
                            @if (userRole == "Admin" || userRole == "Manager")
                            {
                                <a href="/Admin" class="text-gray-600 hover:text-red-600 px-3 py-2 rounded-md text-sm font-medium transition-colors">
                                    Admin
                                </a>
                            }
                            <a href="/EDM" class="text-gray-600 hover:text-purple-600 px-3 py-2 rounded-md text-sm font-medium transition-colors">
                                EDM
                            </a>
                            <a href="/Coating" class="text-gray-600 hover:text-orange-600 px-3 py-2 rounded-md text-sm font-medium transition-colors">
                                Coating
                            </a>
                        </div>
                        
                        <!-- Mobile Menu Button -->
                        <div class="md:hidden">
                            <button id="mobile-menu-button" class="text-gray-600 hover:text-gray-900 focus:outline-none p-2 rounded-md">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                                </svg>
                            </button>
                        </div>
                    }
                </div>

                @if (isAuthenticated)
                {
                    <!-- Simplified User Menu -->
                    <div class="flex items-center space-x-4">
                        <!-- User Info -->
                        <div class="hidden sm:flex items-center space-x-3">
                            <div class="text-right">
                                <p class="text-sm font-medium text-gray-900">@userName</p>
                                <p class="text-xs text-gray-500">@userRole</p>
                            </div>
                            <div class="w-8 h-8 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-full flex items-center justify-center">
                                <span class="text-white font-semibold text-xs">@(userName.FirstOrDefault())</span>
                            </div>
                        </div>
                        
                        <!-- Logout Button -->
                        <button onclick="performLogout()" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                            Logout
                        </button>
                    </div>
                }
                else
                {
                    <!-- Login Button for unauthenticated users -->
                    <div class="flex items-center">
                        <a href="/Account/Login" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                            Login
                        </a>
                    </div>
                }
            </div>
        </div>
        
        <!-- Simplified Mobile Menu -->
        <div id="mobile-menu" class="md:hidden hidden border-t border-gray-200 bg-gray-50">
            <div class="px-4 py-3 space-y-1">
                @if (isAuthenticated)
                {
                    <a href="/Scheduler" class="block px-3 py-2 text-gray-600 hover:text-blue-600 font-medium rounded-md">Production Scheduler</a>
                    <a href="/PrintTracking" class="block px-3 py-2 text-gray-600 hover:text-blue-600 font-medium rounded-md">Print Tracking</a>
                    <a href="/PrintJobLog" class="block px-3 py-2 text-gray-600 hover:text-blue-600 font-medium rounded-md">Print Job Log</a>
                    <a href="/EDM" class="block px-3 py-2 text-gray-600 hover:text-purple-600 font-medium rounded-md">EDM Operations</a>
                    <a href="/Coating" class="block px-3 py-2 text-gray-600 hover:text-orange-600 font-medium rounded-md">Coating</a>
                    <a href="/QC" class="block px-3 py-2 text-gray-600 hover:text-teal-600 font-medium rounded-md">Quality Control</a>
                    <a href="/Shipping" class="block px-3 py-2 text-gray-600 hover:text-indigo-600 font-medium rounded-md">Shipping</a>
                    
                    @if (userRole == "Admin" || userRole == "Manager")
                    {
                        <div class="border-t border-gray-200 pt-2 mt-2">
                            <a href="/Admin" class="block px-3 py-2 text-red-600 hover:text-red-700 font-medium rounded-md">Admin Panel</a>
                            <a href="/Admin/Parts" class="block px-3 py-2 text-blue-600 hover:text-blue-700 font-medium rounded-md">Parts Management</a>
                            <a href="/Admin/Prototypes" class="block px-3 py-2 text-amber-600 hover:text-amber-700 font-medium rounded-md">B&T Prototypes</a>
                        </div>
                    }
                    
                    <div class="border-t border-gray-200 pt-2 mt-2">
                        <button onclick="performLogout()" class="w-full text-left px-3 py-2 text-red-600 hover:text-red-700 font-medium rounded-md">
                            Logout
                        </button>
                    </div>
                }
                else
                {
                    <a href="/Account/Login" class="block px-3 py-2 text-blue-600 hover:text-blue-700 font-medium rounded-md">Login</a>
                }
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="min-h-screen">
        @RenderBody()
    </main>

    <!-- Enhanced Footer -->
    <footer class="bg-white border-t border-gray-200 mt-auto">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="flex items-center space-x-4">
                    <div class="w-8 h-8 opcentrix-gradient rounded-lg flex items-center justify-center">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 11.172V5l-1-1z"></path>
                        </svg>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-900">&copy; @DateTime.Now.Year OpCentrix</p>
                        <p class="text-xs text-gray-500">Manufacturing Execution System v4.0</p>
                    </div>
                </div>
                <div class="mt-4 md:mt-0">
                    <p class="text-xs text-gray-500">Last updated: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")</p>
                </div>
            </div>
        </div>
    </footer>

    <!-- JavaScript Libraries - SAFE MODE -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    @* DISABLED: Complex JavaScript files that were causing memory issues
    <script src="~/js/page-monitor.js" asp-append-version="true"></script>
    <script src="~/js/modal-manager.js" asp-append-version="true"></script>
    *@

    @if (isAuthenticated)
    {
        <!-- FIXED Session Management Script - No Infinite Loops -->
        <script>
            // CRITICAL FIX: Simplified session timeout management
            (function() {
                let sessionTimeoutMinutes = 120; // 2 hours
                let warningTimeoutMinutes = 5; // 5 minutes warning
                let sessionTimeoutTimer;
                let warningTimer;
                let countdownTimer;

                function resetSessionTimeout() {
                    // Clear existing timers
                    clearTimeout(sessionTimeoutTimer);
                    clearTimeout(warningTimer);
                    clearInterval(countdownTimer);
                    hideTimeoutWarning();

                    // Set new timers
                    const warningTime = (sessionTimeoutMinutes - warningTimeoutMinutes) * 60 * 1000;
                    warningTimer = setTimeout(showTimeoutWarning, warningTime);
                    
                    sessionTimeoutTimer = setTimeout(() => {
                        window.location.href = '/Account/Logout';
                    }, sessionTimeoutMinutes * 60 * 1000);
                }

                function showTimeoutWarning() {
                    const warning = document.getElementById('session-timeout-warning');
                    if (warning) {
                        warning.style.display = 'block';
                        
                        let countdown = warningTimeoutMinutes * 60;
                        const countdownSpan = document.getElementById('timeout-countdown');
                        
                        // FIXED: Use single timer that clears itself
                        countdownTimer = setInterval(() => {
                            if (countdown <= 0) {
                                clearInterval(countdownTimer);
                                window.location.href = '/Account/Logout';
                                return;
                            }
                            
                            const minutes = Math.floor(countdown / 60);
                            const seconds = countdown % 60;
                            if (countdownSpan) {
                                countdownSpan.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                            }
                            countdown--;
                        }, 1000);
                    }
                }

                function hideTimeoutWarning() {
                    const warning = document.getElementById('session-timeout-warning');
                    if (warning) {
                        warning.style.display = 'none';
                    }
                    clearInterval(countdownTimer);
                }

                // FIXED: Simple logout function
                window.performLogout = function() {
                    if (confirm('Are you sure you want to logout?')) {
                        // Clear all timers
                        clearTimeout(sessionTimeoutTimer);
                        clearTimeout(warningTimer);
                        clearInterval(countdownTimer);
                        
                        // Redirect
                        window.location.href = '/Account/Logout';
                    }
                };

                // FIXED: Simple extend session function
                window.extendSession = function() {
                    fetch('/Account/ExtendSession', { method: 'POST' })
                        .then(() => {
                            resetSessionTimeout();
                            hideTimeoutWarning();
                        })
                        .catch(() => {
                            window.location.href = '/Account/Login';
                        });
                };

                // FIXED: Simple activity tracking (no infinite loops)
                let lastActivity = Date.now();
                function trackActivity() {
                    const now = Date.now();
                    // Only reset if more than 30 seconds since last activity
                    if (now - lastActivity > 30000) {
                        lastActivity = now;
                        resetSessionTimeout();
                    }
                }

                // Add activity listeners (throttled)
                ['click', 'keypress', 'scroll'].forEach(event => {
                    document.addEventListener(event, trackActivity, { passive: true });
                });

                // Initialize
                resetSessionTimeout();
            })();
            
            // FIXED: Simple mobile menu toggle
            document.addEventListener('DOMContentLoaded', function() {
                const mobileMenuButton = document.getElementById('mobile-menu-button');
                const mobileMenu = document.getElementById('mobile-menu');
                
                if (mobileMenuButton && mobileMenu) {
                    mobileMenuButton.addEventListener('click', function() {
                        mobileMenu.classList.toggle('hidden');
                    });
                }
            });
        </script>
    }

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

