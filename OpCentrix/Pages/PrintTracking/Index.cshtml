@page
@model OpCentrix.Pages.PrintTracking.IndexModel
@{
    ViewData["Title"] = "Print Tracking Dashboard";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="py-6">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900">Print Tracking</h1>
                        <p class="mt-1 text-sm text-gray-600">Track and log 3D printer operations</p>
                    </div>
                    <div class="flex items-center space-x-4">
                        <div class="text-right">
                            <p class="text-sm font-medium text-gray-900">@Model.Dashboard.OperatorName</p>
                            <p class="text-xs text-gray-500">Operator</p>
                        </div>
                        <button id="refresh-dashboard-btn" 
                                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            <span>Refresh</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Dashboard Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" id="dashboard-content">
        @await Html.PartialAsync("_PrintTrackingDashboard", Model.Dashboard)
    </div>

    <!-- Quick Action Buttons (Fixed Position) -->
    <div class="fixed bottom-6 right-6 space-y-3">
        <button id="start-print-btn" 
                class="bg-green-600 hover:bg-green-700 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-200"
                title="Start New Print">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
        </button>
        <button id="complete-print-btn" 
                class="bg-red-600 hover:bg-red-700 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-200"
                title="Complete Print">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
        </button>
    </div>
</div>

<!-- Modal Container -->
<div id="modal-container"></div>

<!-- Toast Container -->
<div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>

<!-- Loading Indicator -->
<div id="loading-indicator" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-6 shadow-xl">
        <div class="flex items-center space-x-3">
            <svg class="animate-spin h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-gray-600">Loading...</span>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ===============================
        // PRINT TRACKING GLOBAL NAMESPACE
        // ===============================
        window.PrintTracking = window.PrintTracking || {
            initialized: false,
            autoRefreshInterval: null,
            isModalOpen: false
        };

        // Core modal management functions
        window.PrintTracking.openStartPrintModal = function(printerName = null) {
            console.log('?? [PRINT-TRACKING] Opening start print modal', { printerName });
            
            PrintTracking.isModalOpen = true;
            PrintTracking.pauseAutoRefresh();
            
            PrintTracking.showLoadingIndicator();
            const url = printerName 
                ? `/PrintTracking?handler=StartPrintModal&printerName=${encodeURIComponent(printerName)}`
                : '/PrintTracking?handler=StartPrintModal';
                
            htmx.ajax('GET', url, {
                target: '#modal-container',
                swap: 'innerHTML'
            }).then(() => {
                PrintTracking.hideLoadingIndicator();
            }).catch((error) => {
                PrintTracking.hideLoadingIndicator();
                PrintTracking.handleModalError('Failed to load start print form', error);
            });
        };

        window.PrintTracking.openPostPrintModal = function(buildId = null, printerName = null) {
            console.log('?? [PRINT-TRACKING] Opening post print modal', { buildId, printerName });
            
            PrintTracking.isModalOpen = true;
            PrintTracking.pauseAutoRefresh();
            
            PrintTracking.showLoadingIndicator();
            let url = '/PrintTracking?handler=PostPrintModal';
            const params = [];
            if (buildId) params.push(`buildId=${buildId}`);
            if (printerName) params.push(`printerName=${encodeURIComponent(printerName)}`);
            if (params.length > 0) url += '&' + params.join('&');
            
            htmx.ajax('GET', url, {
                target: '#modal-container',
                swap: 'innerHTML'
            }).then(() => {
                PrintTracking.hideLoadingIndicator();
            }).catch((error) => {
                PrintTracking.hideLoadingIndicator();
                PrintTracking.handleModalError('Failed to load complete print form', error);
            });
        };

        window.PrintTracking.closeModal = function() {
            const modalContainer = document.getElementById('modal-container');
            if (modalContainer) {
                modalContainer.innerHTML = '';
            }
            PrintTracking.hideLoadingIndicator();
            PrintTracking.isModalOpen = false;
            PrintTracking.resumeAutoRefresh();
        };

        window.PrintTracking.refreshDashboard = function() {
            console.log('?? [PRINT-TRACKING] Manual dashboard refresh');
            PrintTracking.showLoadingIndicator();
            
            htmx.ajax('GET', '/PrintTracking?handler=RefreshDashboard', {
                target: '#dashboard-content',
                swap: 'innerHTML'
            }).then(() => {
                PrintTracking.hideLoadingIndicator();
                PrintTracking.showToast('Dashboard refreshed successfully', 'success');
                // Re-bind event listeners after content update
                PrintTracking.bindDashboardEvents();
            }).catch((error) => {
                PrintTracking.hideLoadingIndicator();
                PrintTracking.showToast('Failed to refresh dashboard', 'error');
                console.error('Dashboard refresh error:', error);
            });
        };

        // Auto-refresh management
        window.PrintTracking.startAutoRefresh = function() {
            if (PrintTracking.autoRefreshInterval) {
                clearInterval(PrintTracking.autoRefreshInterval);
            }
            
            PrintTracking.autoRefreshInterval = setInterval(() => {
                if (!PrintTracking.isModalOpen && !document.getElementById('modal-container').innerHTML) {
                    console.log('? [PRINT-TRACKING] Auto-refreshing dashboard...');
                    
                    htmx.ajax('GET', '/PrintTracking?handler=RefreshDashboard', {
                        target: '#dashboard-content',
                        swap: 'innerHTML'
                    }).then(() => {
                        // Re-bind events after auto-refresh
                        PrintTracking.bindDashboardEvents();
                    }).catch((error) => {
                        console.warn('Auto-refresh failed (this is normal):', error);
                    });
                }
            }, 300000); // 5 minutes
            
            console.log('? [PRINT-TRACKING] Auto-refresh started (5-minute interval)');
        };
        
        window.PrintTracking.pauseAutoRefresh = function() {
            if (PrintTracking.autoRefreshInterval) {
                clearInterval(PrintTracking.autoRefreshInterval);
                PrintTracking.autoRefreshInterval = null;
                console.log('?? [PRINT-TRACKING] Auto-refresh paused');
            }
        };
        
        window.PrintTracking.resumeAutoRefresh = function() {
            console.log('?? [PRINT-TRACKING] Auto-refresh resumed');
            PrintTracking.startAutoRefresh();
        };

        // Loading indicator management
        window.PrintTracking.showLoadingIndicator = function() {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                indicator.classList.remove('hidden');
            }
        };

        window.PrintTracking.hideLoadingIndicator = function() {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                indicator.classList.add('hidden');
            }
        };

        // Error handling
        window.PrintTracking.handleModalError = function(message, error) {
            console.error('Modal error:', error);
            const errorHtml = `
                <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                        <div class="mt-3 text-center">
                            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                                <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">Network Error</h3>
                            <div class="mt-2 px-7 py-3">
                                <p class="text-sm text-gray-500">${message}</p>
                                <p class="text-xs text-gray-400 mt-2">Please check your connection and try again</p>
                            </div>
                            <div class="items-center px-4 py-3 space-y-2">
                                <button onclick="location.reload()" 
                                        class="px-4 py-2 bg-blue-600 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-blue-700">
                                    Refresh Page
                                </button>
                                <button onclick="PrintTracking.closeModal()" 
                                        class="px-4 py-2 bg-gray-300 text-gray-700 text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-400">
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('modal-container').innerHTML = errorHtml;
        };

        // Toast notifications
        window.PrintTracking.showToast = function(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `
                transform transition-all duration-300 translate-x-full
                max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto
                flex ring-1 ring-black ring-opacity-5
            `;
            
            const bgColor = type === 'success' ? 'bg-green-50' : 'bg-red-50';
            const textColor = type === 'success' ? 'text-green-800' : 'text-red-800';
            const iconColor = type === 'success' ? 'text-green-400' : 'text-red-400';
            
            toast.innerHTML = `
                <div class="flex-1 w-0 p-4">
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <svg class="h-6 w-6 ${iconColor}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                ${type === 'success' 
                                    ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6-2a9 9 0 11-18 0 9 9 0 0118 0z" />'
                                    : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />'
                                }
                            </svg>
                        </div>
                        <div class="ml-3 w-0 flex-1 pt-0.5">
                            <p class="text-sm font-medium ${textColor}">${message}</p>
                        </div>
                    </div>
                </div>
                <div class="flex border-l border-gray-200">
                    <button onclick="this.parentElement.parentElement.remove()" 
                            class="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-gray-600 hover:text-gray-500">
                        ?
                    </button>
                </div>
            `;
            
            document.getElementById('toast-container').appendChild(toast);
            
            // Animate in
            requestAnimationFrame(() => {
                toast.classList.remove('translate-x-full');
            });
            
            // Auto remove
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => toast.remove(), 300);
            }, 5000);
        };

        // Event binding for dashboard elements (called after HTMX updates)
        window.PrintTracking.bindDashboardEvents = function() {
            // Bind events to dynamically loaded dashboard content
            document.querySelectorAll('[onclick*="openStartPrintModal"]').forEach(btn => {
                const onclick = btn.getAttribute('onclick');
                const match = onclick.match(/openStartPrintModal\('?([^']*)'?\)/);
                const printerName = match ? match[1] : null;
                
                btn.removeAttribute('onclick');
                btn.addEventListener('click', () => PrintTracking.openStartPrintModal(printerName));
            });

            document.querySelectorAll('[onclick*="openPostPrintModal"]').forEach(btn => {
                const onclick = btn.getAttribute('onclick');
                const buildIdMatch = onclick.match(/openPostPrintModal\((\d+)\)/);
                const printerMatch = onclick.match(/openPostPrintModal\(null, '([^']*)'\)/);
                
                const buildId = buildIdMatch ? parseInt(buildIdMatch[1]) : null;
                const printerName = printerMatch ? printerMatch[1] : null;
                
                btn.removeAttribute('onclick');
                btn.addEventListener('click', () => PrintTracking.openPostPrintModal(buildId, printerName));
            });

            console.log('?? [PRINT-TRACKING] Dashboard events rebound');
        };

        // Global function aliases for backward compatibility
        window.openStartPrintModal = window.PrintTracking.openStartPrintModal;
        window.openPostPrintModal = window.PrintTracking.openPostPrintModal;
        window.closeModal = window.PrintTracking.closeModal;
        window.refreshDashboard = window.PrintTracking.refreshDashboard;

        // Enhanced HTMX event handling
        document.body.addEventListener('htmx:beforeRequest', function(event) {
            if (event.detail.requestConfig.headers['HX-Target'] === '#modal-container') {
                PrintTracking.showLoadingIndicator();
            }
        });

        document.body.addEventListener('htmx:afterRequest', function(event) {
            PrintTracking.hideLoadingIndicator();
            
            // Re-bind events if dashboard was updated
            if (event.detail.requestConfig.path?.includes('RefreshDashboard') || 
                event.detail.target?.id === 'dashboard-content') {
                PrintTracking.bindDashboardEvents();
            }
            
            // Handle network errors
            if (event.detail.xhr.status >= 400) {
                const isModal = event.detail.requestConfig.headers['HX-Target'] === '#modal-container';
                if (isModal) {
                    PrintTracking.handleModalError(`Server error (${event.detail.xhr.status})`, event.detail.xhr);
                } else {
                    PrintTracking.showToast(`Request failed (${event.detail.xhr.status})`, 'error');
                }
            }
        });

        document.body.addEventListener('htmx:responseError', function(event) {
            PrintTracking.hideLoadingIndicator();
            PrintTracking.showToast('Network error. Please check your connection.', 'error');
            console.error('HTMX Response Error:', event.detail);
        });

        document.body.addEventListener('htmx:timeout', function(event) {
            PrintTracking.hideLoadingIndicator();
            PrintTracking.showToast('Request timed out. Please try again.', 'error');
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                PrintTracking.closeModal();
            }
            if (event.ctrlKey && event.key === 'r') {
                event.preventDefault();
                PrintTracking.refreshDashboard();
            }
        });

        // Initialize page - using event delegation for persistent buttons
        document.addEventListener('DOMContentLoaded', function() {
            console.log('?? [PRINT-TRACKING] Print Tracking Dashboard initializing...');
            
            // Bind main action buttons using event delegation (these persist across page loads)
            document.getElementById('refresh-dashboard-btn')?.addEventListener('click', PrintTracking.refreshDashboard);
            document.getElementById('start-print-btn')?.addEventListener('click', () => PrintTracking.openStartPrintModal());
            document.getElementById('complete-print-btn')?.addEventListener('click', () => PrintTracking.openPostPrintModal());
            
            // Bind dashboard-specific events
            PrintTracking.bindDashboardEvents();
            
            // Start auto-refresh
            PrintTracking.startAutoRefresh();
            
            // Check for initial errors
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('error')) {
                PrintTracking.showToast(urlParams.get('error'), 'error');
            }
            
            PrintTracking.initialized = true;
            console.log('? [PRINT-TRACKING] Print Tracking Dashboard initialized successfully');
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            PrintTracking.pauseAutoRefresh();
        });
    </script>
}