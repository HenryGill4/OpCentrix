@using OpCentrix.ViewModels.PrintTracking
@model PostPrintViewModel

<!-- Enhanced Post-Print Log Modal - Phase 4 with Operator Time Logging and Performance Assessment -->
<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" id="post-print-modal">
    <div class="relative top-5 mx-auto p-5 border w-11/12 md:w-5/6 lg:w-4/5 max-w-7xl shadow-lg rounded-md bg-white max-h-screen overflow-y-auto">
        <div class="mt-3">
            <!-- Header -->
            <div class="flex items-center justify-between pb-4 border-b">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900">Complete Print Job</h3>
                    <p class="text-sm text-gray-600 mt-1">Enhanced with performance assessment and quality tracking</p>
                </div>
                <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Form -->
            <form hx-post="/PrintTracking?handler=CompletePrint" 
                  hx-target="#modal-container" 
                  hx-swap="innerHTML"
                  class="mt-6 space-y-6">
                
                @Html.AntiForgeryToken()
                
                @if (Model.BuildId > 0)
                {
                    <input type="hidden" name="BuildId" value="@Model.BuildId" />
                }

                <!-- Operator Info with Performance Alert -->
                <div class="bg-blue-50 p-4 rounded-lg">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <svg class="w-5 h-5 text-blue-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                            </svg>
                            <span class="text-sm font-medium text-blue-900">Operator: @Model.OperatorName</span>
                        </div>
                        @if (Model.IsSignificantVariance)
                        {
                            <div class="flex items-center @Model.PerformanceColor">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                </svg>
                                <span class="text-xs font-medium">@Model.TimeVariancePercent.ToString("F1")% time variance</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Basic Information Section -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Running Job Selection -->
                    <div class="md:col-span-2">
                        <label for="SelectedJobId" class="block text-sm font-medium text-gray-700 mb-2">
                            Select Running Job <span class="text-red-500">*</span>
                        </label>
                        <select name="SelectedJobId" id="SelectedJobId" 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                onchange="PostPrintModal.loadJobDetails()"
                                required>
                            <option value="">Select a running job to complete</option>
                            @foreach (var job in Model.AvailableRunningJobs)
                            {
                                <option value="@job.Id" 
                                        data-part-number="@job.PartNumber"
                                        data-machine-id="@job.MachineId"
                                        data-material="@job.SlsMaterial"
                                        data-quantity="@job.Quantity"
                                        selected="@(job.Id == Model.JobId)">
                                    [@job.MachineId] @job.PartNumber - @job.Quantity pcs (@job.SlsMaterial) - Started: @job.ActualStart?.ToString("MM/dd HH:mm")
                                </option>
                            }
                        </select>
                        <p class="mt-1 text-xs text-gray-500">This will auto-populate the form with job details</p>
                    </div>

                    <!-- Printer (Auto-populated) -->
                    <div>
                        <label for="PrinterName" class="block text-sm font-medium text-gray-700 mb-2">
                            Printer <span class="text-red-500">*</span>
                        </label>
                        <select name="PrinterName" id="PrinterName" required 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            @foreach (var printer in Model.AvailablePrinters)
                            {
                                <option value="@printer" selected="@(printer == Model.PrinterName)">@printer</option>
                            }
                        </select>
                        <p class="mt-1 text-xs text-gray-500">Auto-populated from selected job</p>
                    </div>

                    <!-- Reason for End -->
                    <div>
                        <label for="ReasonForEnd" class="block text-sm font-medium text-gray-700 mb-2">
                            Reason for End <span class="text-red-500">*</span>
                        </label>
                        <select name="ReasonForEnd" id="ReasonForEnd" required 
                                onchange="PostPrintModal.handleReasonChange()"
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">Select reason</option>
                            @foreach (var reason in Model.EndReasons)
                            {
                                <option value="@reason" selected="@(reason == Model.ReasonForEnd)">@reason</option>
                            }
                        </select>
                    </div>

                    <!-- Actual Start Time (Auto-populated) -->
                    <div>
                        <label for="ActualStartTime" class="block text-sm font-medium text-gray-700 mb-2">
                            Actual Start Time <span class="text-red-500">*</span>
                        </label>
                        <input type="datetime-local" 
                               name="ActualStartTime" 
                               id="ActualStartTime" 
                               value="@Model.ActualStartTime.ToString("yyyy-MM-ddTHH:mm")" 
                               required
                               onchange="PostPrintModal.calculateActualTime()"
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        <p class="mt-1 text-xs text-gray-500">Auto-populated from job start time</p>
                    </div>

                    <!-- Actual End Time -->
                    <div>
                        <label for="ActualEndTime" class="block text-sm font-medium text-gray-700 mb-2">
                            Actual End Time <span class="text-red-500">*</span>
                        </label>
                        <input type="datetime-local" 
                               name="ActualEndTime" 
                               id="ActualEndTime" 
                               value="@Model.ActualEndTime.ToString("yyyy-MM-ddTHH:mm")" 
                               required
                               onchange="PostPrintModal.calculateActualTime()"
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        <p class="mt-1 text-xs text-gray-500">When did the build actually complete?</p>
                    </div>
                </div>

                <!-- PHASE 4: Enhanced Time Logging and Performance Assessment -->
                <div class="bg-gradient-to-r from-orange-50 to-yellow-50 p-6 rounded-lg border">
                    <h4 class="text-lg font-semibold text-orange-800 mb-4 flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 00-2-2z"></path>
                        </svg>
                        Build Performance Assessment
                    </h4>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <!-- Actual Time -->
                        <div>
                            <label for="OperatorActualHours" class="block text-sm font-medium text-gray-700 mb-2">
                                Actual Build Time (hours) <span class="text-red-500">*</span>
                            </label>
                            <input type="number" 
                                   name="OperatorActualHours" 
                                   id="OperatorActualHours" 
                                   step="0.01" 
                                   min="0.01" 
                                   max="72.00" 
                                   value="@Model.OperatorActualHours.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)"
                                   required
                                   lang="en"
                                   inputmode="decimal"
                                   pattern="[0-9]+(\.[0-9]{1,2})?"
                                   onchange="PostPrintModal.updatePerformanceCalculations()"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500">
                            <p class="mt-1 text-xs text-orange-600">From operator observation/printer display (use decimal point, e.g., 4.25)</p>
                        </div>

                        <!-- Original Estimate (if available) -->
                        @if (Model.OperatorEstimatedHours.HasValue)
                        {
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Your Original Estimate
                                </label>
                                <div class="mt-1 block w-full p-3 bg-blue-50 rounded-md border-blue-200 border">
                                    <span class="text-lg font-semibold text-blue-700">@Model.OperatorEstimatedHours?.ToString("F2")h</span>
                                </div>
                                <p class="mt-1 text-xs text-blue-600">From print start</p>
                            </div>
                        }

                        <!-- Time Variance Display -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Performance Variance
                            </label>
                            <div id="performanceVariance" class="mt-1 block w-full p-3 bg-gray-50 rounded-md border-gray-200 border">
                                <span class="text-lg font-semibold @Model.PerformanceColor" id="variancePercent">@Model.TimeVariancePercent.ToString("F1")%</span>
                            </div>
                            <p class="mt-1 text-xs text-gray-500" id="varianceDescription">Performance indicator</p>
                        </div>
                    </div>

                    <!-- Performance Assessment -->
                    <div class="mb-4">
                        <label for="OperatorBuildAssessment" class="block text-sm font-medium text-gray-700 mb-2">
                            How did this build perform compared to your expectations? <span class="text-red-500">*</span>
                        </label>
                        <select name="OperatorBuildAssessment" id="OperatorBuildAssessment" required 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500">
                            <option value="">Select performance assessment</option>
                            @foreach (var assessment in Model.BuildAssessmentOptions)
                            {
                                <option value="@assessment" selected="@(assessment == Model.OperatorBuildAssessment)">@assessment</option>
                            }
                        </select>
                    </div>

                    <!-- Factors Affecting Time -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            What factors affected the build time? (Select all that apply)
                        </label>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                            @foreach (var factor in Model.AvailableTimeFactors)
                            {
                                <label class="flex items-center">
                                    <input type="checkbox" 
                                           name="TimeFactors" 
                                           value="@factor" 
                                           class="rounded border-gray-300 text-orange-600 shadow-sm focus:border-orange-300 focus:ring focus:ring-orange-200 focus:ring-opacity-50">
                                    <span class="ml-2 text-sm text-gray-700">@factor</span>
                                </label>
                            }
                        </div>
                    </div>

                    <!-- Machine Performance Notes -->
                    <div>
                        <label for="MachinePerformanceNotes" class="block text-sm font-medium text-gray-700 mb-2">
                            Machine Performance Notes (Optional)
                        </label>
                        <textarea name="MachinePerformanceNotes" 
                                  id="MachinePerformanceNotes" 
                                  rows="2" 
                                  placeholder="How did TI1/TI2/INC perform? Any issues or observations..."
                                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500">@Model.MachinePerformanceNotes</textarea>
                    </div>
                </div>

                <!-- PHASE 4: Quality Assessment Section -->
                <div class="bg-gradient-to-r from-green-50 to-teal-50 p-6 rounded-lg border">
                    <h4 class="text-lg font-semibold text-green-800 mb-4 flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Quality Assessment
                    </h4>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <!-- Overall Quality -->
                        <div>
                            <label for="QualityAssessment" class="block text-sm font-medium text-gray-700 mb-2">
                                Overall Quality <span class="text-red-500">*</span>
                            </label>
                            <select name="QualityAssessment" id="QualityAssessment" required 
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                                <option value="">Select quality level</option>
                                @foreach (var quality in Model.QualityAssessmentOptions)
                                {
                                    <option value="@quality" selected="@(quality == Model.QualityAssessment)">@quality</option>
                                }
                            </select>
                        </div>

                        <!-- Defect Count -->
                        <div>
                            <label for="DefectCount" class="block text-sm font-medium text-gray-700 mb-2">
                                Defective Parts Count
                            </label>
                            <input type="number" 
                                   name="DefectCount" 
                                   id="DefectCount" 
                                   min="0" 
                                   max="1000" 
                                   value="@Model.DefectCount"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
                            <p class="mt-1 text-xs text-green-600">Parts that don't meet requirements</p>
                        </div>
                    </div>

                    <!-- Quality Notes -->
                    <div>
                        <label for="QualityNotes" class="block text-sm font-medium text-gray-700 mb-2">
                            Quality Notes (Optional)
                        </label>
                        <textarea name="QualityNotes" 
                                  id="QualityNotes" 
                                  rows="2" 
                                  placeholder="Details about quality issues, surface finish, dimensional accuracy..."
                                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">@Model.QualityNotes</textarea>
                    </div>
                </div>

                <!-- Part Numbers Section -->
                <div>
                    <div class="flex items-center justify-between mb-4">
                        <label class="block text-sm font-medium text-gray-700">
                            Part Numbers <span class="text-red-500">*</span>
                        </label>
                        <button type="button" onclick="PostPrintModal.addPartEntry()" 
                                class="text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700">
                            + Add Part
                        </button>
                    </div>
                    
                    <div id="parts-container" class="space-y-3">
                        @for (int i = 0; i < Model.Parts.Count; i++)
                        {
                            <div class="part-entry border border-gray-200 rounded-lg p-4 bg-gray-50">
                                <div class="grid grid-cols-1 md:grid-cols-5 gap-3 items-center">
                                    <div class="md:col-span-2">
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Part Number</label>
                                        <input type="text" 
                                               name="Parts[@i].PartNumber" 
                                               value="@Model.Parts[i].PartNumber"
                                               list="available-parts"
                                               required
                                               placeholder="Enter or select part number"
                                               class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm">
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Total Quantity</label>
                                        <input type="number" 
                                               name="Parts[@i].Quantity" 
                                               value="@Model.Parts[i].Quantity"
                                               min="1" 
                                               required
                                               onchange="PostPrintModal.updatePartQuality(@i)"
                                               class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm">
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Good Parts</label>
                                        <input type="number" 
                                               name="Parts[@i].GoodParts" 
                                               value="@Model.Parts[i].GoodParts"
                                               min="0" 
                                               onchange="PostPrintModal.updatePartQuality(@i)"
                                               class="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 text-sm">
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <label class="flex items-center">
                                            <input type="checkbox" 
                                                   name="Parts[@i].IsPrimary" 
                                                   value="true"
                                                   @(Model.Parts[i].IsPrimary || i == 0 ? "checked" : "")
                                                   class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                            <span class="ml-2 text-xs text-gray-700">Primary</span>
                                        </label>
                                        @if (i > 0)
                                        {
                                            <button type="button" onclick="PostPrintModal.removePartEntry(this)" 
                                                    class="text-red-600 hover:text-red-800">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                            </button>
                                        }
                                    </div>
                                </div>
                                <div class="mt-2 text-xs text-gray-600" id="qualityRate_@i">
                                    Quality Rate: @Model.Parts[i].QualityRate.ToString("F1")%
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Part Number Datalist -->
                    <datalist id="available-parts">
                        @foreach (var part in Model.AvailableParts)
                        {
                            <option value="@part.PartNumber">@part.Description</option>
                        }
                    </datalist>
                </div>

                <!-- PHASE 4: Lessons Learned and Schedule Impact -->
                <div class="bg-gradient-to-r from-purple-50 to-indigo-50 p-6 rounded-lg border">
                    <h4 class="text-lg font-semibold text-purple-800 mb-4 flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                        </svg>
                        Future Improvements
                    </h4>
                    
                    <div class="space-y-4">
                        <!-- Lessons Learned -->
                        <div>
                            <label for="LessonsLearned" class="block text-sm font-medium text-gray-700 mb-2">
                                Lessons Learned (Optional)
                            </label>
                            <textarea name="LessonsLearned" 
                                      id="LessonsLearned" 
                                      rows="3" 
                                      placeholder="What would you do differently next time? Any tips for future operators?"
                                      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">@Model.LessonsLearned</textarea>
                        </div>

                        <!-- Schedule Impact Assessment -->
                        @if (Model.IsSignificantVariance)
                        {
                            <div class="bg-white p-4 rounded-lg border border-purple-200">
                                <div class="flex items-center mb-2">
                                    <input type="checkbox" 
                                           name="WillDelayAffectSchedule" 
                                           id="WillDelayAffectSchedule"
                                           value="true"
                                           @(Model.WillDelayAffectSchedule ? "checked" : "")
                                           class="rounded border-gray-300 text-purple-600 shadow-sm focus:border-purple-300 focus:ring focus:ring-purple-200 focus:ring-opacity-50">
                                    <label for="WillDelayAffectSchedule" class="ml-2 text-sm font-medium text-purple-700">
                                        This time variance may affect scheduled jobs
                                    </label>
                                </div>
                                
                                <textarea name="ScheduleImpactNotes" 
                                          id="ScheduleImpactNotes" 
                                          rows="2" 
                                          placeholder="How might this impact other jobs or departments?"
                                          class="mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">@Model.ScheduleImpactNotes</textarea>
                            </div>
                        }
                    </div>
                </div>

                <!-- Delay Information (if applicable) -->
                @if (Model.HasDelay && Model.DelayInfo != null)
                {
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <div class="flex items-center mb-3">
                            <svg class="w-5 h-5 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>
                            </svg>
                            <h4 class="text-sm font-medium text-yellow-800">Delay Detected (@Model.DelayInfo.DelayDuration minutes)</h4>
                        </div>

                        <input type="hidden" name="HasDelay" value="true" />
                        <input type="hidden" name="DelayInfo.DelayDuration" value="@Model.DelayInfo.DelayDuration" />

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label for="DelayReason" class="block text-sm font-medium text-gray-700 mb-2">
                                    Delay Reason <span class="text-red-500">*</span>
                                </label>
                                <select name="DelayInfo.DelayReason" id="DelayReason" required 
                                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-yellow-500 focus:ring-yellow-500">
                                    <option value="">Select delay reason</option>
                                    @foreach (var reason in Model.DelayInfo.AvailableReasons)
                                    {
                                        <option value="@reason" selected="@(reason == Model.DelayInfo.DelayReason)">@reason</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label for="DelayNotes" class="block text-sm font-medium text-gray-700 mb-2">
                                    Delay Notes (Optional)
                                </label>
                                <textarea name="DelayInfo.DelayNotes" 
                                          id="DelayNotes" 
                                          rows="2" 
                                          placeholder="Additional details about the delay..."
                                          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-yellow-500 focus:ring-yellow-500">@Model.DelayInfo.DelayNotes</textarea>
                            </div>
                        </div>
                    </div>
                }

                <!-- Optional Technical Details (Collapsible) -->
                <div class="border border-gray-200 rounded-lg">
                    <button type="button" 
                            onclick="PostPrintModal.toggleOptionalDetails()" 
                            class="w-full flex justify-between items-center p-4 text-left hover:bg-gray-50">
                        <span class="text-sm font-medium text-gray-700">Optional Technical Details (from printer summary)</span>
                        <svg id="optional-chevron" class="w-5 h-5 text-gray-400 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    
                    <div id="optional-details" class="hidden p-4 border-t border-gray-200">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label for="LaserRunTime" class="block text-sm font-medium text-gray-700 mb-2">
                                    Laser Run Time
                                </label>
                                <input type="text" 
                                       name="LaserRunTime" 
                                       id="LaserRunTime" 
                                       value="@Model.LaserRunTime"
                                       placeholder="e.g., 4h 23m"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            </div>
                            <div>
                                <label for="GasUsed_L" class="block text-sm font-medium text-gray-700 mb-2">
                                    Gas Used (L)
                                </label>
                                <input type="number" 
                                       name="GasUsed_L" 
                                       id="GasUsed_L" 
                                       value="@Model.GasUsed_L"
                                       step="0.1" 
                                       min="0"
                                       placeholder="0.0"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            </div>
                            <div>
                                <label for="PowderUsed_L" class="block text-sm font-medium text-gray-700 mb-2">
                                    Powder Used (L)
                                </label>
                                <input type="number" 
                                       name="PowderUsed_L" 
                                       id="PowderUsed_L" 
                                       value="@Model.PowderUsed_L"
                                       step="0.1" 
                                       min="0"
                                       placeholder="0.0"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            </div>
                        </div>
                        
                        <div class="mt-4">
                            <label for="Notes" class="block text-sm font-medium text-gray-700 mb-2">
                                Additional Technical Notes
                            </label>
                            <textarea name="Notes" 
                                      id="Notes" 
                                      rows="3" 
                                      placeholder="Any additional technical details about the print job..."
                                      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">@Model.Notes</textarea>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="flex justify-end space-x-3 pt-6 border-t">
                    <button type="button" 
                            onclick="closeModal()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Complete Print
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
(function() {
    'use strict';
    
    // CRITICAL FIX: Create namespaced object to prevent variable conflicts
    window.PostPrintModal = window.PostPrintModal || {
        partIndex: @Model.Parts.Count,
        initialized: false
    };

    // CRITICAL FIX: Ensure modal closes properly after successful submission
    // CRITICAL FIX: Enhanced form submission validation
    function handleFormSubmission() {
        // Listen for successful form submissions
        const form = document.querySelector('form[hx-post*="CompletePrint"]');
        if (form) {
            // Add form submission validation
            form.addEventListener('submit', function(event) {
                console.log('?? [POST-PRINT] Form submission started');
                
                // Validate OperatorActualHours before submission
                const actualHoursInput = document.getElementById('OperatorActualHours');
                if (actualHoursInput) {
                    const value = actualHoursInput.value;
                    const numericValue = parseFloat(value);
                    
                    console.log('?? [POST-PRINT] OperatorActualHours value:', value, 'parsed:', numericValue);
                    
                    if (isNaN(numericValue) || numericValue <= 0 || numericValue > 72) {
                        event.preventDefault();
                        alert('Please enter a valid build time between 0.01 and 72 hours using decimal point notation (e.g., 4.25)');
                        actualHoursInput.focus();
                        return false;
                    }
                    
                    // Ensure proper decimal formatting (dot notation)
                    actualHoursInput.value = numericValue.toFixed(2);
                    console.log('? [POST-PRINT] OperatorActualHours normalized to:', actualHoursInput.value);
                }
                
                return true;
            });
            
            // Override the HTMX response handling for this specific form
            form.addEventListener('htmx:afterRequest', function(event) {
                console.log('?? [POST-PRINT] Form response received:', event.detail.xhr.status);
                
                try {
                    const contentType = event.detail.xhr.getResponseHeader('Content-Type') || '';
                    
                    if (contentType.includes('application/json')) {
                        const response = JSON.parse(event.detail.xhr.responseText);
                        
                        if (response.success) {
                            console.log('? [POST-PRINT] Print completion successful');
                            
                            // Use the main PrintTracking modal close function
                            if (typeof window.PrintTracking !== 'undefined' && typeof window.PrintTracking.closeModal === 'function') {
                                window.PrintTracking.closeModal();
                            } else if (typeof window.closeModal === 'function') {
                                window.closeModal();
                            }
                            
                            // Show success message through PrintTracking
                            if (typeof window.PrintTracking !== 'undefined' && typeof window.PrintTracking.showToast === 'function') {
                                window.PrintTracking.showToast(response.message || 'Print completed successfully', 'success');
                            }
                            
                            // Refresh dashboard through PrintTracking
                            if (typeof window.PrintTracking !== 'undefined' && typeof window.PrintTracking.refreshDashboard === 'function') {
                                setTimeout(() => {
                                    window.PrintTracking.refreshDashboard();
                                }, 500);
                            }
                        } else {
                            console.error('? [POST-PRINT] Server returned error:', response.message);
                            if (typeof window.PrintTracking !== 'undefined' && typeof window.PrintTracking.showToast === 'function') {
                                window.PrintTracking.showToast(response.message || 'Error completing print', 'error');
                            }
                        }
                    } else if (contentType.includes('text/html')) {
                        console.log('?? [POST-PRINT] Received HTML response - likely validation errors');
                        // The form content should be updated by HTMX automatically with validation errors
                    }
                } catch (error) {
                    console.error('? [POST-PRINT] Error handling form response:', error);
                    if (typeof window.PrintTracking !== 'undefined' && typeof window.PrintTracking.showToast === 'function') {
                        window.PrintTracking.showToast('Error processing response', 'error');
                    }
                }
            });
        }
    }

    // PHASE 4: Enhanced JavaScript for performance tracking
    PostPrintModal.loadJobDetails = async function() {
        const select = document.getElementById('SelectedJobId');
        const jobId = select.value;
        
        if (!jobId) {
            PostPrintModal.clearJobDetails();
            return;
        }

        try {
            // Show loading state
            select.disabled = true;
            
            // Get job details from server
            const response = await fetch(`/PrintTracking?handler=JobDetails&jobId=${jobId}`);
            const data = await response.json();
            
            if (data.success) {
                // Auto-populate form fields
                PostPrintModal.populateFormFromJob(data);
                
                // Show success message
                PostPrintModal.showJobLoadedMessage(data.partNumber, data.machineId);
            } else {
                console.error('Error loading job details:', data.error);
                PostPrintModal.showToast('Error loading job details', 'error');
            }
        } catch (error) {
            console.error('Error loading job details:', error);
            PostPrintModal.showToast('Error loading job details', 'error');
        } finally {
            select.disabled = false;
        }
    };

    // Populate form fields from job data
    PostPrintModal.populateFormFromJob = function(jobData) {
        // Basic job information
        const printerNameSelect = document.getElementById('PrinterName');
        if (printerNameSelect) {
            printerNameSelect.value = jobData.machineId || '';
        }
        
        // Times
        if (jobData.actualStart) {
            const actualStartInput = document.getElementById('ActualStartTime');
            if (actualStartInput) {
                actualStartInput.value = jobData.actualStart;
            }
        }
        
        // Hidden fields for job context
        const jobIdInput = document.querySelector('input[name="JobId"]') || PostPrintModal.createHiddenInput('JobId');
        jobIdInput.value = jobData.jobId;
        
        const partIdInput = document.querySelector('input[name="PartId"]') || PostPrintModal.createHiddenInput('PartId');
        partIdInput.value = jobData.partId || '';
        
        const partNumberInput = document.querySelector('input[name="PartNumber"]') || PostPrintModal.createHiddenInput('PartNumber');
        partNumberInput.value = jobData.partNumber || '';
        
        const partDescriptionInput = document.querySelector('input[name="PartDescription"]') || PostPrintModal.createHiddenInput('PartDescription');
        partDescriptionInput.value = jobData.partDescription || '';
        
        // Build ID if available
        if (jobData.buildId) {
            const buildIdInput = document.querySelector('input[name="BuildId"]') || PostPrintModal.createHiddenInput('BuildId');
            buildIdInput.value = jobData.buildId;
        }
        
        // Operator estimates if available
        if (jobData.operatorEstimatedHours) {
            const estimatedHoursInput = document.querySelector('input[name="OperatorEstimatedHours"]') || PostPrintModal.createHiddenInput('OperatorEstimatedHours');
            estimatedHoursInput.value = jobData.operatorEstimatedHours;
        }

        // Auto-populate parts list
        PostPrintModal.populatePartsFromJob(jobData);
        
        // Recalculate times
        PostPrintModal.calculateActualTime();
        PostPrintModal.updatePerformanceCalculations();
    };

    // Populate parts list from job data
    PostPrintModal.populatePartsFromJob = function(jobData) {
        // Clear existing parts except the first one
        const container = document.getElementById('parts-container');
        
        if (container) {
            // Clear all parts
            container.innerHTML = '';
            PostPrintModal.partIndex = 0;
            
            // Add the main job part
            PostPrintModal.addPartEntryWithData({
                partNumber: jobData.partNumber || '',
                quantity: jobData.quantity || 1,
                goodParts: jobData.quantity || 1,
                description: jobData.partDescription || '',
                material: jobData.material || '',
                isPrimary: true
            });
        }
    };
    
    // Add part entry with pre-populated data
    PostPrintModal.addPartEntryWithData = function(partData) {
        const container = document.getElementById('parts-container');
        if (!container) return;
        
        const newEntry = document.createElement('div');
        newEntry.className = 'part-entry border border-gray-200 rounded-lg p-4 bg-gray-50';
        newEntry.innerHTML = `
            <div class="grid grid-cols-1 md:grid-cols-5 gap-3 items-center">
                <div class="md:col-span-2">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Part Number</label>
                    <input type="text" 
                           name="Parts[${PostPrintModal.partIndex}].PartNumber" 
                           value="${partData.partNumber || ''}"
                           list="available-parts"
                           required
                           placeholder="Enter or select part number"
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm">
                </div>
                <div>
                    <label class="block text-xs font-medium text-gray-700 mb-1">Total Quantity</label>
                    <input type="number" 
                           name="Parts[${PostPrintModal.partIndex}].Quantity" 
                           value="${partData.quantity || 1}"
                           min="1" 
                           required
                           onchange="PostPrintModal.updatePartQuality(${PostPrintModal.partIndex})"
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm">
                </div>
                <div>
                    <label class="block text-xs font-medium text-gray-700 mb-1">Good Parts</label>
                    <input type="number" 
                           name="Parts[${PostPrintModal.partIndex}].GoodParts" 
                           value="${partData.goodParts || partData.quantity || 1}"
                           min="0" 
                           onchange="PostPrintModal.updatePartQuality(${PostPrintModal.partIndex})"
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 text-sm">
                </div>
                <div class="flex items-center justify-between">
                    <label class="flex items-center">
                        <input type="checkbox" 
                               name="Parts[${PostPrintModal.partIndex}].IsPrimary" 
                               value="true"
                               ${partData.isPrimary ? 'checked' : ''}
                               class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <span class="ml-2 text-xs text-gray-700">Primary</span>
                    </label>
                    ${PostPrintModal.partIndex > 0 ? `
                    <button type="button" onclick="PostPrintModal.removePartEntry(this)" 
                            class="text-red-600 hover:text-red-800">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </button>
                    ` : ''}
                </div>
            </div>
            <div class="mt-2 text-xs text-gray-600" id="qualityRate_${PostPrintModal.partIndex}">
                Quality Rate: ${partData.quantity > 0 ? ((partData.goodParts || partData.quantity) / partData.quantity * 100).toFixed(1) : 100.0}%
            </div>
            ${partData.description ? `
            <input type="hidden" name="Parts[${PostPrintModal.partIndex}].Description" value="${partData.description}">
            ` : ''}
            ${partData.material ? `
            <input type="hidden" name="Parts[${PostPrintModal.partIndex}].Material" value="${partData.material}">
            ` : ''}
        `;
        
        container.appendChild(newEntry);
        PostPrintModal.partIndex++;
        
        // Update quality rate
        PostPrintModal.updatePartQuality(PostPrintModal.partIndex - 1);
    };

    // Add new part entry
    PostPrintModal.addPartEntry = function() {
        PostPrintModal.addPartEntryWithData({
            partNumber: '',
            quantity: 1,
            goodParts: 1,
            isPrimary: false
        });
    };

    // Remove part entry
    PostPrintModal.removePartEntry = function(button) {
        const entry = button.closest('.part-entry');
        if (entry) {
            entry.remove();
        }
    };

    // Update part quality rate
    PostPrintModal.updatePartQuality = function(index) {
        const quantityInput = document.querySelector(`input[name="Parts[${index}].Quantity"]`);
        const goodPartsInput = document.querySelector(`input[name="Parts[${index}].GoodParts"]`);
        const qualityRateDisplay = document.getElementById(`qualityRate_${index}`);
        
        if (quantityInput && goodPartsInput && qualityRateDisplay) {
            const quantity = parseInt(quantityInput.value) || 0;
            const goodParts = parseInt(goodPartsInput.value) || 0;
            const qualityRate = quantity > 0 ? (goodParts / quantity * 100).toFixed(1) : 100.0;
            qualityRateDisplay.textContent = `Quality Rate: ${qualityRate}%`;
        }
    };

    // Clear job details when no job selected
    PostPrintModal.clearJobDetails = function() {
        // Clear form fields
        const printerNameSelect = document.getElementById('PrinterName');
        if (printerNameSelect) {
            printerNameSelect.value = '';
        }
        
        const actualStartInput = document.getElementById('ActualStartTime');
        if (actualStartInput) {
            actualStartInput.value = '';
        }
        
        // Clear hidden inputs
        PostPrintModal.removeHiddenInput('JobId');
        PostPrintModal.removeHiddenInput('PartId');
        PostPrintModal.removeHiddenInput('PartNumber');
        PostPrintModal.removeHiddenInput('PartDescription');
        PostPrintModal.removeHiddenInput('BuildId');
        PostPrintModal.removeHiddenInput('OperatorEstimatedHours');
        
        // Reset parts to default single entry
        const container = document.getElementById('parts-container');
        if (container) {
            container.innerHTML = '';
            PostPrintModal.partIndex = 0;
            PostPrintModal.addPartEntry();
        }
    };

    // Helper function to create hidden input
    PostPrintModal.createHiddenInput = function(name) {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = name;
        const form = document.querySelector('form');
        if (form) {
            form.appendChild(input);
        }
        return input;
    };

    // Helper function to remove hidden input
    PostPrintModal.removeHiddenInput = function(name) {
        const input = document.querySelector(`input[name="${name}"]`);
        if (input && input.type === 'hidden') {
            input.remove();
        }
    };

    // Calculate actual time
    PostPrintModal.calculateActualTime = function() {
        const startInput = document.getElementById('ActualStartTime');
        const endInput = document.getElementById('ActualEndTime');
        const actualHoursInput = document.getElementById('OperatorActualHours');
        
        if (startInput && endInput && actualHoursInput && startInput.value && endInput.value) {
            const startTime = new Date(startInput.value);
            const endTime = new Date(endInput.value);
            const diffMs = endTime - startTime;
            const diffHours = diffMs / (1000 * 60 * 60);
            
            if (diffHours > 0) {
                // CRITICAL FIX: Format decimal properly with dot notation
                actualHoursInput.value = diffHours.toFixed(2);
                console.log('?? [POST-PRINT] Calculated time difference:', diffHours.toFixed(2), 'hours');
                PostPrintModal.updatePerformanceCalculations();
            }
        }
    };

    // Update performance calculations
    PostPrintModal.updatePerformanceCalculations = function() {
        // This would calculate variance and update displays
        console.log('?? [POST-PRINT] Updating performance calculations');
    };

    // Handle reason change
    PostPrintModal.handleReasonChange = function() {
        console.log('?? [POST-PRINT] Reason changed');
    };

    // Toggle optional details
    PostPrintModal.toggleOptionalDetails = function() {
        const details = document.getElementById('optional-details');
        const chevron = document.getElementById('optional-chevron');
        
        if (details && chevron) {
            if (details.classList.contains('hidden')) {
                details.classList.remove('hidden');
                chevron.classList.add('rotate-180');
            } else {
                details.classList.add('hidden');
                chevron.classList.remove('rotate-180');
            }
        }
    };

    // Show job loaded success message
    PostPrintModal.showJobLoadedMessage = function(partNumber, machineId) {
        const message = `? Job loaded: ${partNumber} on ${machineId}`;
        PostPrintModal.showToast(message, 'success');
    };

    // Toast notification fallback
    PostPrintModal.showToast = function(message, type = 'info') {
        if (typeof PrintTracking !== 'undefined' && PrintTracking.showToast) {
            PrintTracking.showToast(message, type);
        } else {
            // Simple fallback
            const colors = {
                success: 'bg-green-100 border-green-400 text-green-700',
                error: 'bg-red-100 border-red-400 text-red-700',
                info: 'bg-blue-100 border-blue-400 text-blue-700'
            };
            
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 ${colors[type] || colors.info} px-4 py-3 rounded border z-50`;
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }
    };

    // CRITICAL FIX: Provide global function aliases for backward compatibility
    window.loadJobDetails = PostPrintModal.loadJobDetails;
    window.addPartEntry = PostPrintModal.addPartEntry;
    window.removePartEntry = PostPrintModal.removePartEntry;
    window.updatePartQuality = PostPrintModal.updatePartQuality;
    window.calculateActualTime = PostPrintModal.calculateActualTime;
    window.updatePerformanceCalculations = PostPrintModal.updatePerformanceCalculations;
    window.handleReasonChange = PostPrintModal.handleReasonChange;
    window.toggleOptionalDetails = PostPrintModal.toggleOptionalDetails;

    // CRITICAL: Initialize form submission handling
    setTimeout(() => {
        handleFormSubmission();
        console.log('? [POST-PRINT] Form submission handler initialized');
    }, 100);

    console.log('? [POST-PRINT] PostPrintModal initialized successfully');
    PostPrintModal.initialized = true;
})();
</script>