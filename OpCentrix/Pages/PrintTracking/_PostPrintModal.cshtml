@using OpCentrix.ViewModels.PrintTracking
@model PostPrintViewModel

<!-- Post-Print Log Modal -->
<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" id="post-print-modal">
    <div class="relative top-10 mx-auto p-5 border w-11/12 md:w-4/5 lg:w-3/4 xl:w-2/3 shadow-lg rounded-md bg-white max-h-screen overflow-y-auto">
        <div class="mt-3">
            <!-- Header -->
            <div class="flex items-center justify-between pb-4 border-b">
                <h3 class="text-lg font-semibold text-gray-900">Complete Print Job</h3>
                <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Form -->
            <form hx-post="/PrintTracking?handler=CompletePrint" 
                  hx-target="#modal-container" 
                  hx-swap="innerHTML"
                  class="mt-6 space-y-6">
                
                @Html.AntiForgeryToken()
                
                @if (Model.BuildId.HasValue)
                {
                    <input type="hidden" name="BuildId" value="@Model.BuildId" />
                }

                <!-- Operator Info -->
                <div class="bg-blue-50 p-4 rounded-lg">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 text-blue-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="text-sm font-medium text-blue-900">Operator: @Model.OperatorName</span>
                    </div>
                </div>

                <!-- Basic Information Section -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Printer -->
                    <div>
                        <label for="PrinterName" class="block text-sm font-medium text-gray-700 mb-2">
                            Printer <span class="text-red-500">*</span>
                        </label>
                        <select name="PrinterName" id="PrinterName" required 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            @foreach (var printer in Model.AvailablePrinters)
                            {
                                <option value="@printer" selected="@(printer == Model.PrinterName)">@printer</option>
                            }
                        </select>
                    </div>

                    <!-- Reason for End -->
                    <div>
                        <label for="ReasonForEnd" class="block text-sm font-medium text-gray-700 mb-2">
                            Reason for End <span class="text-red-500">*</span>
                        </label>
                        <select name="ReasonForEnd" id="ReasonForEnd" required 
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">Select reason</option>
                            @foreach (var reason in Model.EndReasons)
                            {
                                <option value="@reason" selected="@(reason == Model.ReasonForEnd)">@reason</option>
                            }
                        </select>
                    </div>

                    <!-- Actual Start Time -->
                    <div>
                        <label for="ActualStartTime" class="block text-sm font-medium text-gray-700 mb-2">
                            Actual Start Time <span class="text-red-500">*</span>
                        </label>
                        <input type="datetime-local" 
                               name="ActualStartTime" 
                               id="ActualStartTime" 
                               value="@Model.ActualStartTime.ToString("yyyy-MM-ddTHH:mm")" 
                               required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        <p class="mt-1 text-xs text-gray-500">Enter time from printer display</p>
                    </div>

                    <!-- Actual End Time -->
                    <div>
                        <label for="ActualEndTime" class="block text-sm font-medium text-gray-700 mb-2">
                            Actual End Time <span class="text-red-500">*</span>
                        </label>
                        <input type="datetime-local" 
                               name="ActualEndTime" 
                               id="ActualEndTime" 
                               value="@Model.ActualEndTime.ToString("yyyy-MM-ddTHH:mm")" 
                               required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        <p class="mt-1 text-xs text-gray-500">Enter time from printer display</p>
                    </div>
                </div>

                <!-- Part Numbers Section -->
                <div>
                    <div class="flex items-center justify-between mb-4">
                        <label class="block text-sm font-medium text-gray-700">
                            Part Numbers <span class="text-red-500">*</span>
                        </label>
                        <button type="button" onclick="addPartEntry()" 
                                class="text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700">
                            + Add Part
                        </button>
                    </div>
                    
                    <div id="parts-container" class="space-y-3">
                        @for (int i = 0; i < Model.Parts.Count; i++)
                        {
                            <div class="part-entry border border-gray-200 rounded-lg p-4 bg-gray-50">
                                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 items-center">
                                    <div class="md:col-span-2">
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Part Number</label>
                                        <input type="text" 
                                               name="Parts[@i].PartNumber" 
                                               value="@Model.Parts[i].PartNumber"
                                               list="available-parts"
                                               required
                                               placeholder="Enter or select part number"
                                               class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm">
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Quantity</label>
                                        <input type="number" 
                                               name="Parts[@i].Quantity" 
                                               value="@Model.Parts[i].Quantity"
                                               min="1" 
                                               required
                                               class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm">
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <label class="flex items-center">
                                            <input type="checkbox" 
                                                   name="Parts[@i].IsPrimary" 
                                                   value="true"
                                                   @(Model.Parts[i].IsPrimary || i == 0 ? "checked" : "")
                                                   class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                            <span class="ml-2 text-xs text-gray-700">Primary</span>
                                        </label>
                                        @if (i > 0)
                                        {
                                            <button type="button" onclick="removePartEntry(this)" 
                                                    class="text-red-600 hover:text-red-800">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Part Number Datalist -->
                    <datalist id="available-parts">
                        @foreach (var part in Model.AvailableParts)
                        {
                            <option value="@part.PartNumber">@part.Description</option>
                        }
                    </datalist>
                </div>

                <!-- Delay Information (if applicable) -->
                @if (Model.HasDelay && Model.DelayInfo != null)
                {
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <div class="flex items-center mb-3">
                            <svg class="w-5 h-5 text-yellow-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>
                            </svg>
                            <h4 class="text-sm font-medium text-yellow-800">Delay Detected (@Model.DelayInfo.DelayDuration minutes)</h4>
                        </div>

                        <input type="hidden" name="HasDelay" value="true" />
                        <input type="hidden" name="DelayInfo.DelayDuration" value="@Model.DelayInfo.DelayDuration" />

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label for="DelayReason" class="block text-sm font-medium text-gray-700 mb-2">
                                    Delay Reason <span class="text-red-500">*</span>
                                </label>
                                <select name="DelayInfo.DelayReason" id="DelayReason" required 
                                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-yellow-500 focus:ring-yellow-500">
                                    <option value="">Select delay reason</option>
                                    @foreach (var reason in Model.DelayInfo.AvailableReasons)
                                    {
                                        <option value="@reason" selected="@(reason == Model.DelayInfo.DelayReason)">@reason</option>
                                    }
                                </select>
                            </div>
                            <div>
                                <label for="DelayNotes" class="block text-sm font-medium text-gray-700 mb-2">
                                    Delay Notes (Optional)
                                </label>
                                <textarea name="DelayInfo.DelayNotes" 
                                          id="DelayNotes" 
                                          rows="2" 
                                          placeholder="Additional details about the delay..."
                                          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-yellow-500 focus:ring-yellow-500">@Model.DelayInfo.DelayNotes</textarea>
                            </div>
                        </div>
                    </div>
                }

                <!-- Optional Details (Collapsible) -->
                <div class="border border-gray-200 rounded-lg">
                    <button type="button" 
                            onclick="toggleOptionalDetails()" 
                            class="w-full flex justify-between items-center p-4 text-left hover:bg-gray-50">
                        <span class="text-sm font-medium text-gray-700">Optional Details (from printer summary)</span>
                        <svg id="optional-chevron" class="w-5 h-5 text-gray-400 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                    
                    <div id="optional-details" class="hidden p-4 border-t border-gray-200">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <label for="LaserRunTime" class="block text-sm font-medium text-gray-700 mb-2">
                                    Laser Run Time
                                </label>
                                <input type="text" 
                                       name="LaserRunTime" 
                                       id="LaserRunTime" 
                                       value="@Model.LaserRunTime"
                                       placeholder="e.g., 4h 23m"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            </div>
                            <div>
                                <label for="GasUsed_L" class="block text-sm font-medium text-gray-700 mb-2">
                                    Gas Used (L)
                                </label>
                                <input type="number" 
                                       name="GasUsed_L" 
                                       id="GasUsed_L" 
                                       value="@Model.GasUsed_L"
                                       step="0.1" 
                                       min="0"
                                       placeholder="0.0"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            </div>
                            <div>
                                <label for="PowderUsed_L" class="block text-sm font-medium text-gray-700 mb-2">
                                    Powder Used (L)
                                </label>
                                <input type="number" 
                                       name="PowderUsed_L" 
                                       id="PowderUsed_L" 
                                       value="@Model.PowderUsed_L"
                                       step="0.1" 
                                       min="0"
                                       placeholder="0.0"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            </div>
                        </div>
                        
                        <div class="mt-4">
                            <label for="Notes" class="block text-sm font-medium text-gray-700 mb-2">
                                Notes
                            </label>
                            <textarea name="Notes" 
                                      id="Notes" 
                                      rows="3" 
                                      placeholder="Any additional notes about the print job..."
                                      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">@Model.Notes</textarea>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="flex justify-end space-x-3 pt-6 border-t">
                    <button type="button" 
                            onclick="closeModal()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Complete Print
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    let partIndex = @Model.Parts.Count;

    function addPartEntry() {
        const container = document.getElementById('parts-container');
        const newEntry = document.createElement('div');
        newEntry.className = 'part-entry border border-gray-200 rounded-lg p-4 bg-gray-50';
        newEntry.innerHTML = `
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 items-center">
                <div class="md:col-span-2">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Part Number</label>
                    <input type="text" 
                           name="Parts[${partIndex}].PartNumber" 
                           list="available-parts"
                           required
                           placeholder="Enter or select part number"
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm">
                </div>
                <div>
                    <label class="block text-xs font-medium text-gray-700 mb-1">Quantity</label>
                    <input type="number" 
                           name="Parts[${partIndex}].Quantity" 
                           value="1"
                           min="1" 
                           required
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm">
                </div>
                <div class="flex items-center justify-between">
                    <label class="flex items-center">
                        <input type="checkbox" 
                               name="Parts[${partIndex}].IsPrimary" 
                               value="true"
                               class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <span class="ml-2 text-xs text-gray-700">Primary</span>
                    </label>
                    <button type="button" onclick="removePartEntry(this)" 
                            class="text-red-600 hover:text-red-800">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </button>
                </div>
            </div>
        `;
        container.appendChild(newEntry);
        partIndex++;
    }

    function removePartEntry(button) {
        button.closest('.part-entry').remove();
    }

    function toggleOptionalDetails() {
        const details = document.getElementById('optional-details');
        const chevron = document.getElementById('optional-chevron');
        
        if (details.classList.contains('hidden')) {
            details.classList.remove('hidden');
            chevron.classList.add('rotate-180');
        } else {
            details.classList.add('hidden');
            chevron.classList.remove('rotate-180');
        }
    }

    // Handle form submission response
    document.body.addEventListener('htmx:afterRequest', function(event) {
        if (event.detail.xhr.responseURL.includes('CompletePrint')) {
            try {
                const response = JSON.parse(event.detail.xhr.responseText);
                if (response.success) {
                    closeModal();
                    showToast(response.message, 'success');
                    refreshDashboard();
                } else {
                    showToast(response.message, 'error');
                }
            } catch (e) {
                // If not JSON response, it's likely the form with validation errors
                // Do nothing, let HTMX handle the swap
            }
        }
    });

    // Focus on printer dropdown when modal opens
    document.getElementById('PrinterName').focus();
</script>