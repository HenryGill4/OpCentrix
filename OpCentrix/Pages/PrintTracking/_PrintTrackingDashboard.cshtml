@using OpCentrix.ViewModels.PrintTracking
@model PrintTrackingDashboardViewModel

<!-- Enhanced Print Tracking Dashboard with Role-Based Views and SLS Machine Focus -->
<div class="space-y-6">
    <!-- Role-Based Header with Different Information -->
    @if (ViewBag.IsAdminView == true)
    {
        <!-- Admin View Header - More detailed information -->
        <div class="bg-gradient-to-r from-blue-600 to-blue-800 rounded-lg p-6 text-white">
            <div class="flex items-center justify-between">
                <div>
                    <h2 class="text-2xl font-bold">SLS Print Tracking - Administrator View</h2>
                    <p class="text-blue-100 mt-1">Complete system oversight and control</p>
                </div>
                <div class="text-right">
                    <div class="text-sm text-blue-100">Logged in as</div>
                    <div class="font-medium">@Model.OperatorName (@Model.UserRole)</div>
                    <div class="text-xs text-blue-200 mt-1">Full system access</div>
                </div>
            </div>
            
            <!-- Quick Actions for Admins -->
            <div class="mt-4 flex space-x-3">
                <button onclick="openSchedulerIntegrationPanel()" 
                        class="bg-blue-700 hover:bg-blue-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                    ?? Scheduler Integration
                </button>
                <button onclick="refreshAllData()" 
                        class="bg-blue-700 hover:bg-blue-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                    ?? Refresh All Data
                </button>
                <a href="/Admin/Machines" 
                   class="bg-blue-700 hover:bg-blue-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                    ?? Manage Machines
                </a>
            </div>
        </div>
    }
    else
    {
        <!-- Operator View Header - Simplified and focused -->
        <div class="bg-gradient-to-r from-green-600 to-green-800 rounded-lg p-6 text-white">
            <div class="flex items-center justify-between">
                <div>
                    <h2 class="text-2xl font-bold">SLS Print Operations</h2>
                    <p class="text-green-100 mt-1">Your daily print tracking dashboard</p>
                </div>
                <div class="text-right">
                    <div class="text-sm text-green-100">Operator</div>
                    <div class="font-medium text-lg">@Model.OperatorName</div>
                    <div class="text-xs text-green-200 mt-1">@DateTime.Now.ToString("MMMM dd, yyyy")</div>
                </div>
            </div>
            
            <!-- Quick Actions for Operators -->
            <div class="mt-4 flex space-x-3">
                <button onclick="quickStartPrint()" 
                        class="bg-green-700 hover:bg-green-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                    ?? Quick Start Print
                </button>
                <button onclick="viewMySchedule()" 
                        class="bg-green-700 hover:bg-green-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                    ?? My Schedule
                </button>
            </div>
        </div>
    }

    <!-- Quick Stats with Role-Based Information -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Active SLS Builds</dt>
                            <dd class="text-lg font-medium text-gray-900">@Model.ActiveBuilds.Count</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Completed Today</dt>
                            <dd class="text-lg font-medium text-gray-900">@Model.RecentCompletedBuilds.Count</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <svg class="h-6 w-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">SLS Hours Today</dt>
                            <dd class="text-lg font-medium text-gray-900">@Model.HoursToday.Values.Sum().ToString("F1")</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <svg class="h-6 w-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">@(ViewBag.IsAdminView == true ? "Total Delays" : "Issues Today")</dt>
                            <dd class="text-lg font-medium text-gray-900">@Model.TotalDelaysToday</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- SLS Machine Status Overview with Role-Based Features -->
    <div class="bg-white shadow rounded-lg">
        <div class="px-4 py-5 sm:p-6">
            <div class="flex items-center justify-between mb-4">
                <div>
                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                        SLS Machine Status
                        @if (Model.AvailableMachines?.Any() == true)
                        {
                            <span class="text-sm text-gray-500 font-normal">(@Model.AvailableMachines.Count machines)</span>
                        }
                    </h3>
                    <p class="text-sm text-gray-600 mt-1">Selective Laser Sintering printers only</p>
                </div>
                <div class="flex items-center space-x-3">
                    @if (ViewBag.IsAdminView == true)
                    {
                        <!-- Admin-only controls -->
                        <a href="/Admin/Machines" class="text-sm text-blue-600 hover:text-blue-500 flex items-center">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            Manage Machines
                        </a>
                    }
                    <button data-action="toggle-schedule" 
                            class="text-sm text-blue-600 hover:text-blue-500 flex items-center">
                        <span id="schedule-toggle-text">Show Schedule</span>
                        <svg id="schedule-chevron" class="w-4 h-4 ml-1 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Embedded Schedule View (Hidden by default) -->
            <div id="schedule-overview" class="hidden mb-6">
                <div class="border rounded-lg overflow-hidden">
                    <div hx-get="/PrintTracking?handler=EmbeddedView" 
                         hx-trigger="revealed, every 5m"
                         hx-target="this"
                         hx-swap="innerHTML">
                        <div class="p-4 text-center text-gray-500">
                            <svg class="animate-spin h-5 w-5 mx-auto mb-2" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Loading SLS schedule...
                        </div>
                    </div>
                </div>
            </div>

            <!-- SLS Machine Grid with Role-Based Information -->
            <div id="schedule-summary">
                @if (Model.AvailableMachines?.Any() == true)
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                        @foreach (var machine in Model.AvailableMachines.OrderBy(m => m.Priority))
                        {
                            var activeCount = Model.ActiveJobsByPrinter.GetValueOrDefault(machine.MachineId, 0);
                            var hoursToday = Model.HoursToday.GetValueOrDefault(machine.MachineId, 0);
                            var queuedJobs = Model.QueueDepth.GetValueOrDefault(machine.MachineId, 0);
                            var utilization = Model.UtilizationByMachine.GetValueOrDefault(machine.MachineId, 0);

                            <div class="border rounded-lg p-4 hover:shadow-md transition-shadow duration-200 @GetMachineCardClasses(machine.Status)">
                                <!-- Machine Header -->
                                <div class="flex items-center justify-between mb-3">
                                    <div>
                                        <h4 class="font-medium text-gray-900 flex items-center">
                                            @machine.MachineId
                                            @if (machine.Priority <= 2)
                                            {
                                                <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                    Priority
                                                </span>
                                            }
                                            <!-- SLS Machine Indicator -->
                                            <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                SLS
                                            </span>
                                        </h4>
                                        <p class="text-sm text-gray-500">@machine.MachineName</p>
                                        @if (ViewBag.IsAdminView == true && !string.IsNullOrEmpty(machine.Location))
                                        {
                                            <p class="text-xs text-gray-400">?? @machine.Location</p>
                                        }
                                    </div>
                                    <div class="text-right">
                                        <span class="@GetStatusBadgeClasses(machine.Status) px-2 py-1 text-xs font-medium rounded-full">
                                            @machine.Status
                                        </span>
                                    </div>
                                </div>

                                <!-- Machine Stats - Role-Based Display -->
                                <div class="space-y-2 mb-3">
                                    <div class="flex justify-between text-sm">
                                        <span class="text-gray-600">Hours today:</span>
                                        <span class="font-medium">@hoursToday.ToString("F1")h</span>
                                    </div>
                                    
                                    @if (activeCount > 0)
                                    {
                                        <div class="flex justify-between text-sm">
                                            <span class="text-gray-600">Active builds:</span>
                                            <span class="font-medium text-green-600">@activeCount</span>
                                        </div>
                                    }
                                    
                                    @if (queuedJobs > 0)
                                    {
                                        <div class="flex justify-between text-sm">
                                            <span class="text-gray-600">@(ViewBag.IsAdminView == true ? "Queued jobs:" : "Upcoming:"):</span>
                                            <span class="font-medium text-blue-600">@queuedJobs</span>
                                        </div>
                                    }

                                    @if (ViewBag.IsAdminView == true && utilization > 0)
                                    {
                                        <!-- Admin-only utilization display -->
                                        <div class="space-y-1">
                                            <div class="flex justify-between text-sm">
                                                <span class="text-gray-600">Utilization:</span>
                                                <span class="font-medium">@utilization.ToString("F1")%</span>
                                            </div>
                                            <div class="w-full bg-gray-200 rounded-full h-2">
                                                <div class="@GetUtilizationBarClass(utilization) h-2 rounded-full" style="width: @Math.Min(100, utilization)%"></div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <!-- Material Information (Important for SLS) -->
                                @if (!string.IsNullOrEmpty(machine.CurrentMaterial))
                                {
                                    <div class="mb-3 px-2 py-1 bg-gray-100 rounded text-xs">
                                        <span class="font-medium text-gray-700">Material:</span> 
                                        <span class="text-gray-600">@machine.CurrentMaterial</span>
                                    </div>
                                }

                                <!-- Maintenance Alert -->
                                @if (machine.MaintenanceStatus == "Due")
                                {
                                    <div class="mb-3 px-2 py-1 bg-red-100 text-red-800 rounded text-xs">
                                        <svg class="w-3 h-3 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                        </svg>
                                        @(ViewBag.IsAdminView == true ? "Maintenance Due" : "Needs Service")
                                    </div>
                                }
                                else if (machine.MaintenanceStatus == "Soon")
                                {
                                    <div class="mb-3 px-2 py-1 bg-yellow-100 text-yellow-800 rounded text-xs">
                                        <svg class="w-3 h-3 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                        </svg>
                                        @(ViewBag.IsAdminView == true ? "Maintenance Soon" : "Service Soon")
                                    </div>
                                }

                                <!-- Action Buttons - Role-Based -->
                                <div class="flex space-x-2">
                                    @if (machine.IsActive && machine.IsAvailableForScheduling)
                                    {
                                        <button data-action="start-print" data-printer="@machine.MachineId" 
                                                class="flex-1 text-xs px-2 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition-colors duration-200">
                                            @(ViewBag.IsAdminView == true ? "Start Print" : "Start Build")
                                        </button>
                                        
                                        @if (activeCount > 0)
                                        {
                                            <button data-action="complete-print" data-printer="@machine.MachineId" 
                                                    class="flex-1 text-xs px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700 transition-colors duration-200">
                                                @(ViewBag.IsAdminView == true ? "Complete" : "Finish")
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        <div class="flex-1 text-xs px-2 py-1 bg-gray-300 text-gray-500 rounded text-center">
                                            @(machine.IsActive ? "Unavailable" : "Offline")
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <!-- No SLS machines available -->
                    <div class="text-center py-8">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 11.172V5l-1-1z"></path>
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">No SLS Machines Available</h3>
                        <p class="mt-1 text-sm text-gray-500">No active SLS machines found for print tracking.</p>
                        @if (ViewBag.IsAdminView == true)
                        {
                            <div class="mt-6">
                                <a href="/Admin/Machines" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                                    Configure SLS Machines
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="mt-6">
                                <p class="text-sm text-gray-500">Please contact your supervisor if machines should be available.</p>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Active SLS Builds (Enhanced with Role-Based Information) -->
    @if (Model.ActiveBuilds.Any())
    {
        <div class="bg-white shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                    Active SLS Builds
                    @if (ViewBag.IsAdminView == true)
                    {
                        <span class="text-sm text-gray-500 font-normal ml-2">(Administrator View)</span>
                    }
                </h3>
                <div class="space-y-4">
                    @foreach (var build in Model.ActiveBuilds)
                    {
                        var duration = DateTime.Now - build.ActualStartTime;
                        var machine = Model.AvailableMachines?.FirstOrDefault(m => m.MachineId == build.PrinterName);
                        
                        <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow duration-200">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-4">
                                    <div class="flex-shrink-0">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                            @build.PrinterName (SLS)
                                        </span>
                                    </div>
                                    <div>
                                        <h4 class="text-sm font-medium text-gray-900">
                                            @(ViewBag.IsAdminView == true ? $"Build #{build.BuildId}" : "Active Build")
                                            @if (!string.IsNullOrEmpty(build.Part?.PartNumber))
                                            {
                                                <span class="text-gray-500">- @build.Part.PartNumber</span>
                                            }
                                        </h4>
                                        <div class="text-sm text-gray-500">
                                            <span>Started: @build.ActualStartTime.ToString("MM/dd HH:mm")</span>
                                            @if (ViewBag.IsAdminView == true && build.User != null)
                                            {
                                                <span class="ml-2">by @build.User.FullName</span>
                                            }
                                        </div>
                                        @if (machine != null && !string.IsNullOrEmpty(machine.Location) && ViewBag.IsAdminView == true)
                                        {
                                            <div class="text-xs text-gray-400">Location: @machine.Location</div>
                                        }
                                    </div>
                                </div>
                                <div class="flex items-center space-x-4">
                                    <div class="text-right">
                                        <div class="text-sm font-medium text-gray-900">
                                            @duration.TotalHours.ToString("F1")h
                                        </div>
                                        @if (build.OperatorEstimatedHours.HasValue)
                                        {
                                            <div class="text-xs text-gray-500">
                                                Est: @build.OperatorEstimatedHours.Value.ToString("F1")h
                                            </div>
                                        }
                                    </div>
                                    <button data-action="complete-print" data-build-id="@build.BuildId" 
                                            class="inline-flex items-center px-3 py-1 border border-transparent text-xs leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 transition-colors duration-200">
                                        @(ViewBag.IsAdminView == true ? "Complete Build" : "Finish")
                                    </button>
                                </div>
                            </div>
                            
                            @if (build.OperatorEstimatedHours.HasValue)
                            {
                                var progressPercent = Math.Min(100, (duration.TotalHours / (double)build.OperatorEstimatedHours.Value) * 100);
                                <div class="mt-3">
                                    <div class="flex justify-between text-xs text-gray-600 mb-1">
                                        <span>@(ViewBag.IsAdminView == true ? "Progress (estimated)" : "Build Progress")</span>
                                        <span>@progressPercent.ToString("F0")%</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2">
                                        <div class="@(progressPercent > 100 ? "bg-red-500" : progressPercent > 80 ? "bg-yellow-500" : "bg-blue-500") h-2 rounded-full transition-all duration-300" 
                                             style="width: @Math.Min(100, progressPercent)%"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <!-- Recent Activity Grid with Role-Based Content -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Recent Completed SLS Builds -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Recent SLS Completions</h3>
                @if (Model.RecentCompletedBuilds.Any())
                {
                    <div class="space-y-3">
                        @foreach (var build in Model.RecentCompletedBuilds.Take(5))
                        {
                            <div class="flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0">
                                <div>
                                    <div class="text-sm font-medium text-gray-900">
                                        @if (ViewBag.IsAdminView == true)
                                        {
                                            <span>#@build.BuildId - @build.PrinterName</span>
                                        }
                                        else
                                        {
                                            <span>@build.PrinterName Build</span>
                                        }
                                        @if (!string.IsNullOrEmpty(build.Part?.PartNumber))
                                        {
                                            <span class="text-gray-500">(@build.Part.PartNumber)</span>
                                        }
                                    </div>
                                    <div class="text-xs text-gray-500">
                                        @(build.CompletedAt?.ToString("HH:mm") ?? "Unknown") 
                                        (@(build.PrintDuration?.TotalHours.ToString("F1") ?? "?")h)
                                        @if (build.User != null && ViewBag.IsAdminView == true)
                                        {
                                            <span class="ml-1">by @build.User.FullName</span>
                                        }
                                    </div>
                                </div>
                                <span class="px-2 py-1 text-xs font-medium rounded-full @GetStatusBadgeClasses(build.Status)">
                                    @build.Status
                                </span>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-sm text-gray-500">No SLS builds completed today</p>
                }
            </div>
        </div>

        <!-- Recent Issues/Delays -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                    @(ViewBag.IsAdminView == true ? "Recent Issues" : "Today's Issues")
                </h3>
                @if (Model.RecentDelays.Any())
                {
                    <div class="space-y-3">
                        @foreach (var delay in Model.RecentDelays.Take(5))
                        {
                            <div class="flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0">
                                <div>
                                    <div class="text-sm font-medium text-gray-900">@delay.DelayReason</div>
                                    <div class="text-xs text-gray-500">
                                        @if (ViewBag.IsAdminView == true)
                                        {
                                            <span>Build #@delay.BuildId - @delay.DelayDuration min</span>
                                        }
                                        else
                                        {
                                            <span>@delay.DelayDuration minutes delay</span>
                                        }
                                    </div>
                                </div>
                                <span class="px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800">
                                    @delay.CreatedAt.ToString("HH:mm")
                                </span>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-sm text-gray-500">No issues recorded today</p>
                }
            </div>
        </div>
    </div>

    <!-- Performance Metrics (Admin View Only) -->
    @if (ViewBag.IsAdminView == true && (Model.OverallEfficiency > 0 || Model.QualityScore > 0))
    {
        <div class="bg-white shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                    SLS Performance Metrics
                    <span class="text-sm text-gray-500 font-normal ml-2">(Administrator Only)</span>
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    @if (Model.OverallEfficiency > 0)
                    {
                        <div class="text-center">
                            <div class="text-2xl font-bold text-blue-600">@Model.OverallEfficiency.ToString("F1")%</div>
                            <div class="text-sm text-gray-500">SLS Fleet Efficiency</div>
                        </div>
                    }
                    @if (Model.QualityScore > 0)
                    {
                        <div class="text-center">
                            <div class="text-2xl font-bold text-green-600">@Model.QualityScore.ToString("F1")%</div>
                            <div class="text-sm text-gray-500">Print Quality Score</div>
                        </div>
                    }
                    @if (Model.PartsProducedToday > 0)
                    {
                        <div class="text-center">
                            <div class="text-2xl font-bold text-purple-600">@Model.PartsProducedToday</div>
                            <div class="text-sm text-gray-500">SLS Parts Produced</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@functions {
    private string GetMachineCardClasses(string status)
    {
        return status?.ToLower() switch
        {
            "running" or "building" => "border-orange-200 bg-orange-50",
            "idle" => "border-green-200 bg-green-50",
            "maintenance" => "border-gray-200 bg-gray-50",
            "error" or "offline" => "border-red-200 bg-red-50",
            _ => "border-gray-200"
        };
    }

    private string GetStatusBadgeClasses(string status)
    {
        return status?.ToLower() switch
        {
            "idle" => "bg-green-100 text-green-800",
            "running" or "building" => "bg-orange-100 text-orange-800",
            "completed" => "bg-green-100 text-green-800",
            "maintenance" => "bg-gray-100 text-gray-800",
            "error" or "offline" => "bg-red-100 text-red-800",
            "aborted" => "bg-red-100 text-red-800",
            "setup" => "bg-blue-100 text-blue-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetUtilizationBarClass(double utilization)
    {
        return utilization switch
        {
            >= 90 => "bg-red-500",
            >= 70 => "bg-yellow-500",
            >= 50 => "bg-blue-500",
            _ => "bg-green-500"
        };
    }
}

<script>
// Enhanced Print Tracking Dashboard JavaScript with Scheduler Integration
(function() {
    'use strict';
    
    console.log('?? [PRINT-TRACKING] Initializing enhanced dashboard with scheduler integration');
    
    // Global print tracking object
    window.PrintTracking = window.PrintTracking || {};
    
    // Initialize dashboard
    window.PrintTracking.init = function() {
        setupScheduleToggle();
        setupPrintTrackingActions();
        setupAutoRefresh();
        setupSchedulerCommunication();
        console.log('? [PRINT-TRACKING] Dashboard initialized successfully');
    };
    
    // Schedule toggle functionality
    function setupScheduleToggle() {
        const toggleButton = document.querySelector('[data-action="toggle-schedule"]');
        const scheduleOverview = document.getElementById('schedule-overview');
        const toggleText = document.getElementById('schedule-toggle-text');
        const chevron = document.getElementById('schedule-chevron');
        
        if (toggleButton && scheduleOverview) {
            toggleButton.addEventListener('click', function(e) {
                e.preventDefault();
                
                if (scheduleOverview.classList.contains('hidden')) {
                    scheduleOverview.classList.remove('hidden');
                    toggleText.textContent = 'Hide Schedule';
                    chevron.classList.add('rotate-180');
                    
                    // Trigger HTMX load if content is empty
                    const htmxContainer = scheduleOverview.querySelector('[hx-get]');
                    if (htmxContainer && htmxContainer.innerHTML.trim() === '') {
                        htmx.trigger(htmxContainer, 'revealed');
                    }
                } else {
                    scheduleOverview.classList.add('hidden');
                    toggleText.textContent = 'Show Schedule';
                    chevron.classList.remove('rotate-180');
                }
            });
        }
    }
    
    // Print tracking action buttons
    function setupPrintTrackingActions() {
        // Start print buttons
        document.addEventListener('click', function(e) {
            if (e.target.matches('[data-action="start-print"]') || e.target.closest('[data-action="start-print"]')) {
                e.preventDefault();
                const button = e.target.matches('[data-action="start-print"]') ? e.target : e.target.closest('[data-action="start-print"]');
                const printerName = button.getAttribute('data-printer');
                handleStartPrint(printerName);
            }
            
            if (e.target.matches('[data-action="complete-print"]') || e.target.closest('[data-action="complete-print"]')) {
                e.preventDefault();
                const button = e.target.matches('[data-action="complete-print"]') ? e.target : e.target.closest('[data-action="complete-print"]');
                const printerName = button.getAttribute('data-printer');
                const buildId = button.getAttribute('data-build-id');
                handleCompletePrint(printerName, buildId);
            }
        });
    }
    
    // Auto refresh functionality
    function setupAutoRefresh() {
        const refreshInterval = 30000; // 30 seconds
        
        setInterval(function() {
            // Check if any modals are open
            const openModals = document.querySelectorAll('.modal:not(.hidden), [style*="display: flex"]');
            if (openModals.length > 0) {
                console.log('?? [AUTO-REFRESH] Skipping refresh - modal is open');
                return;
            }
            
            console.log('?? [AUTO-REFRESH] Refreshing dashboard data');
            
            // Use HTMX to refresh dashboard content
            if (typeof htmx !== 'undefined') {
                htmx.ajax('GET', '/PrintTracking?handler=RefreshDashboard', {
                    target: '#dashboard-content',
                    swap: 'innerHTML'
                }).catch((error) => {
                    console.warn('Auto-refresh failed (this is normal if page is navigating):', error);
                });
            }
        }, refreshInterval);
    }
    
    // Scheduler communication setup
    function setupSchedulerCommunication() {
        // Listen for scheduler messages
        window.addEventListener('message', function(e) {
            if (e.origin === window.location.origin) {
                const data = e.data;
                
                if (data.type === 'schedulerJobUpdated') {
                    handleSchedulerJobUpdate(data);
                } else if (data.type === 'requestPrintTrackingRefresh') {
                    refreshDashboard();
                }
            }
        });
        
        console.log('?? [SCHEDULER-COMM] Communication setup complete');
    }
    
    // Handle start print action
    function handleStartPrint(printerName) {
        console.log('?? [START-PRINT] Starting print for printer:', printerName);
        
        if (!printerName) {
            showToast('Error: No printer specified', 'error');
            return;
        }
        
        try {
            showLoadingIndicator('Loading start print form...');
            
            // Open start print modal
            if (typeof htmx !== 'undefined') {
                htmx.ajax('GET', `/PrintTracking?handler=StartPrintModal&printerName=${encodeURIComponent(printerName)}`, {
                    target: '#modal-container',
                    swap: 'innerHTML'
                }).then(() => {
                    showModal();
                    hideLoadingIndicator();
                }).catch((error) => {
                    hideLoadingIndicator();
                    console.error('? [START-PRINT] Error loading start print modal:', error);
                    showToast('Error loading start print form', 'error');
                });
            } else {
                hideLoadingIndicator();
                showToast('System error: HTMX not available', 'error');
            }
            
        } catch (error) {
            hideLoadingIndicator();
            console.error('? [START-PRINT] Error in handleStartPrint:', error);
            showToast('Error starting print process', 'error');
        }
    }
    
    // Handle complete print action
    function handleCompletePrint(printerName, buildId) {
        console.log('?? [COMPLETE-PRINT] Completing print for printer:', printerName, 'buildId:', buildId);
        
        if (!printerName && !buildId) {
            showToast('Error: No printer or build ID specified', 'error');
            return;
        }
        
        try {
            showLoadingIndicator('Loading completion form...');
            
            const params = new URLSearchParams();
            if (buildId) params.append('buildId', buildId);
            if (printerName) params.append('printerName', printerName);
            
            // Open complete print modal
            if (typeof htmx !== 'undefined') {
                htmx.ajax('GET', `/PrintTracking?handler=PostPrintModal&${params.toString()}`, {
                    target: '#modal-container',
                    swap: 'innerHTML'
                }).then(() => {
                    showModal();
                    hideLoadingIndicator();
                }).catch((error) => {
                    hideLoadingIndicator();
                    console.error('? [COMPLETE-PRINT] Error loading completion modal:', error);
                    showToast('Error loading completion form', 'error');
                });
            } else {
                hideLoadingIndicator();
                showToast('System error: HTMX not available', 'error');
            }
            
        } catch (error) {
            hideLoadingIndicator();
            console.error('? [COMPLETE-PRINT] Error in handleCompletePrint:', error);
            showToast('Error loading completion form', 'error');
        }
    }
    
    // Handle scheduler job updates
    function handleSchedulerJobUpdate(data) {
        console.log('?? [SCHEDULER-UPDATE] Received job update:', data);
        
        const { jobId, machineId, status, message } = data;
        
        if (message) {
            showToast(message, status === 'Completed' ? 'success' : 'info');
        }
        
        // Refresh relevant parts of the dashboard
        setTimeout(() => {
            refreshDashboard();
        }, 1000);
    }
    
    // Notification functions for print tracking events
    window.PrintTracking.notifyScheduler = function(eventType, data) {
        try {
            console.log('?? [NOTIFY-SCHEDULER] Sending notification:', eventType, data);
            
            // Send to scheduler windows via postMessage
            const schedulerWindows = window.parent !== window ? [window.parent] : [];
            
            // Also try localStorage for cross-tab communication
            const notification = {
                type: eventType,
                timestamp: Date.now(),
                ...data
            };
            
            localStorage.setItem('scheduleUpdateNotification', JSON.stringify(notification));
            
            // Send postMessage to scheduler windows
            schedulerWindows.forEach(win => {
                try {
                    win.postMessage(notification, window.location.origin);
                } catch (e) {
                    console.warn('Failed to send message to scheduler window:', e);
                }
            });
            
            console.log('? [NOTIFY-SCHEDULER] Notification sent successfully');
            
        } catch (error) {
            console.error('? [NOTIFY-SCHEDULER] Error sending notification:', error);
        }
    };
    
    // Enhanced toast notification system
    window.PrintTracking.showToast = function(message, type = 'info') {
        // Remove existing toasts
        const existingToasts = document.querySelectorAll('.print-tracking-toast');
        existingToasts.forEach(toast => toast.remove());
        
        const toast = document.createElement('div');
        toast.className = `print-tracking-toast fixed top-4 right-4 px-6 py-4 rounded-lg shadow-lg z-50 animate-slide-in-right`;
        
        const bgColor = type === 'success' ? 'bg-green-600' : 
                       type === 'error' ? 'bg-red-600' : 
                       type === 'warning' ? 'bg-yellow-600' : 'bg-blue-600';
        
        const icon = type === 'success' ? '?' : 
                    type === 'error' ? '?' : 
                    type === 'warning' ? '??' : '??';
        
        toast.className += ` ${bgColor} text-white`;
        
        toast.innerHTML = `
            <div class="flex items-center space-x-3">
                <span class="text-lg">${icon}</span>
                <span class="font-medium">${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white opacity-70 hover:opacity-100">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        ```
        
        document.body.appendChild(toast);
        
        // Auto remove after delay
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, type === 'error' ? 8000 : 5000);
    };
    
    // Modal management functions
    function showModal() {
        const modalContainer = document.getElementById('modal-container');
        if (modalContainer) {
            modalContainer.style.display = 'flex';
            modalContainer.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }
    }
    
    function hideModal() {
        const modalContainer = document.getElementById('modal-container');
        if (modalContainer) {
            modalContainer.style.display = 'none';
            modalContainer.classList.add('hidden');
            document.body.style.overflow = '';
            modalContainer.innerHTML = '';
        }
    }
    
    // Loading indicator functions
    function showLoadingIndicator(message = 'Loading...') {
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
            const messageSpan = indicator.querySelector('span');
            if (messageSpan) messageSpan.textContent = message;
            indicator.classList.remove('hidden');
        }
    }
    
    function hideLoadingIndicator() {
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
            indicator.classList.add('hidden');
        }
    }
    
    // Dashboard refresh function
    function refreshDashboard() {
        console.log('?? [REFRESH] Refreshing print tracking dashboard');
        
        if (typeof htmx !== 'undefined') {
            htmx.ajax('GET', '/PrintTracking?handler=RefreshDashboard', {
                target: '#dashboard-content',
                swap: 'innerHTML'
            }).then(() => {
                console.log('? [REFRESH] Dashboard refreshed successfully');
            }).catch((error) => {
                console.warn('?? [REFRESH] Dashboard refresh failed:', error);
            });
        }
    }
    
    // Expose functions globally for compatibility
    window.showToast = window.PrintTracking.showToast;
    window.handleStartPrint = handleStartPrint;
    window.handleCompletePrint = handleCompletePrint;
    window.refreshDashboard = refreshDashboard;
    
    // Admin-specific functions
    window.openSchedulerIntegrationPanel = function() {
        console.log('?? [ADMIN] Opening scheduler integration panel');
        window.open('/Scheduler', '_blank', 'width=1400,height=900,scrollbars=yes,resizable=yes');
    };
    
    window.refreshAllData = function() {
        console.log('?? [ADMIN] Refreshing all data');
        showLoadingIndicator('Refreshing all data...');
        refreshDashboard();
        setTimeout(hideLoadingIndicator, 2000);
    };
    
    // Operator-specific functions
    window.quickStartPrint = function() {
        console.log('?? [OPERATOR] Quick start print');
        // Find the first available SLS machine
        const availableMachine = document.querySelector('[data-action="start-print"]');
        if (availableMachine) {
            const printerName = availableMachine.getAttribute('data-printer');
            handleStartPrint(printerName);
        } else {
            showToast('No SLS machines available for quick start', 'warning');
        }
    };
    
    window.viewMySchedule = function() {
        console.log('?? [OPERATOR] View my schedule');
        window.open('/Scheduler', '_blank', 'width=1400,height=900,scrollbars=yes,resizable=yes');
    };
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', window.PrintTracking.init);
    } else {
        window.PrintTracking.init();
    }
    
})();
</script>