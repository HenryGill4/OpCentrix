@using OpCentrix.Models
@model OpCentrix.Models.JobStaging.JobStage

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-3">
                <div class="rounded-circle" style="width: 12px; height: 12px; background-color: @Model.DepartmentColor"></div>
                <h5 class="card-title mb-0">@Model.StageName</h5>
                <span class="badge" style="background-color: @Model.StatusColor; color: white;">
                    @Model.Status
                </span>
            </div>
            
            <div class="d-flex align-items-center gap-2">
                <small class="text-muted">Order: @Model.ExecutionOrder</small>
                @if (Model.IsOverdue)
                {
                    <span class="badge bg-danger">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        Overdue
                    </span>
                }
            </div>
        </div>
        
        <div class="row g-3 mb-3">
            <div class="col-md-3">
                <small class="text-muted fw-bold text-uppercase">Department</small>
                <div class="fw-medium">@Model.Department</div>
            </div>
            
            <div class="col-md-3">
                <small class="text-muted fw-bold text-uppercase">Machine</small>
                <div class="fw-medium">@(Model.MachineId ?? "Unassigned")</div>
            </div>
            
            <div class="col-md-3">
                <small class="text-muted fw-bold text-uppercase">Operator</small>
                <div class="fw-medium">@(Model.AssignedOperator ?? "Unassigned")</div>
            </div>
            
            <div class="col-md-3">
                <small class="text-muted fw-bold text-uppercase">Priority</small>
                <div class="fw-medium">@Model.Priority</div>
            </div>
        </div>
        
        <div class="row g-3 mb-3">
            <div class="col-md-6">
                <small class="text-muted fw-bold text-uppercase">Scheduled Start</small>
                <div>@Model.ScheduledStart.ToString("yyyy-MM-dd HH:mm")</div>
            </div>
            
            <div class="col-md-6">
                <small class="text-muted fw-bold text-uppercase">Scheduled End</small>
                <div>@Model.ScheduledEnd.ToString("yyyy-MM-dd HH:mm")</div>
            </div>
        </div>
        
        <div class="mb-3">
            <small class="text-muted fw-bold text-uppercase d-block">Progress</small>
            <div class="d-flex align-items-center mt-1">
                <div class="progress flex-grow-1 me-2" style="height: 8px;">
                    <div class="progress-bar transition-all duration-300"
                         style="width: @Model.ProgressPercent%; background-color: @Model.StatusColor;"
                         role="progressbar" 
                         aria-valuenow="@Model.ProgressPercent" 
                         aria-valuemin="0" 
                         aria-valuemax="100"></div>
                </div>
                <span class="fw-medium text-muted">@Model.ProgressPercent.ToString("F0")%</span>
            </div>
        </div>
        
        @if (Model.Dependencies.Any())
        {
            <div class="mb-3">
                <small class="text-muted fw-bold text-uppercase d-block">Dependencies</small>
                <div class="mt-1">
                    @foreach (var dependency in Model.Dependencies)
                    {
                        <div class="d-flex align-items-center small mb-1">
                            <div class="rounded-circle me-2" style="width: 8px; height: 8px; background-color: @dependency.RequiredStage.StatusColor"></div>
                            <span>Requires: @dependency.RequiredStage.StageName</span>
                            <span class="text-muted ms-2">(@dependency.DependencyType)</span>
                        </div>
                    }
                </div>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(Model.Notes))
        {
            <div class="mb-3">
                <small class="text-muted fw-bold text-uppercase d-block">Notes</small>
                <p class="small mb-0 mt-1">@Model.Notes</p>
            </div>
        }
        
        <div class="d-flex justify-content-between align-items-center pt-3 border-top">
            <div class="d-flex gap-2">
                @if (Model.Status == "Ready" || Model.Status == "Scheduled")
                {
                    <button type="button" 
                            class="btn btn-success btn-sm" 
                            onclick="startStage(@Model.Id)">
                        <i class="fas fa-play me-1"></i>
                        Start Stage
                    </button>
                }
                
                @if (Model.Status == "In-Progress")
                {
                    <button type="button" 
                            class="btn btn-info btn-sm" 
                            onclick="updateProgress(@Model.Id, @Model.ProgressPercent)">
                        <i class="fas fa-edit me-1"></i>
                        Update Progress
                    </button>
                    
                    <button type="button" 
                            class="btn btn-success btn-sm" 
                            onclick="completeStage(@Model.Id)">
                        <i class="fas fa-check me-1"></i>
                        Complete Stage
                    </button>
                }
            </div>
            
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-edit me-1"></i>
                    Edit
                </button>
                
                <button type="button" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-comment me-1"></i>
                    Add Note
                </button>
            </div>
        </div>
        
        @if (Model.StageNotes.Any())
        {
            <div class="mt-3 pt-3 border-top">
                <small class="text-muted fw-bold text-uppercase d-block mb-2">Stage Notes</small>
                <div>
                    @foreach (var note in Model.StageNotes.OrderByDescending(n => n.CreatedDate).Take(3))
                    {
                        <div class="d-flex align-items-start gap-2 mb-2">
                            <div class="rounded-circle mt-1" style="width: 8px; height: 8px; background-color: @note.NoteTypeColor"></div>
                            <div class="flex-grow-1">
                                <p class="small mb-1">@note.Note</p>
                                <p class="text-muted" style="font-size: 0.75rem;">@note.CreatedBy - @note.CreatedDate.ToString("MM/dd HH:mm")</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>