@using OpCentrix.Models
@model JobStage

<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-4">
    <div class="flex items-center justify-between mb-3">
        <div class="flex items-center space-x-3">
            <div class="w-3 h-3 rounded-full" style="background-color: @Model.DepartmentColor"></div>
            <h3 class="text-lg font-semibold text-gray-900">@Model.StageName</h3>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" 
                  style="background-color: @Model.StatusColor; color: white;">
                @Model.Status
            </span>
        </div>
        
        <div class="flex items-center space-x-2">
            <span class="text-sm text-gray-500">Order: @Model.ExecutionOrder</span>
            @if (Model.IsOverdue)
            {
                <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-red-100 text-red-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                    </svg>
                    Overdue
                </span>
            }
        </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
        <div>
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Department</label>
            <p class="text-sm font-medium text-gray-900">@Model.Department</p>
        </div>
        
        <div>
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Machine</label>
            <p class="text-sm font-medium text-gray-900">@(Model.MachineId ?? "Unassigned")</p>
        </div>
        
        <div>
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Operator</label>
            <p class="text-sm font-medium text-gray-900">@(Model.AssignedOperator ?? "Unassigned")</p>
        </div>
        
        <div>
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Priority</label>
            <p class="text-sm font-medium text-gray-900">@Model.Priority</p>
        </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Scheduled Start</label>
            <p class="text-sm text-gray-900">@Model.ScheduledStart.ToString("yyyy-MM-dd HH:mm")</p>
        </div>
        
        <div>
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Scheduled End</label>
            <p class="text-sm text-gray-900">@Model.ScheduledEnd.ToString("yyyy-MM-dd HH:mm")</p>
        </div>
    </div>
    
    <div class="mb-4">
        <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Progress</label>
        <div class="mt-1">
            <div class="flex items-center">
                <div class="flex-1 bg-gray-200 rounded-full h-2">
                    <div class="h-2 rounded-full transition-all duration-300"
                         style="width: @Model.ProgressPercent%; background-color: @Model.StatusColor;"></div>
                </div>
                <span class="ml-2 text-sm font-medium text-gray-700">@Model.ProgressPercent.ToString("F0")%</span>
            </div>
        </div>
    </div>
    
    @if (Model.Dependencies.Any())
    {
        <div class="mb-4">
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Dependencies</label>
            <div class="mt-1 space-y-1">
                @foreach (var dependency in Model.Dependencies)
                {
                    <div class="flex items-center text-sm">
                        <div class="w-2 h-2 rounded-full mr-2" style="background-color: @dependency.RequiredStage.StatusColor"></div>
                        <span class="text-gray-700">Requires: @dependency.RequiredStage.StageName</span>
                        <span class="ml-2 text-gray-500">(@dependency.DependencyType)</span>
                    </div>
                }
            </div>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(Model.Notes))
    {
        <div class="mb-4">
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Notes</label>
            <p class="text-sm text-gray-700 mt-1">@Model.Notes</p>
        </div>
    }
    
    <div class="flex justify-between items-center pt-4 border-t border-gray-200">
        <div class="flex space-x-2">
            @if (Model.Status == "Ready" || Model.Status == "Scheduled")
            {
                <button type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M19 10a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Start Stage
                </button>
            }
            
            @if (Model.Status == "In-Progress")
            {
                <button type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    Update Progress
                </button>
                
                <button type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    Complete Stage
                </button>
            }
        </div>
        
        <div class="flex space-x-2">
            <button type="button" class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                Edit
            </button>
            
            <button type="button" class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
                </svg>
                Add Note
            </button>
        </div>
    </div>
    
    @if (Model.StageNotes.Any())
    {
        <div class="mt-4 pt-4 border-t border-gray-200">
            <label class="text-xs font-medium text-gray-500 uppercase tracking-wide mb-2 block">Stage Notes</label>
            <div class="space-y-2">
                @foreach (var note in Model.StageNotes.OrderByDescending(n => n.CreatedDate).Take(3))
                {
                    <div class="flex items-start space-x-2">
                        <div class="w-2 h-2 rounded-full mt-2" style="background-color: @note.NoteTypeColor"></div>
                        <div class="flex-1">
                            <p class="text-sm text-gray-700">@note.Note</p>
                            <p class="text-xs text-gray-500 mt-1">@note.CreatedBy - @note.CreatedDate.ToString("MM/dd HH:mm")</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>