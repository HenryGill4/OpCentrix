@using OpCentrix.Models
@model OpCentrix.Models.ViewModels.AddEditJobViewModel

<div class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-40">
    <div class="rounded-2xl bg-white p-8 shadow-2xl min-w-[500px] max-w-lg w-full relative border border-indigo-100 max-h-[90vh] overflow-y-auto">
        <!-- Modal Header -->
        <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-bold text-gray-800">@Model.Title</h2>
            <button type="button" class="text-gray-400 hover:text-red-500 text-2xl font-bold transition" 
                    onclick="closeJobModal()"
                    aria-label="Close modal">
                &times;
            </button>
        </div>

        <!-- Error Messages -->
        @if (Model.Errors.Any())
        {
            <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <h3 class="text-red-800 font-semibold text-sm mb-2">Please fix the following errors:</h3>
                <ul class="text-red-600 text-sm list-disc pl-5">
                    @foreach (var err in Model.Errors)
                    {
                        <li>@err</li>
                    }
                </ul>
            </div>
        }

        <!-- Job Form -->
        <form method="post" 
              hx-post="/Scheduler?handler=AddOrUpdateJob"
              hx-include="#job-modal-form"
              hx-indicator="#loading-indicator"
              class="space-y-6"
              id="job-modal-form"
              novalidate>

            <input type="hidden" name="Job.Id" value="@Model.Job.Id" />

            <!-- Loading Indicator -->
            <div id="loading-indicator" class="htmx-indicator fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
                <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
                    <svg class="animate-spin h-6 w-6 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span class="text-gray-700 font-medium">Processing...</span>
                </div>
            </div>

            <!-- Machine and Part Selection -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2" for="modal-machine-select">
                        Machine <span class="text-red-500">*</span>
                    </label>
                    <select name="Job.MachineId" id="modal-machine-select" 
                            class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-300 focus:border-indigo-300" 
                            required>
                        @foreach (var m in new[]{"TI1","TI2","INC"})
                        {
                            <option value="@m" selected="@(Model.Job.MachineId==m ? "selected" : null)">@m</option>
                        }
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2" for="modal-part-select">
                        Part <span class="text-red-500">*</span>
                    </label>
                    <select name="Job.PartId" id="modal-part-select"
                            class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-300 focus:border-indigo-300" 
                            required>
                        <option value="">-- Select Part --</option>
                        @foreach (var part in Model.Parts)
                        {
                            <option value="@part.Id" 
                                    data-duration="@part.AvgDurationDays" 
                                    selected="@(Model.Job.PartId==part.Id ? "selected" : null)">
                                @part.PartNumber - @part.Description (@part.AvgDurationDays d)
                            </option>
                        }
                    </select>
                </div>
            </div>

            <!-- Start and End Times -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2" for="modal-start">
                        Start Time <span class="text-red-500">*</span>
                    </label>
                    <input type="datetime-local" name="Job.ScheduledStart" id="modal-start" 
                           value="@Model.Job.ScheduledStart.ToString("yyyy-MM-ddTHH:mm")" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-300 focus:border-indigo-300" 
                           required />
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2" for="modal-end">
                        End Time <span class="text-red-500">*</span>
                    </label>
                    <input type="datetime-local" name="Job.ScheduledEnd" id="modal-end" 
                           value="@Model.Job.ScheduledEnd.ToString("yyyy-MM-ddTHH:mm")" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-300 focus:border-indigo-300" 
                           required />
                </div>
            </div>

            <!-- Status and Quantity -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2" for="modal-status">Status</label>
                    <select name="Job.Status" id="modal-status" 
                            class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-300 focus:border-indigo-300">
                        @foreach (var s in new[] { "Scheduled", "Active", "Delayed", "Complete" })
                        {
                            <option value="@s" selected="@(Model.Job.Status==s ? "selected" : null)">@s</option>
                        }
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2" for="modal-quantity">
                        Quantity <span class="text-red-500">*</span>
                    </label>
                    <input type="number" name="Job.Quantity" id="modal-quantity" 
                           value="@Model.Job.Quantity" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-300 focus:border-indigo-300" 
                           required min="1" />
                </div>
            </div>

            <!-- Operator and Notes -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2" for="modal-operator">Operator</label>
                    <input type="text" name="Job.Operator" id="modal-operator" 
                           value="@Model.Job.Operator" 
                           class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-300 focus:border-indigo-300" 
                           placeholder="Enter operator name" />
                </div>
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2" for="modal-notes">Notes</label>
                    <textarea name="Job.Notes" id="modal-notes" rows="3"
                              class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-indigo-300 focus:border-indigo-300 resize-none"
                              placeholder="Enter job notes">@Model.Job.Notes</textarea>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="flex justify-between items-center pt-6 border-t border-gray-200">
                @if (Model.IsEditing)
                {
                    <button type="button" class="text-red-600 text-sm font-semibold hover:text-red-700 transition"
                            onclick="deleteJob(@Model.Job.Id, '@Model.Job.MachineId')">
                        Delete Job
                    </button>
                }
                else
                {
                    <div></div>
                }
                
                <div class="space-x-3">
                    <button type="button" 
                            onclick="closeJobModal()" 
                            class="px-6 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition">
                        Cancel
                    </button>
                    <button type="submit" 
                            id="submit-job-btn"
                            class="px-6 py-2 text-sm bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition font-semibold">
                        @(Model.IsEditing ? "Update Job" : "Create Job")
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
(function() {
    // Auto-update end time when part or start time changes
    function updateEndTime() {
        const partSelect = document.getElementById('modal-part-select');
        const startInput = document.getElementById('modal-start');
        const endInput = document.getElementById('modal-end');
        
        if (partSelect && startInput && endInput && partSelect.value && startInput.value) {
            const selected = partSelect.options[partSelect.selectedIndex];
            const durationDays = parseFloat(selected.getAttribute('data-duration')) || 1;
            const start = new Date(startInput.value);
            
            if (!isNaN(start.getTime())) {
                const end = new Date(start);
                end.setDate(end.getDate() + durationDays);
                endInput.value = end.toISOString().slice(0,16);
            }
        }
    }

    // Setup event listeners
    const partSelect = document.getElementById('modal-part-select');
    const startInput = document.getElementById('modal-start');
    
    if (partSelect) partSelect.addEventListener('change', updateEndTime);
    if (startInput) startInput.addEventListener('change', updateEndTime);

    // Form validation
    const form = document.getElementById('job-modal-form');
    if (form) {
        form.addEventListener('submit', function(e) {
            let isValid = true;
            const errors = [];
            
            // Basic validation
            const machineId = document.getElementById('modal-machine-select').value;
            const partId = document.getElementById('modal-part-select').value;
            const startTime = document.getElementById('modal-start').value;
            const endTime = document.getElementById('modal-end').value;
            const quantity = document.getElementById('modal-quantity').value;
            
            if (!machineId) {
                errors.push('Machine is required');
                isValid = false;
            }
            if (!partId) {
                errors.push('Part is required');
                isValid = false;
            }
            if (!startTime) {
                errors.push('Start time is required');
                isValid = false;
            }
            if (!endTime) {
                errors.push('End time is required');
                isValid = false;
            } else if (startTime && new Date(endTime) <= new Date(startTime)) {
                errors.push('End time must be after start time');
                isValid = false;
            }
            if (!quantity || parseInt(quantity) < 1) {
                errors.push('Quantity must be greater than 0');
                isValid = false;
            }
            
            if (!isValid) {
                e.preventDefault();
                showValidationErrors(errors);
                return false;
            }
        });
        
        // Handle HTMX form response
        form.addEventListener('htmx:afterRequest', function(e) {
            const xhr = e.detail.xhr;
            if (xhr.status === 200) {
                const responseText = xhr.responseText;
                if (responseText && responseText.includes('Please fix the following errors')) {
                    // Update modal content with errors
                    document.getElementById('modal-content').innerHTML = responseText;
                } else {
                    // Success - close modal and refresh
                    const machineId = document.getElementById('modal-machine-select').value;
                    closeJobModal();
                    refreshPageData(machineId);
                    showSuccessMessage('Job saved successfully!');
                }
            } else {
                showErrorMessage('Failed to save job. Please try again.');
            }
        });
    }

    function showValidationErrors(errors) {
        alert('Please fix the following errors:\n- ' + errors.join('\n- '));
    }
})();
</script>
