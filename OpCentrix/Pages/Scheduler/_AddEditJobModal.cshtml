@using OpCentrix.Models
@model OpCentrix.Models.ViewModels.AddEditJobViewModel

<!-- Enhanced Modal Container with improved accessibility and UX -->
<div id="job-modal-container" class="modal-backdrop" onclick="closeJobModal()">
    <div class="modal-content" onclick="event.stopPropagation()">
        <form hx-post="/Scheduler?handler=AddOrUpdateJob" 
              hx-target="#machine-row-@Model.Job.MachineId" 
              hx-swap="outerHTML"
              hx-on::before-request="showFormLoading()" 
              hx-on::after-request="handleFormResponse(event)"
              class="modal-form" 
              id="job-form"
              novalidate>
            
            @Html.AntiForgeryToken()
            
            <!-- Modal Header -->
            <div class="modal-header">
                <h2 class="modal-title">
                    @(Model.Job.Id == 0 ? "Schedule New SLS Job" : $"Edit Job #{Model.Job.Id}")
                </h2>
                <button type="button" onclick="closeJobModal()" class="modal-close-btn" aria-label="Close">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Error Display -->
            @if (Model.Errors?.Any() == true)
            {
                <div class="error-container">
                    <div class="error-header">
                        <svg class="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                        </svg>
                        <h3 class="error-title">Please correct the following issues:</h3>
                    </div>
                    <ul class="error-list">
                        @foreach (var error in Model.Errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            }

            <!-- Hidden Fields -->
            <input type="hidden" name="Job.Id" value="@Model.Job.Id" />
            
            <!-- Form Content -->
            <div class="modal-body">
                <!-- Basic Job Information -->
                <div class="form-section">
                    <!-- Left Column -->
                    <div class="form-column">
                        <h3 class="form-section-title">Job Details</h3>
                        
                        <div class="form-group">
                            <label class="form-label required" for="machine-select">Machine</label>
                            <select name="Job.MachineId" id="machine-select" class="form-select" required onchange="JobForm.filterPartsByMachine()">
                                <option value="TI1" selected="@(Model.Job.MachineId == "TI1")">TI1 - Titanium Line 1 (TruPrint 3000)</option>
                                <option value="TI2" selected="@(Model.Job.MachineId == "TI2")">TI2 - Titanium Line 2 (TruPrint 3000)</option>
                                <option value="INC" selected="@(Model.Job.MachineId == "INC")">INC - Inconel Line (TruPrint 5000)</option>
                            </select>
                            <small class="text-xs text-gray-500 mt-1">Each machine is configured for specific materials</small>
                        </div>

                        <div class="form-group">
                            <label class="form-label required" for="part-select">Part</label>
                            <select name="Job.PartId" id="part-select" class="form-select" required onchange="updateJobFromPart()">
                                <option value="">Select a part...</option>
                                @foreach (var part in Model.Parts.OrderBy(p => p.PartNumber))
                                {
                                    <option value="@part.Id" 
                                            selected="@(Model.Job.PartId == part.Id)"
                                            data-part-number="@part.PartNumber"
                                            data-estimated-hours="@part.EstimatedHours.ToString("F1")"
                                            data-sls-material="@part.SlsMaterial"
                                            data-material-type="@(part.SlsMaterial?.Contains("Ti-6Al-4V") == true ? "Titanium" : part.SlsMaterial?.Contains("Inconel") == true ? "Inconel" : "Other")"
                                            data-laser-power="@part.RecommendedLaserPower"
                                            data-scan-speed="@part.RecommendedScanSpeed"
                                            data-layer-thickness="@part.RecommendedLayerThickness"
                                            data-hatch-spacing="@part.RecommendedHatchSpacing"
                                            data-build-temperature="@part.RecommendedBuildTemperature"
                                            data-argon-purity="@part.RequiredArgonPurity.ToString("F1")"
                                            data-oxygen-content="@part.MaxOxygenContent"
                                            data-powder-usage="@part.PowderRequirementKg.ToString("F2")"
                                            data-preheating-time="@part.PreheatingTimeMinutes"
                                            data-cooling-time="@part.CoolingTimeMinutes"
                                            data-post-processing-time="@part.PostProcessingTimeMinutes">
                                        @part.PartNumber - @part.Description
                                    </option>
                                }
                            </select>
                            <small class="text-xs text-gray-500 mt-1">Only parts compatible with the selected machine are shown</small>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label required" for="quantity-input">Quantity</label>
                                <input type="number" name="Job.Quantity" id="quantity-input" value="@Model.Job.Quantity" min="1" max="1000" 
                                       class="form-input" required onchange="updateEndTimeFromQuantity()" />
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label" for="priority-select">Priority</label>
                                <select name="Job.Priority" id="priority-select" class="form-select">
                                    <option value="1" selected="@(Model.Job.Priority == 1)">1 - Critical (Rush)</option>
                                    <option value="2" selected="@(Model.Job.Priority == 2)">2 - High Priority</option>
                                    <option value="3" selected="@(Model.Job.Priority == 3)">3 - Normal</option>
                                    <option value="4" selected="@(Model.Job.Priority == 4)">4 - Low Priority</option>
                                    <option value="5" selected="@(Model.Job.Priority == 5)">5 - Background</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label required" for="start-input">Start Date & Time</label>
                                <input type="datetime-local" name="Job.ScheduledStart" id="start-input"
                                       value="@Model.Job.ScheduledStart.ToString("yyyy-MM-ddTHH:mm")" 
                                       class="form-input" 
                                       required onchange="updateEndTimeFromStart()" />
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label required" for="end-input">End Date & Time</label>
                                <input type="datetime-local" name="Job.ScheduledEnd" id="end-input"
                                       value="@Model.Job.ScheduledEnd.ToString("yyyy-MM-ddTHH:mm")" 
                                       class="form-input" required />
                                <small class="text-xs text-gray-500 mt-1">Duration: <span id="duration-display">@((Model.Job.ScheduledEnd - Model.Job.ScheduledStart).TotalHours.ToString("F1")) hours</span></small>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column -->
                    <div class="form-column">
                        <h3 class="form-section-title">SLS Process Parameters</h3>
                        
                        <div class="form-group">
                            <label class="form-label required" for="sls-material">Material</label>
                            <select name="Job.SlsMaterial" id="sls-material" class="form-select" required>
                                <option value="Ti-6Al-4V Grade 5" 
                                        selected="@(Model.Job.SlsMaterial == "Ti-6Al-4V Grade 5")"
                                        data-compatible-machines="TI1,TI2">Ti-6Al-4V Grade 5 (Aerospace)</option>
                                <option value="Ti-6Al-4V ELI Grade 23" 
                                        selected="@(Model.Job.SlsMaterial == "Ti-6Al-4V ELI Grade 23")"
                                        data-compatible-machines="TI1,TI2">Ti-6Al-4V ELI Grade 23 (Medical)</option>
                                <option value="Inconel 718" 
                                        selected="@(Model.Job.SlsMaterial == "Inconel 718")"
                                        data-compatible-machines="INC">Inconel 718 (High-Temp)</option>
                                <option value="Inconel 625" 
                                        selected="@(Model.Job.SlsMaterial == "Inconel 625")"
                                        data-compatible-machines="INC">Inconel 625 (Corrosion Resistant)</option>
                            </select>
                            <small class="text-xs text-gray-500 mt-1">Material options filtered by machine compatibility</small>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="powder-usage">Estimated Powder (kg)</label>
                            <input type="number" name="Job.EstimatedPowderUsageKg" id="powder-usage" 
                                   value="@Model.Job.EstimatedPowderUsageKg.ToString("F2")" 
                                   min="0" max="50" step="0.1" class="form-input" 
                                   data-validation-message="Powder usage must be between 0 and 50 kg" />
                            <div class="validation-message" id="powder-usage-validation"></div>
                        </div>

                        <!-- Advanced Laser Settings Dropdown -->
                        <div class="advanced-settings-container">
                            <button type="button" class="advanced-settings-toggle" onclick="toggleAdvancedSettings()" id="advanced-toggle">
                                <svg class="settings-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                                <span class="settings-text">Advanced Laser Settings</span>
                                <svg class="chevron-icon" id="chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                            </button>

                            <div class="advanced-settings-content" id="advanced-settings" style="display: none;">
                                <div class="settings-warning">
                                    <svg class="w-4 h-4 text-amber-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                    <span class="text-sm text-amber-800">Modify only if you understand SLS laser parameters</span>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label" for="laser-power">
                                            Laser Power (W)
                                            <span class="required-asterisk">*</span>
                                        </label>
                                        <input type="number" name="Job.LaserPowerWatts" id="laser-power" 
                                               value="@Model.Job.LaserPowerWatts" 
                                               min="50" max="400" step="1" class="form-input" 
                                               required
                                               data-validation-message="Laser power must be between 50 and 400 watts"
                                               onchange="validateLaserParameter(this)" />
                                        <div class="validation-message" id="laser-power-validation"></div>
                                        <small class="text-xs text-gray-500 mt-1">Typical range: 150-350W for Ti alloys</small>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="scan-speed">
                                            Scan Speed (mm/s)
                                            <span class="required-asterisk">*</span>
                                        </label>
                                        <input type="number" name="Job.ScanSpeedMmPerSec" id="scan-speed" 
                                               value="@Model.Job.ScanSpeedMmPerSec" 
                                               min="100" max="5000" step="10" class="form-input" 
                                               required
                                               data-validation-message="Scan speed must be between 100 and 5000 mm/s"
                                               onchange="validateLaserParameter(this)" />
                                        <div class="validation-message" id="scan-speed-validation"></div>
                                        <small class="text-xs text-gray-500 mt-1">Typical range: 800-2000 mm/s</small>
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label" for="layer-thickness">
                                            Layer Thickness (μm)
                                            <span class="required-asterisk">*</span>
                                        </label>
                                        <input type="number" name="Job.LayerThicknessMicrons" id="layer-thickness" 
                                               value="@Model.Job.LayerThicknessMicrons" 
                                               min="20" max="60" step="5" class="form-input" 
                                               required
                                               data-validation-message="Layer thickness must be between 20 and 60 microns"
                                               onchange="validateLaserParameter(this)" />
                                        <div class="validation-message" id="layer-thickness-validation"></div>
                                        <small class="text-xs text-gray-500 mt-1">Standard: 30μm for Ti alloys</small>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="hatch-spacing">
                                            Hatch Spacing (μm)
                                            <span class="required-asterisk">*</span>
                                        </label>
                                        <input type="number" name="Job.HatchSpacingMicrons" id="hatch-spacing" 
                                               value="@Model.Job.HatchSpacingMicrons" 
                                               min="50" max="200" step="5" class="form-input" 
                                               required
                                               data-validation-message="Hatch spacing must be between 50 and 200 microns"
                                               onchange="validateLaserParameter(this)" />
                                        <div class="validation-message" id="hatch-spacing-validation"></div>
                                        <small class="text-xs text-gray-500 mt-1">Typical: 100-120μm</small>
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label" for="build-temperature">
                                            Build Temperature (°C)
                                            <span class="required-asterisk">*</span>
                                        </label>
                                        <input type="number" name="Job.BuildTemperatureCelsius" id="build-temperature" 
                                               value="@Model.Job.BuildTemperatureCelsius" 
                                               min="100" max="300" step="5" class="form-input" 
                                               required
                                               data-validation-message="Build temperature must be between 100 and 300°C"
                                               onchange="validateLaserParameter(this)" />
                                        <div class="validation-message" id="build-temperature-validation"></div>
                                        <small class="text-xs text-gray-500 mt-1">Ti alloys: 150-200°C, Inconel: 80-120°C</small>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label" for="argon-purity">Argon Purity (%)</label>
                                        <input type="number" name="Job.ArgonPurityPercent" id="argon-purity" 
                                               value="@Model.Job.ArgonPurityPercent.ToString("F1")" 
                                               min="95" max="100" step="0.1" class="form-input" 
                                               data-validation-message="Argon purity must be between 95% and 100%"
                                               onchange="validateLaserParameter(this)" />
                                        <div class="validation-message" id="argon-purity-validation"></div>
                                        <small class="text-xs text-gray-500 mt-1">Minimum 99.9% recommended</small>
                                    </div>
                                </div>

                                <div class="parameter-validation-summary" id="parameter-summary" style="display: none;">
                                    <div class="flex items-start">
                                        <svg class="w-4 h-4 text-red-600 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                                        </svg>
                                        <div>
                                            <p class="font-medium text-red-800">Parameter Validation Issues:</p>
                                            <ul class="mt-1 list-disc list-inside text-sm text-red-700" id="validation-issues"></ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Additional Information -->
                <div class="form-section">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label" for="order-number">Customer Order Number</label>
                            <input type="text" name="Job.CustomerOrderNumber" id="order-number" value="@Model.Job.CustomerOrderNumber" maxlength="100" class="form-input" placeholder="CO-2024-001" />
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label required" for="operator-input">Operator</label>
                            <input type="text" name="Job.Operator" id="operator-input" value="@Model.Job.Operator" maxlength="100" class="form-input" placeholder="Enter operator name" required />
                            <small class="text-xs text-gray-500 mt-1">Required when operator certification is enabled</small>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label required" for="quality-inspector-input">Quality Inspector</label>
                            <input type="text" name="Job.QualityInspector" id="quality-inspector-input" value="@Model.Job.QualityInspector" maxlength="100" class="form-input" placeholder="Enter quality inspector name" required />
                            <small class="text-xs text-gray-500 mt-1">Required when quality checks are enabled</small>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label" for="supervisor-input">Supervisor</label>
                            <input type="text" name="Job.Supervisor" id="supervisor-input" value="@Model.Job.Supervisor" maxlength="100" class="form-input" placeholder="Enter supervisor name" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="notes-input">Special Instructions & Notes</label>
                        <textarea name="Job.Notes" id="notes-input" rows="3" maxlength="1000" class="form-textarea" placeholder="Enter any special instructions, quality requirements, or notes for this job...">@Model.Job.Notes</textarea>
                    </div>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer">
                <div class="footer-left">
                    <div class="form-group">
                        <label class="form-label" for="status-select">Status</label>
                        <select name="Job.Status" id="status-select" class="form-select">
                            <option value="Scheduled" selected="@(Model.Job.Status == "Scheduled")">Scheduled</option>
                            <option value="Preheating" selected="@(Model.Job.Status == "Preheating")">Preheating</option>
                            <option value="Building" selected="@(Model.Job.Status == "Building")">Building</option>
                            <option value="Cooling" selected="@(Model.Job.Status == "Cooling")">Cooling</option>
                            <option value="Post-Processing" selected="@(Model.Job.Status == "Post-Processing")">Post-Processing</option>
                            <option value="QC-Review" selected="@(Model.Job.Status == "QC-Review")">QC Review</option>
                            <option value="Completed" selected="@(Model.Job.Status == "Completed")">Completed</option>
                            <option value="On-Hold" selected="@(Model.Job.Status == "On-Hold")">On Hold</option>
                            <option value="Cancelled" selected="@(Model.Job.Status == "Cancelled")">Cancelled</option>
                        </select>
                    </div>
                    
                    <div class="form-checkbox">
                        <input type="checkbox" name="Job.IsRushJob" value="true" 
                               checked="@Model.Job.IsRushJob"
                               class="checkbox-input" id="rush-job" />
                        <label for="rush-job" class="checkbox-label">Rush Job (Expedited Processing)</label>
                    </div>
                </div>

                <div class="footer-right">
                    <!-- CRITICAL FIX: Remove delete form from here to prevent form nesting -->
                    @if (Model.Job.Id > 0)
                    {
                        <button type="button" onclick="deleteJob(@Model.Job.Id)" class="btn btn-danger">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Delete Job
                        </button>
                    }
                    
                    <button type="button" onclick="closeJobModal()" class="btn btn-secondary">
                        Cancel
                    </button>
                    
                    <button type="submit" id="submit-job-btn" class="btn btn-primary">
                        <span id="submit-text">@(Model.Job.Id == 0 ? "Schedule Job" : "Update Job")</span>
                        <svg id="submit-spinner" class="submit-spinner hidden" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </form>

        <!-- CRITICAL FIX: Separate delete form outside main form to prevent nesting -->
        @if (Model.Job.Id > 0)
        {
            <form id="delete-job-form" 
                  hx-post="/Scheduler?handler=DeleteJob&id=@Model.Job.Id"
                  hx-target="#modal-container"
                  hx-swap="innerHTML"
                  style="display: none;">
                @Html.AntiForgeryToken()
            </form>
        }
    </div>
</div>

<script>
// Enhanced job form functionality with precise time calculations
(function() {
    'use strict';
    
    // CRITICAL FIX: Delete job function using separate form
    window.deleteJob = function(jobId) {
        if (!confirm('Are you sure you want to delete this job? This action cannot be undone.')) {
            return;
        }
        
        console.log('🗑️ [DELETE] Deleting job ID:', jobId);
        
        // Find and submit the separate delete form
        const deleteForm = document.getElementById('delete-job-form');
        if (deleteForm) {
            // Trigger HTMX form submission
            htmx.trigger(deleteForm, 'submit');
        } else {
            console.error('❌ [DELETE] Delete form not found');
            if (window.showErrorNotification) {
                window.showErrorNotification('Error: Delete form not found. Please refresh and try again.');
            }
        }
    };
    
    // Form utilities and calculations
    const JobForm = {
        
        // MACHINE COMPATIBILITY FILTERING
        filterPartsByMachine() {
            const machineSelect = document.getElementById('machine-select');
            const partSelect = document.getElementById('part-select');
            
            if (!machineSelect || !partSelect) return;
            
            const selectedMachine = machineSelect.value;
            const allOptions = Array.from(partSelect.options);
            
            console.log('🔧 [JOB-FORM] Filtering parts for machine:', selectedMachine);
            
            // Define machine material compatibility
            const machineCompatibility = {
                'TI1': ['Titanium'], // Titanium Line 1
                'TI2': ['Titanium'], // Titanium Line 2
                'INC': ['Inconel']   // Inconel Line
            };
            
            const compatibleMaterials = machineCompatibility[selectedMachine] || [];
            console.log('🔧 [JOB-FORM] Compatible materials:', compatibleMaterials);
            
            // Filter options based on compatibility
            allOptions.forEach((option, index) => {
                if (index === 0) return; // Skip the "Select a part..." option
                
                const materialType = option.dataset.materialType;
                const isCompatible = compatibleMaterials.includes(materialType);
                
                if (isCompatible) {
                    option.style.display = '';
                    option.disabled = false;
                } else {
                    option.style.display = 'none';
                    option.disabled = true;
                    
                    // If this part is currently selected but incompatible, clear selection
                    if (option.selected) {
                        partSelect.value = '';
                        console.log('🔧 [JOB-FORM] Cleared incompatible part selection');
                    }
                }
            });
            
            // Count compatible parts
            const compatibleCount = allOptions.filter((opt, idx) => 
                idx > 0 && compatibleMaterials.includes(opt.dataset.materialType)
            ).length;
            
            console.log(`✅ [JOB-FORM] Filtered to ${compatibleCount} compatible parts`);
            
            // Update the placeholder text
            const placeholder = partSelect.options[0];
            if (compatibleCount === 0) {
                placeholder.textContent = `No compatible parts for ${selectedMachine}`;
                placeholder.style.color = '#ef4444';
            } else {
                placeholder.textContent = `Select a part... (${compatibleCount} available)`;
                placeholder.style.color = '';
            }
        },
        
        // ENHANCED: Update job parameters and calculate optimal timing
        async updateJobFromPart() {
            const partSelect = document.getElementById('part-select');
            const selectedOption = partSelect?.options[partSelect.selectedIndex];
            
            if (!selectedOption || !selectedOption.value) {
                return;
            }
            
            console.log('🔧 [JOB-FORM] Updating job from selected part:', selectedOption.text);
            
            // Show loading indicator for timing calculation
            this.showTimingCalculation();
            
            try {
                // Get current form values
                const machineId = document.getElementById('machine-select')?.value || 'TI1';
                const startInput = document.getElementById('start-input');
                const preferredStart = startInput?.value || new Date().toISOString();
                
                // Call the optimal timing endpoint
                const response = await fetch(`/Scheduler?handler=OptimalTiming&machineId=${machineId}&partId=${selectedOption.value}&preferredStart=${encodeURIComponent(preferredStart)}`);
                
                if (response.ok) {
                    const timingData = await response.json();
                    
                    if (timingData.error) {
                        console.warn('⚠️ [JOB-FORM] Timing calculation error:', timingData.error);
                        this.hideTimingCalculation();
                        this.updateJobFromPartFallback(selectedOption);
                        return;
                    }
                    
                    // Update form with optimal timing
                    if (startInput) {
                        startInput.value = timingData.optimalStart;
                    }
                    
                    const endInput = document.getElementById('end-input');
                    if (endInput) {
                        endInput.value = timingData.optimalEnd;
                    }
                    
                    // Show timing message
                    this.showTimingMessage(timingData.message, timingData.canSchedule);
                    
                    console.log('✅ [JOB-FORM] Optimal timing applied:', {
                        start: timingData.optimalStart,
                        end: timingData.optimalEnd,
                        canSchedule: timingData.canSchedule
                    });
                } else {
                    throw new Error('Failed to calculate optimal timing');
                }
            } catch (error) {
                console.error('❌ [JOB-FORM] Error calculating optimal timing:', error);
                this.updateJobFromPartFallback(selectedOption);
            } finally {
                this.hideTimingCalculation();
            }
            
            // Update other job parameters from part data
            this.updateJobParametersFromPart(selectedOption);
            this.updateDurationDisplay();
        },
        
        // Fallback method for updating job from part without API call
        updateJobFromPartFallback(selectedOption) {
            console.log('🔧 [JOB-FORM] Using fallback method for part update');
            
            // Get estimated hours and update end time
            const estimatedHours = parseFloat(selectedOption.dataset.estimatedHours) || 8;
            this.updateEndTimeFromHours(estimatedHours);
            
            this.updateJobParametersFromPart(selectedOption);
        },
        
        // Update job parameters from part data
        updateJobParametersFromPart(selectedOption) {
            // Update SLS material
            const slsMaterial = selectedOption.dataset.slsMaterial || 'Ti-6Al-4V Grade 5';
            this.updateSelectValue('sls-material', slsMaterial);
            
            // Update process parameters with validation
            this.updateInputValue('laser-power', selectedOption.dataset.laserPower, 200);
            this.updateInputValue('scan-speed', selectedOption.dataset.scanSpeed, 1200);
            this.updateInputValue('layer-thickness', selectedOption.dataset.layerThickness, 30);
            this.updateInputValue('hatch-spacing', selectedOption.dataset.hatchSpacing, 120);
            this.updateInputValue('build-temperature', selectedOption.dataset.buildTemperature, 180);
            this.updateInputValue('powder-usage', selectedOption.dataset.powderUsage, 0.5);
            
            // CRITICAL FIX: Auto-populate required fields with sensible defaults
            const operatorInput = document.getElementById('operator-input');
            const qualityInspectorInput = document.getElementById('quality-inspector-input');
            
            if (operatorInput && (!operatorInput.value || operatorInput.value === 'TBD')) {
                operatorInput.value = 'John Doe'; // Default operator name
                console.log('✅ [JOB-FORM] Set default operator');
            }
            
            if (qualityInspectorInput && (!qualityInspectorInput.value || qualityInspectorInput.value === 'TBD')) {
                qualityInspectorInput.value = 'Jane Smith'; // Default QI name  
                console.log('✅ [JOB-FORM] Set default quality inspector');
            }
            
            // Log the part number being selected
            const partNumber = selectedOption.dataset.partNumber;
            if (partNumber) {
                console.log('✅ [JOB-FORM] Part number selected:', partNumber);
            }
        },
        
        // Show timing calculation in progress
        showTimingCalculation() {
            const container = this.getOrCreateTimingMessageContainer();
            container.innerHTML = `
                <div class="flex items-center text-blue-600 text-sm">
                    <svg class="animate-spin h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Calculating optimal schedule...
                </div>
            `;
            container.classList.remove('hidden');
        },
        
        // Hide timing calculation
        hideTimingCalculation() {
            const container = document.getElementById('timing-message-container');
            if (container) {
                setTimeout(() => {
                    container.classList.add('hidden');
                }, 1000); // Keep visible for 1 second to show result
            }
        },
        
        // Show timing message
        showTimingMessage(message, isSuccess) {
            const container = this.getOrCreateTimingMessageContainer();
            const iconClass = isSuccess ? 'text-green-600' : 'text-amber-600';
            const icon = isSuccess 
                ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>'
                : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>';
            
            container.innerHTML = `
                <div class="flex items-start ${iconClass} text-sm">
                    <svg class="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        ${icon}
                    </svg>
                    <span>${message}</span>
                </div>
            `;
            container.classList.remove('hidden');
        },
        
        // Get or create timing message container
        getOrCreateTimingMessageContainer() {
            let container = document.getElementById('timing-message-container');
            if (!container) {
                container = document.createElement('div');
                container.id = 'timing-message-container';
                container.className = 'mt-2 p-3 bg-gray-50 border border-gray-200 rounded-md hidden';
                
                // Insert after the end time input
                const endInput = document.getElementById('end-input');
                if (endInput && endInput.parentNode) {
                    endInput.parentNode.appendChild(container);
                }
            }
            return container;
        },
        
        // Update input value with fallback
        updateInputValue(elementId, value, defaultValue) {
            const element = document.getElementById(elementId);
            if (element) {
                const numValue = parseFloat(value) || defaultValue;
                element.value = numValue;
            }
        },
        
        // Update SLS material
        updateSelectValue(elementId, value) {
            const element = document.getElementById(elementId);
            if (element) {
                element.value = value;
                console.log('✅ [JOB-FORM] Updated', elementId, 'to:', value);
            } else {
                console.warn('⚠️ [JOB-FORM] Element not found:', elementId);
            }
        },
        
        // Update end time when start changes
        updateEndTimeFromStart() {
            console.log('🔧 [JOB-FORM] updateEndTimeFromStart called');
            const partSelect = document.getElementById('part-select');
            const selectedOption = partSelect?.options[partSelect.selectedIndex];
            
            if (selectedOption?.value) {
                const estimatedHours = parseFloat(selectedOption.dataset.estimatedHours) || 8;
                console.log('🔧 [JOB-FORM] Using estimated hours:', estimatedHours);
                this.updateEndTimeFromHours(estimatedHours);
            }
            
            this.updateDurationDisplay();
        },
        
        // Update end time when quantity changes
        updateEndTimeFromQuantity() {
            console.log('🔧 [JOB-FORM] updateEndTimeFromQuantity called');
            const partSelect = document.getElementById('part-select');
            const quantityInput = document.getElementById('quantity-input');
            const selectedOption = partSelect?.options[partSelect.selectedIndex];
            
            if (selectedOption?.value && quantityInput?.value) {
                const baseHours = parseFloat(selectedOption.dataset.estimatedHours) || 8;
                const quantity = parseInt(quantityInput.value) || 1;
                
                console.log('🔧 [JOB-FORM] Calculating for:', { baseHours, quantity });
                
                // Calculate total hours (with some efficiency scaling for multiple parts)
                let totalHours = baseHours * quantity;
                if (quantity > 1) {
                    // Apply efficiency factor for multiple parts (economies of scale)
                    const efficiencyFactor = Math.max(0.8, 1 - (quantity - 1) * 0.05);
                    totalHours = baseHours + (baseHours * (quantity - 1) * efficiencyFactor);
                }
                
                console.log('🔧 [JOB-FORM] Total hours calculated:', totalHours);
                this.updateEndTimeFromHours(totalHours);
            }
            
            this.updateDurationDisplay();
        },
        
        // Calculate and set end time from hours
        updateEndTimeFromHours(hours) {
            const startInput = document.getElementById('start-input');
            const endInput = document.getElementById('end-input');
            
            if (!startInput?.value || !endInput || !hours) {
                return;
            }
            
            try {
                const startDate = new Date(startInput.value);
                if (isNaN(startDate.getTime())) {
                    return;
                }
                
                // Add hours to start time
                const endDate = new Date(startDate.getTime() + (hours * 60 * 60 * 1000));
                
                // Format for datetime-local input
                const year = endDate.getFullYear();
                const month = String(endDate.getMonth() + 1).padStart(2, '0');
                const day = String(endDate.getDate()).padStart(2, '0');
                const hour = String(endDate.getHours()).padStart(2, '0');
                const minute = String(endDate.getMinutes()).padStart(2, '0');
                
                endInput.value = `${year}-${month}-${day}T${hour}:${minute}`;
                
            } catch (error) {
                console.warn('Error calculating end time:', error);
            }
        },
        
        // Update duration display
        updateDurationDisplay() {
            const startInput = document.getElementById('start-input');
            const endInput = document.getElementById('end-input');
            const durationDisplay = document.getElementById('duration-display');
            
            if (!startInput?.value || !endInput?.value || !durationDisplay) {
                return;
            }
            
            try {
                const startDate = new Date(startInput.value);
                const endDate = new Date(endInput.value);
                
                if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                    return;
                }
                
                const diffMs = endDate.getTime() - startDate.getTime();
                const diffHours = diffMs / (1000 * 60 * 60);
                
                if (diffHours > 0) {
                    if (diffHours < 24) {
                        durationDisplay.textContent = `${diffHours.toFixed(1)} hours`;
                    } else {
                        const days = Math.floor(diffHours / 24);
                        const hours = (diffHours % 24).toFixed(1);
                        durationDisplay.textContent = `${days}d ${hours}h`;
                    }
                } else {
                    durationDisplay.textContent = 'Invalid duration';
                    durationDisplay.className = 'text-xs text-red-500 mt-1';
                }
            } catch (error) {
                console.warn('Error calculating duration:', error);
            }
        },
        
        // Form loading state management
        showFormLoading() {
            const submitBtn = document.getElementById('submit-job-btn');
            const submitText = document.getElementById('submit-text');
            const submitSpinner = document.getElementById('submit-spinner');
            
            if (submitBtn) submitBtn.disabled = true;
            if (submitText) submitText.textContent = 'Processing...';
            if (submitSpinner) submitSpinner.classList.remove('hidden');
        },
        
        hideFormLoading() {
            const submitBtn = document.getElementById('submit-job-btn');
            const submitText = document.getElementById('submit-text');
            const submitSpinner = document.getElementById('submit-spinner');
            
            if (submitBtn) submitBtn.disabled = false;
            if (submitText) submitText.textContent = '@(Model.Job.Id == 0 ? "Schedule Job" : "Update Job")';
            if (submitSpinner) submitSpinner.classList.add('hidden');
        },
        
        // Handle HTMX form response
        handleFormResponse(event) {
            this.hideFormLoading();
            
            // Check if response contains errors (modal content)
            if (event.detail.xhr.responseText.includes('error-container')) {
                // Form has validation errors, keep modal open
                return;
            }
            
            // Success - modal will be closed by main app
            if (window.showSuccessNotification) {
                window.showSuccessNotification('Job saved successfully!');
            }
        }
    };
    
    // Expose functions globally for HTML event handlers
    window.updateJobFromPart = () => JobForm.updateJobFromPart();
    window.updateEndTimeFromStart = () => JobForm.updateEndTimeFromStart();
    window.updateEndTimeFromQuantity = () => JobForm.updateEndTimeFromQuantity();
    window.showFormLoading = () => JobForm.showFormLoading();
    window.hideFormLoading = () => JobForm.hideFormLoading();
    window.handleFormResponse = (event) => JobForm.handleFormResponse(event);
    
    // CRITICAL FIX: Expose JobForm object globally for HTML access
    window.JobForm = JobForm;
    
    // Initialize form when loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Prevent duplicate variable declarations
        if (window.jobFormInitialized) {
            return;
        }
        window.jobFormInitialized = true;
        
        // CRITICAL FIX: Initialize machine filtering first
        JobForm.filterPartsByMachine();
        
        // CRITICAL FIX: Auto-populate required fields if they're empty or set to defaults
        const operatorInput = document.getElementById('operator-input');
        const qualityInspectorInput = document.getElementById('quality-inspector-input');
        
        if (operatorInput && (!operatorInput.value || operatorInput.value === 'TBD')) {
            operatorInput.value = 'John Doe'; // Default operator
        }
        
        if (qualityInspectorInput && (!qualityInspectorInput.value || qualityInspectorInput.value === 'TBD')) {
            qualityInspectorInput.value = 'Jane Smith'; // Default quality inspector
        }
        
        // Set up initial state if part is pre-selected
        const partSelect = document.getElementById('part-select');
        if (partSelect?.value) {
            JobForm.updateJobFromPart();
        }
        
        // Update duration display
        JobForm.updateDurationDisplay();
        
        // Set up event listeners for duration updates
        const startInput = document.getElementById('start-input');
        const endInput = document.getElementById('end-input');
        
        if (startInput) {
            startInput.addEventListener('change', () => JobForm.updateDurationDisplay());
        }
        if (endInput) {
            endInput.addEventListener('change', () => JobForm.updateDurationDisplay());
        }
        
        // Filter parts by machine on load
        JobForm.filterPartsByMachine();
    });
    
    // Re-filter parts when machine selection changes
    const machineSelect = document.getElementById('machine-select');
    if (machineSelect) {
        machineSelect.addEventListener('change', function() {
            JobForm.filterPartsByMachine();
        });
    }
    
    // Toggle advanced settings visibility
    window.toggleAdvancedSettings = function() {
        const settingsContent = document.getElementById('advanced-settings');
        const chevronIcon = document.getElementById('chevron');
        
        if (settingsContent) {
            const isVisible = settingsContent.style.display !== 'none';
            settingsContent.style.display = isVisible ? 'none' : 'block';
            
            // Rotate chevron icon
            if (chevronIcon) {
                chevronIcon.style.transform = isVisible ? 'rotate(0deg)' : 'rotate(180deg)';
            }
            
            console.log('🔧 [TOGGLE] Advanced settings:', isVisible ? 'Hidden' : 'Visible');
        }
    };
    
    // Validate laser parameter inputs
    window.validateLaserParameter = function(input) {
        const value = parseFloat(input.value);
        const min = parseFloat(input.min);
        const max = parseFloat(input.max);
        const validationMessageId = input.dataset.validationMessage;
        
        let isValid = true;
        
        // Check required attribute
        if (input.hasAttribute('required') && !input.value) {
            isValid = false;
            input.classList.add('border-red-500');
            input.classList.remove('border-gray-300');
            showValidationMessage(validationMessageId, 'This field is required');
        } else {
            input.classList.remove('border-red-500');
            input.classList.add('border-gray-300');
        }
        
        // Check range
        if (value < min || value > max) {
            isValid = false;
            input.classList.add('border-red-500');
            input.classList.remove('border-gray-300');
            showValidationMessage(validationMessageId, `Value must be between ${min} and ${max}`);
        } else {
            input.classList.remove('border-red-500');
            input.classList.add('border-gray-300');
        }
        
        // Update summary validation
        updateParameterValidationSummary();
        
        return isValid;
    };
    
    // Show validation message
    function showValidationMessage(messageId, message) {
        const messageElement = document.getElementById(messageId);
        if (messageElement) {
            messageElement.textContent = message;
            messageElement.classList.remove('hidden');
        }
    }
    
    // Update parameter validation summary
    function updateParameterValidationSummary() {
        const summaryContainer = document.getElementById('parameter-summary');
        const issuesList = document.getElementById('validation-issues');
        
        if (!summaryContainer || !issuesList) return;
        
        // Clear existing issues
        issuesList.innerHTML = '';
        
        // Check required parameters
        const requiredParameters = [
            'laser-power',
            'scan-speed',
            'layer-thickness',
            'hatch-spacing',
            'build-temperature'
        ];
        
        requiredParameters.forEach(param => {
            const input = document.getElementById(param);
            if (input && !validateLaserParameter(input)) {
                const issueItem = document.createElement('li');
                issueItem.textContent = `${input.name.replace(/([A-Z])/g, ' $1')}: Invalid value`;
                issuesList.appendChild(issueItem);
            }
        });
        
        // Show or hide summary container
        if (issuesList.childElementCount > 0) {
            summaryContainer.style.display = 'block';
        } else {
            summaryContainer.style.display = 'none';
        }
    }
    
})();
</script>

<style>
/* Advanced Settings Dropdown Styles */
.advanced-settings-container {
    margin-top: 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    overflow: hidden;
    background: #ffffff;
}

.advanced-settings-toggle {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    background: #f9fafb;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
    color: #374151;
}

.advanced-settings-toggle:hover {
    background: #f3f4f6;
    color: #1f2937;
}

.advanced-settings-toggle:focus {
    outline: 2px solid #3b82f6;
    outline-offset: -2px;
}

.settings-icon {
    width: 1.25rem;
    height: 1.25rem;
    margin-right: 0.5rem;
    color: #6b7280;
}

.settings-text {
    flex: 1;
    text-align: left;
    font-size: 0.875rem;
}

.chevron-icon {
    width: 1rem;
    height: 1rem;
    transition: transform 0.2s ease;
    color: #6b7280;
}

.chevron-icon.rotated {
    transform: rotate(180deg);
}

.advanced-settings-content {
    padding: 1rem;
    border-top: 1px solid #e5e7eb;
    background: #ffffff;
    animation: slideDown 0.3s ease;
}

.advanced-settings-content.hidden {
    display: none !important;
}

/* Enhanced form input styles for validation */
.form-input.error {
    border-color: #dc2626;
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
}

.form-input.success {
    border-color: #059669;
    box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
}

.form-input.warning {
    border-color: #d97706;
    box-shadow: 0 0 0 3px rgba(217, 119, 6, 0.1);
}

/* Animation keyframes for dropdown */
@@keyframes slideDown {
    0% {
        opacity: 0;
        max-height: 0;
        padding-top: 0;
        padding-bottom: 0;
    }
    100% {
        opacity: 1;
        max-height: 500px;
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
}

/* Responsive adjustments */
@@media (max-width: 768px) {
    .advanced-settings-content {
        padding: 0.75rem;
    }
    
    .settings-warning {
        flex-direction: column;
        align-items: flex-start;
        text-align: left;
    }
    
    .settings-warning svg {
        margin-bottom: 0.25rem;
        margin-right: 0;
    }
}
