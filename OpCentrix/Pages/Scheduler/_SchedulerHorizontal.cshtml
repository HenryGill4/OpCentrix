@model OpCentrix.Models.ViewModels.SchedulerPageViewModel
@{
    var slotsPerDay = Model.SlotsPerDay;
    var slotMinutes = Model.SlotMinutes;
    var slotTimes = Enumerable.Range(0, slotsPerDay).Select(i => TimeSpan.FromMinutes(i * slotMinutes)).ToList();
    var totalSlots = Model.Dates.Count * slotsPerDay;
    
    // Get zoom from query string
    var zoom = Context.Request.Query["zoom"].FirstOrDefault() ?? "week";
}

<!-- Enhanced Horizontal Scheduler Grid Container -->
<div class="scheduler-grid-container scheduler-horizontal opcentrix-card" 
     data-zoom="@zoom"
     data-orientation="horizontal"
     data-total-slots="@totalSlots">
    
    <!-- Header Row -->
    <div class="scheduler-header-row flex">
        <!-- Machine column header -->
        <div class="scheduler-grid-header sticky left-0 top-0 z-20 bg-white border-b border-r font-bold text-indigo-800"
             style="width: 200px; flex-shrink: 0;">
            <div class="flex items-center justify-center h-full p-2">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 11.172V5l-1-1z"></path>
                </svg>
                Machines
            </div>
        </div>
        
        <!-- Date headers container -->
        <div class="scheduler-date-headers flex">
            @foreach (var date in Model.Dates)
            {
                for (int s = 0; s < slotsPerDay; s++)
                {
                    var isFirstSlot = s == 0;
                    var slotTime = slotTimes[s];
                    var isToday = date.Date == DateTime.Today;
                    var headerClass = isFirstSlot ? "scheduler-grid-header font-semibold text-gray-800 border-r bg-white" : "scheduler-grid-header text-xs text-gray-600 border-r bg-gray-50";
                    
                    if (isToday && isFirstSlot) headerClass += " bg-blue-50 text-blue-800 border-blue-200";
                    
                    <div class="@headerClass" 
                         style="width: var(--slot-width); flex-shrink: 0;"
                         data-date="@date.ToString("yyyy-MM-dd")" 
                         data-slot="@s">
                        @if (isFirstSlot)
                        {
                            <div class="text-center p-2">
                                <div class="font-bold">@date.ToString("ddd")</div>
                                <div class="text-sm">@date.ToString("M/d")</div>
                                @if (isToday)
                                {
                                    <div class="text-xs text-blue-600 font-semibold">Today</div>
                                }
                            </div>
                        }
                        else if (slotsPerDay > 1)
                        {
                            <div class="text-center p-1">
                                <div class="text-xs">@slotTime.ToString(@"h\:mm")</div>
                                @if (slotTime.Hours >= 12) 
                                {
                                    <span class="text-xs">PM</span>
                                } 
                                else 
                                {
                                    <span class="text-xs">AM</span>
                                }
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
    
    <!-- Machine Rows Container -->
    <div class="machine-rows-container">
        @foreach (var machine in Model.Machines)
        {
            var rowHeight = Model.MachineRowHeights.GetValueOrDefault(machine, 160);
            var machineJobs = Model.Jobs.Where(j => j.MachineId == machine).ToList();
            var jobCount = machineJobs.Count;
            
            <!-- Individual Machine Row -->
            <div class="machine-row flex border-b border-gray-200" 
                 id="machine-row-@machine" 
                 data-machine="@machine">
                <!-- Machine Label -->
                <div class="scheduler-machine-label @machine.ToLower() sticky left-0 z-10 bg-white border-r" 
                     style="width: 200px; height:@(rowHeight)px; flex-shrink: 0;"
                     data-machine="@machine">
                    <div class="flex flex-col items-center justify-center h-full p-2">
                        <div class="text-lg font-bold">@machine</div>
                        <div class="text-xs opacity-75 mt-1">@jobCount job@(jobCount != 1 ? "s" : "")</div>
                        @if (machineJobs.Any())
                        {
                            <div class="text-xs opacity-60">@machineJobs.Sum(j => j.DurationHours).ToString("F1")h total</div>
                        }
                    </div>
                </div>
                
                <!-- Time Slots for this machine -->
                <div class="time-slots-container flex relative" 
                     style="width: calc(var(--slot-width) * @totalSlots);">
                    @for (int d = 0; d < Model.Dates.Count; d++)
                    {
                        var day = Model.Dates[d];
                        for (int s = 0; s < slotsPerDay; s++)
                        {
                            var slotTime = slotTimes[s];
                            var slotDateTime = day.Add(slotTime);
                            var isToday = day.Date == DateTime.Today;
                            var isCurrentTimeSlot = isToday && 
                                slotTime <= DateTime.Now.TimeOfDay && 
                                slotTime.Add(TimeSpan.FromMinutes(slotMinutes)) > DateTime.Now.TimeOfDay;
                            var isWeekend = day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday;
                            var isPastWorkHours = slotTime < TimeSpan.FromHours(6) || slotTime >= TimeSpan.FromHours(18);
                            
                            var cellClasses = new List<string> { 
                                "scheduler-grid-cell", "group", "relative", "cursor-pointer", "border-r", "border-gray-200"
                            };
                            
                            if (isCurrentTimeSlot) cellClasses.Add("current-time");
                            else if (isWeekend) cellClasses.Add("weekend");
                            else if (isPastWorkHours) cellClasses.Add("off-hours");
                            
                            <div class="@string.Join(" ", cellClasses)" 
                                 style="width: var(--slot-width); height:@(rowHeight)px; flex-shrink: 0;"
                                 onclick="openJobModal('@machine', '@slotDateTime.ToString("yyyy-MM-ddTHH:mm")')"
                                 title="Click to add job at @slotDateTime.ToString("MMM dd, yyyy HH:mm")"
                                 data-slot-time="@slotDateTime.ToString("yyyy-MM-ddTHH:mm")"
                                 data-machine="@machine">
                                 
                                <!-- Jobs in this slot -->
                                @{ 
                                    var slotJobs = machineJobs.Where(job => 
                                        job.ScheduledStart < slotDateTime.Add(TimeSpan.FromMinutes(slotMinutes)) &&
                                        job.ScheduledEnd > slotDateTime).ToList();
                                }
                                
                                @foreach (var job in slotJobs)
                                {
                                    // Calculate job position and size within the slot
                                    var startDate = Model.Dates.Count > 0 ? Model.Dates[0].Date : DateTime.Today;
                                    var leftPosition = job.CalculateGridPosition(startDate, slotMinutes);
                                    var widthSlots = job.CalculateGridWidth(slotMinutes);
                                    
                                    // Only render the job if this is the starting slot
                                    var jobStartSlot = (int)Math.Floor(job.CalculateGridPosition(startDate, slotMinutes));
                                    var currentSlot = d * slotsPerDay + s;
                                    
                                    @if (jobStartSlot == currentSlot)
                                    {
                                        var leftPct = (100.0 * (leftPosition - currentSlot)).ToString("0.###", System.Globalization.CultureInfo.InvariantCulture) + "%";
                                        var widthPct = (100.0 * widthSlots).ToString("0.###", System.Globalization.CultureInfo.InvariantCulture) + "%";
                                        
                                        <!-- Task 9: Enhanced job block with color coding and notes support -->
                                        <div class="absolute top-2 bottom-2 job-block @machine.ToLower() status-@job.Status.ToLower().Replace(" ", "-")"
                                             style="left:@leftPct; width:@widthPct; min-width:40px; z-index:10;"
                                             data-material="@job.SlsMaterial"
                                             data-priority="@job.Priority"
                                             data-status="@job.Status"
                                             onclick="event.stopPropagation(); openJobModal('@machine', '@job.ScheduledStart.ToString("yyyy-MM-ddTHH:mm")', @job.Id)"
                                             title="@job.PartNumber - @job.Status (@job.DurationHours.ToString("F1")h) - @job.SlsMaterial"
                                             data-job-id="@job.Id">
                                            <partial name="_EnhancedJobBlock" model="job" />
                                        </div>
                                    }
                                }
                                
                                <!-- Enhanced Add Job button -->
                                <div class="absolute z-10 top-2 right-2 opacity-0 group-hover:opacity-100 transition-all duration-300 
                                            bg-indigo-600 text-white rounded-full w-7 h-7 text-xs font-bold shadow-lg 
                                            hover:bg-indigo-700 hover:scale-110 flex items-center justify-center pointer-events-none
                                            transform group-hover:scale-100 scale-90">
                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M12 4v16m8-8H4"></path>
                                    </svg>
                                </div>
                                
                                <!-- Time indicator for current slot -->
                                @if (isCurrentTimeSlot)
                                {
                                    <div class="absolute top-1 left-1 w-2 h-2 bg-blue-600 rounded-full animate-pulse"></div>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>