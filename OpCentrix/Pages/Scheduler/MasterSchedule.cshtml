@page
@using OpCentrix.ViewModels.Analytics
@model OpCentrix.Pages.Scheduler.MasterScheduleModel

@{
    ViewData["Title"] = "Master Schedule View";
    Layout = "_Layout";
    
    var viewModel = Model.ViewModel;
    var metrics = viewModel.Metrics;
    var alerts = viewModel.Alerts;
    var machines = viewModel.Machines;
    var jobs = viewModel.Jobs;
}

@section Styles {
    <link rel="stylesheet" href="~/css/master-schedule.css" asp-append-version="true" />
}

<!-- Master Schedule Container -->
<div class="master-schedule-container">
    <div class="max-w-full mx-auto px-4 py-6">
        
        <!-- Header -->
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6">
            <div class="flex items-center mb-4 lg:mb-0">
                <div class="w-12 h-12 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center mr-4">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                </div>
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Master Schedule</h1>
                    <p class="text-sm text-gray-500">
                        Comprehensive production visibility and analytics
                    </p>
                </div>
            </div>
            
            <!-- Real-time Controls -->
            <div class="flex items-center space-x-3">
                <span class="refresh-indicator" id="refresh-indicator">
                    <svg class="w-4 h-4 mr-1 animate-spin hidden" id="refresh-spinner" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    Last updated: <span id="last-updated">@DateTime.Now.ToString("HH:mm:ss")</span>
                </span>
                
                <button onclick="refreshAllData()" 
                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    Refresh
                </button>
            </div>
        </div>

        <!-- Filters Panel -->
        <div class="filters-panel" id="filters-panel">
            <form method="post" asp-page-handler="ApplyFilters" class="filters-grid">
                <div>
                    <label asp-for="Input.StartDate" class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                    <input asp-for="Input.StartDate" type="date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                
                <div>
                    <label asp-for="Input.EndDate" class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                    <input asp-for="Input.EndDate" type="date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                
                <div>
                    <label asp-for="Input.ViewMode" class="block text-sm font-medium text-gray-700 mb-1">View Mode</label>
                    <select asp-for="Input.ViewMode" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="daily">Daily View</option>
                        <option value="weekly">Weekly View</option>
                        <option value="monthly">Monthly View</option>
                    </select>
                </div>
                
                <div>
                    <label asp-for="Input.Department" class="block text-sm font-medium text-gray-700 mb-1">Department</label>
                    <select asp-for="Input.Department" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="all">All Departments</option>
                        @foreach (var dept in viewModel.Departments)
                        {
                            <option value="@dept">@dept</option>
                        }
                    </select>
                </div>
                
                <div>
                    <label asp-for="Input.Status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                    <select asp-for="Input.Status" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="all">All Statuses</option>
                        @foreach (var status in viewModel.Statuses)
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
                
                <div>
                    <label asp-for="Input.SearchTerm" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
                    <div class="relative">
                        <input asp-for="Input.SearchTerm" type="text" placeholder="Search jobs, parts, machines..." 
                               class="w-full px-3 py-2 pl-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <svg class="w-4 h-4 absolute left-3 top-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                
                <div class="flex space-x-2">
                    <button type="submit" class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                        Apply Filters
                    </button>
                    <a href="/Scheduler/MasterSchedule" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors">
                        Clear
                    </a>
                </div>
                
                <div class="export-buttons">
                    <button type="button" onclick="exportSchedule('excel')" class="px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors text-sm">
                        Export Excel
                    </button>
                    <button type="button" onclick="exportSchedule('pdf')" class="px-3 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors text-sm">
                        Export PDF
                    </button>
                </div>
            </form>
        </div>

        <!-- Key Metrics Dashboard -->
        <div class="mb-6" id="metrics-container">
            <partial name="_MasterScheduleMetrics" model="metrics" />
        </div>

        <!-- Main Content Grid -->
        <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
            
            <!-- Production Overview -->
            <div class="xl:col-span-2 space-y-6">
                
                <!-- Timeline View -->
                <div class="timeline-container" id="timeline-container">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">Production Timeline</h3>
                        <div class="flex items-center space-x-2">
                            <button onclick="refreshTimeline()" class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                </svg>
                                Refresh
                            </button>
                        </div>
                    </div>
                    <partial name="_MasterScheduleTimeline" model="viewModel.Timeline" />
                </div>
                
                <!-- Resource Utilization -->
                <div class="timeline-container" id="utilization-container">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">Resource Utilization</h3>
                        <div class="flex items-center space-x-2">
                            <button onclick="refreshUtilization()" class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                </svg>
                                Refresh
                            </button>
                        </div>
                    </div>
                    <partial name="_MasterScheduleUtilization" model="viewModel.ResourceUtilization" />
                </div>
            </div>
            
            <!-- Sidebar -->
            <div class="space-y-6">
                
                <!-- Active Alerts -->
                <div class="timeline-container" id="alerts-container">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-semibold text-gray-900">
                            Active Alerts
                            <span class="ml-2 px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs font-bold">@alerts.Count</span>
                        </h3>
                        <button onclick="refreshAlerts()" class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Refresh
                        </button>
                    </div>
                    <partial name="_MasterScheduleAlerts" model="alerts" />
                </div>
                
                <!-- Machine Status Overview -->
                <div class="timeline-container">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Machine Status</h3>
                    <div class="machine-status-grid">
                        @foreach (var machine in machines.Take(6))
                        {
                            <div class="machine-card">
                                <div class="machine-header">
                                    <div class="machine-name">@machine.MachineName</div>
                                    <div class="machine-status status-@machine.Status.ToLower()">@machine.Status</div>
                                </div>
                                
                                <div class="text-sm text-gray-600 mb-2">
                                    Utilization: @machine.UtilizationPercent.ToString("F1")%
                                </div>
                                <div class="utilization-bar">
                                    <div class="utilization-fill" style="width: @Math.Min(100, machine.UtilizationPercent)%"></div>
                                </div>
                                
                                <div class="text-xs text-gray-500 mt-2">
                                    Active: @machine.ActiveJobs | Queued: @machine.QueuedJobs
                                </div>
                                
                                @if (!string.IsNullOrEmpty(machine.CurrentJobPartNumber))
                                {
                                    <div class="text-xs text-blue-600 mt-1 font-medium">
                                        Current: @machine.CurrentJobPartNumber
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
                
                <!-- Quick Actions -->
                <div class="timeline-container">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
                    <div class="space-y-2">
                        <a href="/Scheduler" class="block w-full px-4 py-2 bg-blue-50 text-blue-700 rounded-md hover:bg-blue-100 transition-colors text-center">
                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            Go to Scheduler
                        </a>
                        
                        <a href="/Admin/Machines" class="block w-full px-4 py-2 bg-green-50 text-green-700 rounded-md hover:bg-green-100 transition-colors text-center">
                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            Manage Machines
                        </a>
                        
                        <a href="/Admin/Parts" class="block w-full px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 transition-colors text-center">
                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 11.172V5l-1-1z"></path>
                            </svg>
                            Manage Parts
                        </a>
                        
                        <a href="/Admin/Shifts" class="block w-full px-4 py-2 bg-orange-50 text-orange-700 rounded-md hover:bg-orange-100 transition-colors text-center">
                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            Manage Shifts
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
// Master Schedule JavaScript functionality
(function() {
    'use strict';
    
    let refreshInterval;
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        console.log('?? [MASTER-SCHEDULE] Initializing master schedule page');
        startAutoRefresh();
        setupEventListeners();
    });
    
    // Start automatic refresh every 30 seconds
    function startAutoRefresh() {
        refreshInterval = setInterval(function() {
            refreshMetrics();
            updateLastUpdatedTime();
        }, 30000);
        
        console.log('?? [MASTER-SCHEDULE] Auto-refresh started (30s interval)');
    }
    
    // Setup event listeners
    function setupEventListeners() {
        // Alert resolution handlers
        document.addEventListener('click', function(e) {
            if (e.target.matches('.resolve-alert-btn')) {
                const alertId = e.target.getAttribute('data-alert-id');
                resolveAlert(alertId);
            }
        });
        
        // Filter form enhancement
        const searchInput = document.querySelector('input[name="Input.SearchTerm"]');
        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    // Could implement live search here
                    console.log('?? [MASTER-SCHEDULE] Search term:', this.value);
                }, 500);
            });
        }
    }
    
    // Global refresh function
    window.refreshAllData = function() {
        console.log('?? [MASTER-SCHEDULE] Refreshing all data');
        showRefreshIndicator();
        
        Promise.all([
            refreshMetrics(),
            refreshAlerts(),
            refreshTimeline(),
            refreshUtilization()
        ]).then(() => {
            hideRefreshIndicator();
            updateLastUpdatedTime();
            showNotification('Data refreshed successfully', 'success');
        }).catch((error) => {
            hideRefreshIndicator();
            console.error('? [MASTER-SCHEDULE] Error refreshing data:', error);
            showNotification('Error refreshing data', 'error');
        });
    };
    
    // Refresh individual components
    window.refreshMetrics = function() {
        return htmx.ajax('GET', '/Scheduler/MasterSchedule?handler=RefreshMetrics', {
            target: '#metrics-container',
            swap: 'innerHTML'
        });
    };
    
    window.refreshAlerts = function() {
        return htmx.ajax('GET', '/Scheduler/MasterSchedule?handler=RefreshAlerts', {
            target: '#alerts-container',
            swap: 'innerHTML'
        });
    };
    
    window.refreshTimeline = function() {
        return htmx.ajax('GET', '/Scheduler/MasterSchedule?handler=TimelineData', {
            target: '#timeline-container',
            swap: 'innerHTML'
        });
    };
    
    window.refreshUtilization = function() {
        return htmx.ajax('GET', '/Scheduler/MasterSchedule?handler=UtilizationData', {
            target: '#utilization-container',
            swap: 'innerHTML'
        });
    };
    
    // Export functions
    window.exportSchedule = function(format) {
        console.log('?? [MASTER-SCHEDULE] Exporting schedule as', format);
        
        const startDate = document.querySelector('input[name="Input.StartDate"]').value;
        const endDate = document.querySelector('input[name="Input.EndDate"]').value;
        
        const params = new URLSearchParams({
            handler: 'ExportSchedule',
            format: format,
            start: startDate,
            end: endDate,
            includeMetrics: 'true',
            includeCharts: 'true',
            includeAlerts: 'true'
        });
        
        window.location.href = `/Scheduler/MasterSchedule?${params.toString()}`;
    };
    
    // Alert resolution
    function resolveAlert(alertId) {
        console.log('? [MASTER-SCHEDULE] Resolving alert:', alertId);
        
        fetch('/Scheduler/MasterSchedule?handler=ResolveAlert', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ alertId: parseInt(alertId) })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Alert resolved successfully', 'success');
                refreshAlerts();
            } else {
                showNotification('Failed to resolve alert', 'error');
            }
        })
        .catch(error => {
            console.error('? [MASTER-SCHEDULE] Error resolving alert:', error);
            showNotification('Error resolving alert', 'error');
        });
    }
    
    // UI Helper functions
    function showRefreshIndicator() {
        const indicator = document.getElementById('refresh-indicator');
        const spinner = document.getElementById('refresh-spinner');
        
        if (indicator && spinner) {
            indicator.classList.add('active');
            spinner.classList.remove('hidden');
        }
    }
    
    function hideRefreshIndicator() {
        const indicator = document.getElementById('refresh-indicator');
        const spinner = document.getElementById('refresh-spinner');
        
        if (indicator && spinner) {
            indicator.classList.remove('active');
            spinner.classList.add('hidden');
        }
    }
    
    function updateLastUpdatedTime() {
        const timeElement = document.getElementById('last-updated');
        if (timeElement) {
            timeElement.textContent = new Date().toLocaleTimeString();
        }
    }
    
    function showNotification(message, type) {
        // Simple notification implementation
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 px-6 py-4 rounded-lg shadow-lg z-50 text-white font-medium max-w-md transform transition-all duration-300 translate-x-full ${
            type === 'success' ? 'bg-green-600' : 'bg-red-600'
        }`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Animate in
        requestAnimationFrame(() => {
            notification.classList.remove('translate-x-full');
        });
        
        // Auto remove
        setTimeout(() => {
            notification.classList.add('translate-x-full', 'opacity-0');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, type === 'success' ? 3000 : 5000);
    }
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', function() {
        if (refreshInterval) {
            clearInterval(refreshInterval);
        }
    });
    
    console.log('? [MASTER-SCHEDULE] Master schedule JavaScript initialized');
})();
</script>
}