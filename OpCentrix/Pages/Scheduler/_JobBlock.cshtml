@model OpCentrix.Models.Job

@{
    var priorityClass = Model.Priority switch
    {
        1 => "priority-critical",
        2 => "priority-high", 
        3 => "priority-normal",
        4 => "priority-low",
        5 => "priority-lowest",
        _ => "priority-normal"
    };
    
    var statusClass = Model.Status?.ToLower().Replace(" ", "-") ?? "";
    var rushIndicator = Model.IsRushJob ? "?" : "";
    var statusColor = Model.GetStatusColor();
    var duration = $"{Model.DurationHours:F1}h";
    var shortPartNumber = Model.PartNumber?.Length > 10 ? Model.PartNumber.Substring(0, 10) + "..." : Model.PartNumber;
    
    // Enhanced status handling for print tracking integration
    var isScheduled = Model.Status == "Scheduled";
    var isBuilding = Model.Status == "Building" || Model.Status == "In Progress";
    var isComplete = Model.Status == "Completed" || Model.Status == "Complete";
    var isDelayed = Model.ActualStart.HasValue && Model.ActualStart > Model.ScheduledStart.AddMinutes(15);
    
    // Time display - show actual vs scheduled
    var displayStart = Model.ActualStart ?? Model.ScheduledStart;
    var displayEnd = Model.ActualEnd ?? Model.ScheduledEnd;
    var timeDisplay = isBuilding && Model.ActualStart.HasValue 
        ? $"Started: {Model.ActualStart:HH:mm}"
        : $"{Model.ScheduledStart:HH:mm}-{Model.ScheduledEnd:HH:mm}";
    
    // Option A: Stage and Cohort Enhancement
    var hasStageInfo = !string.IsNullOrEmpty(Model.WorkflowStage);
    var hasCohortInfo = Model.BuildCohortId.HasValue;
    var stageProgressPercent = Model.TotalStages > 0 ? (int)((Model.StageOrder ?? 0) / (double)Model.TotalStages * 100) : 0;
    
    // Stage color mapping for visual consistency
    var stageColors = new Dictionary<string, string>
    {
        ["SLS"] = "#3B82F6",      // Blue
        ["CNC"] = "#10B981",      // Green  
        ["EDM"] = "#F59E0B",      // Amber
        ["Coating"] = "#8B5CF6",  // Purple
        ["Assembly"] = "#06B6D4", // Cyan
        ["QC"] = "#EF4444",       // Red
        ["Shipping"] = "#6B7280"  // Gray
    };
    
    var stageColor = hasStageInfo && stageColors.ContainsKey(Model.WorkflowStage) 
        ? stageColors[Model.WorkflowStage] 
        : statusColor;
        
    // Determine if this is an SLS machine job for print tracking
    var slsMachines = new[] { "TI1", "TI2", "INC", "INC1", "INC2" };
    var isSlsJob = slsMachines.Contains(Model.MachineId);
}

<!-- Inline styles to avoid Razor compilation issues -->
<style>
    .delayed-job {
        border: 2px solid #EF4444 !important;
        animation: pulse-red 2s infinite;
    }
    
    @@keyframes pulse-red {
        0%, 100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7); }
        50% { box-shadow: 0 0 0 4px rgba(239, 68, 68, 0); }
    }
    
    .print-tracking-actions {
        border-radius: 6px;
    }
    
    .job-block-wrapper:not(:hover) .print-tracking-actions {
        pointer-events: none;
    }
</style>

<div class="job-block-wrapper relative group" 
     data-job-id="@Model.Id"
     data-machine-id="@Model.MachineId"
     data-status="@Model.Status"
     data-is-sls="@isSlsJob.ToString().ToLower()">
     
    <!-- Main Job Block -->
    <div class="job-block-content h-full flex flex-col justify-center p-1 @priorityClass relative overflow-hidden stage-job-block @(hasCohortInfo ? "cohort-job-block" : "") @(isDelayed ? "delayed-job" : "")"
         style="background-color: @statusColor; color: #ffffff;"
         data-job-id="@Model.Id"
         data-cohort-id="@Model.BuildCohortId"
         data-stage="@Model.WorkflowStage"
         data-stage-order="@Model.StageOrder"
         data-total-stages="@Model.TotalStages"
         onclick="openJobModalSafely('@Model.MachineId', '@Model.ScheduledStart.ToString("yyyy-MM-ddTHH:mm")', @Model.Id)">
        
        <!-- Stage and Cohort Indicators Overlay -->
        @if (hasStageInfo || hasCohortInfo)
        {
            <div class="job-context-overlay absolute top-0 left-0 right-0 flex justify-between items-start text-xs z-10">
                @if (hasStageInfo)
                {
                    <div class="stage-badge bg-black bg-opacity-40 text-white px-1 py-0.5 rounded-br text-xs font-medium leading-none"
                         style="border-left: 2px solid @stageColor;"
                         title="Stage @Model.StageOrder of @Model.TotalStages">
                        @Model.WorkflowStage @if (Model.TotalStages > 1) { <text>(@Model.StageOrder/@Model.TotalStages)</text> }
                    </div>
                }
                
                @if (hasCohortInfo)
                {
                    <div class="cohort-badge bg-black bg-opacity-40 text-white px-1 py-0.5 rounded-bl text-xs font-medium leading-none flex items-center"
                         title="Build Cohort #@Model.BuildCohortId">
                        <svg class="w-2 h-2 mr-0.5" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                        </svg>
                        B@Model.BuildCohortId
                    </div>
                }
            </div>
        }
        
        <!-- Status Indicator for Print Tracking -->
        @if (isDelayed)
        {
            <div class="absolute top-0 right-0 bg-red-500 text-white text-xs px-1 rounded-bl z-20" title="Delayed">
                ??
            </div>
        }
        else if (isBuilding)
        {
            <div class="absolute top-0 right-0 bg-amber-500 text-white text-xs px-1 rounded-bl z-20 animate-pulse" title="Building">
                ??
            </div>
        }
        else if (isComplete)
        {
            <div class="absolute top-0 right-0 bg-green-500 text-white text-xs px-1 rounded-bl z-20" title="Completed">
                ?
            </div>
        }
        
        <div class="job-block-title text-white font-bold text-xs leading-tight @(hasStageInfo || hasCohortInfo ? "mt-4" : "")">
            @rushIndicator@shortPartNumber
        </div>
        
        <div class="job-block-details text-white opacity-90 text-xs leading-tight mt-1">
            <div>Qty: @Model.Quantity</div>
            <div class="text-xs opacity-75">@timeDisplay</div>
            @if (!string.IsNullOrEmpty(Model.Operator))
            {
                <div class="truncate">@Model.Operator</div>
            }
        </div>
        
        <!-- Multi-stage Progress Bar -->
        @if (hasStageInfo && Model.TotalStages > 1)
        {
            <div class="stage-progress-bar absolute bottom-0 left-0 right-0 h-1 bg-black bg-opacity-20">
                <div class="progress-fill h-full transition-all duration-300" 
                     style="width: @(stageProgressPercent)%; background-color: @stageColor;"
                     title="Stage @Model.StageOrder of @Model.TotalStages - @(stageProgressPercent)% complete">
                </div>
            </div>
        }
        
        @if (Model.Priority <= 2)
        {
            <div class="absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full z-20"></div>
        }
        
        @if (Model.IsRushJob)
        {
            <div class="absolute top-0 left-0 w-0 h-0 border-l-4 border-l-red-600 border-b-4 border-b-transparent z-20"></div>
        }
        
        <!-- Enhanced Status indicator at bottom (only if no stage progress) -->
        @if (!hasStageInfo || Model.TotalStages <= 1)
        {
            <div class="absolute bottom-1 right-1 text-xs opacity-75">@Model.Status</div>
        }
    </div>
    
    <!-- Print Tracking Action Buttons (SLS jobs only) -->
    @if (isSlsJob)
    {
        <div class="print-tracking-actions absolute inset-0 bg-black bg-opacity-75 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-30"
             onclick="event.stopPropagation();">
             
            @if (isScheduled)
            {
                <!-- Start Print Button -->
                <div class="flex flex-col items-center space-y-1">
                    <button onclick="startPrintJobSafely(@Model.Id, '@Model.MachineId', '@Model.PartNumber')"
                            class="bg-green-600 hover:bg-green-700 text-white p-2 rounded-full shadow-lg transition-all duration-200 transform hover:scale-105"
                            title="Start Print Job">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M9 16h.01M12 18h.01m3-5a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </button>
                    <span class="text-white text-xs font-medium">Start Print</span>
                </div>
            }
            else if (isBuilding)
            {
                <!-- Complete Print Button -->
                <div class="flex flex-col items-center space-y-1">
                    <button onclick="completePrintJobSafely(@Model.Id, '@Model.MachineId', '@Model.PartNumber')"
                            class="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded-full shadow-lg transition-all duration-200 transform hover:scale-105"
                            title="Complete Print Job">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </button>
                    <span class="text-white text-xs font-medium">Complete</span>
                </div>
            }
            else if (isComplete)
            {
                <!-- View Details Button -->
                <div class="flex flex-col items-center space-y-1">
                    <button onclick="viewPrintDetailsSafely(@Model.Id)"
                            class="bg-gray-600 hover:bg-gray-700 text-white p-2 rounded-full shadow-lg transition-all duration-200 transform hover:scale-105"
                            title="View Print Details">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                    </button>
                    <span class="text-white text-xs font-medium">Details</span>
                </div>
            }
            
            <!-- Always show edit button on second row -->
            <div class="absolute bottom-2 right-2">
                <button onclick="openJobModalSafely('@Model.MachineId', '@Model.ScheduledStart.ToString("yyyy-MM-ddTHH:mm")', @Model.Id)"
                        class="bg-gray-500 hover:bg-gray-600 text-white p-1 rounded shadow transition-all duration-200"
                        title="Edit Job">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                </button>
            </div>
        </div>
    }
</div>

<script>
// CRITICAL FIX: Enhanced function definitions with multiple fallback methods
function openJobModalSafely(machineId, date, jobId = null) {
    console.log('?? [JOB-MODAL] openJobModalSafely called:', { machineId, date, jobId });
    
    try {
        // Method 1: Try the window.openJobModal function from scheduler
        if (typeof window.openJobModal === 'function') {
            console.log('? [JOB-MODAL] Using window.openJobModal');
            return window.openJobModal(machineId, date, jobId);
        }
        
        // Method 2: Try SchedulerApp.openJobModal if available
        if (typeof window.SchedulerApp !== 'undefined' && typeof window.SchedulerApp.openJobModal === 'function') {
            console.log('? [JOB-MODAL] Using SchedulerApp.openJobModal');
            return window.SchedulerApp.openJobModal(machineId, date, jobId);
        }
        
        // Method 3: Direct HTMX call fallback
        console.log('?? [JOB-MODAL] Using fallback HTMX method');
        if (typeof htmx !== 'undefined') {
            const params = new URLSearchParams({
                handler: 'ShowAddModal',
                machineId: machineId,
                date: date
            });
            
            if (jobId) {
                params.append('id', jobId);
            }
            
            const url = `/Scheduler?${params.toString()}`;
            
            if (typeof window.showLoadingIndicator === 'function') {
                window.showLoadingIndicator('Opening job form...');
            }
            
            htmx.ajax('GET', url, {
                target: '#modal-container',
                swap: 'innerHTML'
            }).then(() => {
                const modalContainer = document.getElementById('modal-container');
                if (modalContainer) {
                    modalContainer.style.display = 'flex';
                    modalContainer.classList.remove('hidden');
                    document.body.style.overflow = 'hidden';
                }
                if (typeof window.hideLoadingIndicator === 'function') {
                    window.hideLoadingIndicator();
                }
            }).catch((error) => {
                if (typeof window.hideLoadingIndicator === 'function') {
                    window.hideLoadingIndicator();
                }
                console.error('? [JOB-MODAL] Error loading modal:', error);
                showErrorNotificationSafely('Error opening job form. Please try again.');
            });
            
            return true;
        }
        
        // Method 4: Page navigation fallback
        console.log('?? [JOB-MODAL] Using page navigation fallback');
        const url = `/Scheduler?machineId=${encodeURIComponent(machineId)}&date=${encodeURIComponent(date)}${jobId ? '&id=' + jobId : ''}`;
        window.location.href = url;
        return true;
        
    } catch (error) {
        console.error('? [JOB-MODAL] Error in openJobModalSafely:', error);
        showErrorNotificationSafely('Error opening job modal');
        return false;
    }
}

// Enhanced print tracking integration functions
function startPrintJobSafely(jobId, machineId, partNumber) {
    console.log('?? [PRINT-START] Starting print job:', { jobId, machineId, partNumber });
    
    try {
        // Show confirmation
        if (!confirm(`Start print job for ${partNumber} on ${machineId}?`)) {
            return;
        }
        
        if (typeof window.showLoadingIndicator === 'function') {
            window.showLoadingIndicator('Starting print job...');
        }
        
        // Build URL for Print Tracking page with job context
        const url = `/PrintTracking?handler=StartPrintModal&jobId=${jobId}&machineId=${encodeURIComponent(machineId)}`;
        
        // Method 1: Try HTMX POST to update job status first
        if (typeof htmx !== 'undefined') {
            htmx.ajax('POST', `/Scheduler?handler=StartPrintJob`, {
                values: { jobId: jobId },
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
            }).then((response) => {
                if (typeof window.hideLoadingIndicator === 'function') {
                    window.hideLoadingIndicator();
                }
                
                const responseText = response?.responseText || '';
                let success = false;
                
                try {
                    const result = JSON.parse(responseText);
                    success = result.success;
                } catch (e) {
                    // If not JSON, assume success if no error status
                    success = true;
                }
                
                if (success) {
                    showSuccessNotificationSafely(`Print job started for ${partNumber}!`);
                    
                    // Open print tracking in new tab/window for operator
                    window.open(url, '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');
                    
                    // Refresh current scheduler view after short delay
                    setTimeout(() => {
                        if (typeof window.location !== 'undefined') {
                            window.location.reload();
                        }
                    }, 1500);
                } else {
                    showErrorNotificationSafely('Failed to start print job');
                }
            }).catch((error) => {
                if (typeof window.hideLoadingIndicator === 'function') {
                    window.hideLoadingIndicator();
                }
                console.error('? [PRINT-START] Error starting print job:', error);
                showErrorNotificationSafely('Error starting print job');
            });
        } else {
            // Method 2: Fallback if HTMX not available
            if (typeof window.hideLoadingIndicator === 'function') {
                window.hideLoadingIndicator();
            }
            window.open(url, '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');
        }
        
    } catch (error) {
        console.error('? [PRINT-START] Error in startPrintJobSafely:', error);
        showErrorNotificationSafely('Error starting print job');
    }
}

function completePrintJobSafely(jobId, machineId, partNumber) {
    console.log('?? [PRINT-COMPLETE] Completing print job:', { jobId, machineId, partNumber });
    
    try {
        // Redirect directly to Print Tracking completion form
        const url = `/PrintTracking?handler=PostPrintModal&jobId=${jobId}&machineId=${encodeURIComponent(machineId)}`;
        
        // Open in new tab for operator to complete
        window.open(url, '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');
        
    } catch (error) {
        console.error('? [PRINT-COMPLETE] Error in completePrintJobSafely:', error);
        showErrorNotificationSafely('Error opening completion form');
    }
}

function viewPrintDetailsSafely(jobId) {
    console.log('??? [PRINT-DETAILS] Viewing print details for job:', jobId);
    
    try {
        // Open print tracking dashboard with job details
        const url = `/PrintTracking?jobId=${jobId}`;
        window.open(url, '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');
        
    } catch (error) {
        console.error('? [PRINT-DETAILS] Error in viewPrintDetailsSafely:', error);
        showErrorNotificationSafely('Error opening print details');
    }
}

// Enhanced notification functions with multiple fallback methods
function showSuccessNotificationSafely(message) {
    try {
        // Method 1: Try SchedulerApp notification
        if (typeof window.SchedulerApp !== 'undefined' && typeof window.SchedulerApp.showSuccessNotification === 'function') {
            window.SchedulerApp.showSuccessNotification(message);
            return;
        }
        
        // Method 2: Try global showSuccessNotification
        if (typeof window.showSuccessNotification === 'function') {
            window.showSuccessNotification(message);
            return;
        }
        
        // Method 3: Try PrintTracking notification
        if (typeof window.PrintTracking !== 'undefined' && typeof window.PrintTracking.showToast === 'function') {
            window.PrintTracking.showToast(message, 'success');
            return;
        }
        
        // Method 4: Fallback to alert
        alert('? ' + message);
        
    } catch (error) {
        console.error('? [NOTIFICATION] Error showing success notification:', error);
        alert('? ' + message);
    }
}

function showErrorNotificationSafely(message) {
    try {
        // Method 1: Try SchedulerApp notification
        if (typeof window.SchedulerApp !== 'undefined' && typeof window.SchedulerApp.showErrorNotification === 'function') {
            window.SchedulerApp.showErrorNotification(message);
            return;
        }
        
        // Method 2: Try global showErrorNotification
        if (typeof window.showErrorNotification === 'function') {
            window.showErrorNotification(message);
            return;
        }
        
        // Method 3: Try PrintTracking notification
        if (typeof window.PrintTracking !== 'undefined' && typeof window.PrintTracking.showToast === 'function') {
            window.PrintTracking.showToast(message, 'error');
            return;
        }
        
        // Method 4: Fallback to alert
        alert('? ' + message);
        
    } catch (error) {
        console.error('? [NOTIFICATION] Error showing error notification:', error);
        alert('? ' + message);
    }
}

// Backward compatibility aliases
window.openJobModal = window.openJobModal || openJobModalSafely;
window.startPrintJob = window.startPrintJob || startPrintJobSafely;
window.completePrintJob = window.completePrintJob || completePrintJobSafely;
window.viewPrintDetails = window.viewPrintDetails || viewPrintDetailsSafely;

console.log('? [JOB-BLOCK] Enhanced job block functions loaded with fallback support');
</script>
