@page
@using OpCentrix.Models.ViewModels;
@model OpCentrix.Pages.Scheduler.IndexModel

@{
    ViewData["Title"] = "Production Scheduler";
    
    // Enhanced zoom handling with validation
    var zoomLevels = new[] { "day", "hour", "30min", "15min" };
    var zoomParam = Request.Query["zoom"].FirstOrDefault() ?? "day";
    var zoomIndex = Array.IndexOf(zoomLevels, zoomParam);
    if (zoomIndex < 0) zoomIndex = 0;
    var zoom = zoomLevels[zoomIndex];
    
    // Use the view model data
    var viewModel = Model.ViewModel;
    var slotsPerDay = viewModel.SlotsPerDay;
    var slotMinutes = viewModel.SlotMinutes;
    var slotTimes = Enumerable.Range(0, slotsPerDay).Select(i => TimeSpan.FromMinutes(i * slotMinutes)).ToList();
    var totalSlots = viewModel.Dates.Count * slotsPerDay;
}

@section Styles {
    <link rel="stylesheet" href="~/css/scheduler-modal.css" asp-append-version="true" />
}

<!-- Enhanced scheduler header -->
<div class="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
    <div class="flex flex-wrap gap-2">
        <!-- Date Navigation Controls -->
        <div class="flex items-center bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <button id="prevDay" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors"
                    onclick="navigateDay(-1)"
                    title="Previous Day">
                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Previous
            </button>
            <button id="today" 
                    class="px-4 py-2 text-sm font-semibold text-white bg-indigo-600 hover:bg-indigo-700 transition-colors"
                    onclick="navigateToToday()"
                    title="Go to Today">
                Today
            </button>
            <button id="nextDay" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors"
                    onclick="navigateDay(1)"
                    title="Next Day">
                Next
                <svg class="w-4 h-4 inline ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </button>
        </div>
        
        <!-- Zoom controls with enhanced UX -->
        <div class="flex items-center bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <button id="zoomOut" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    @(zoomIndex <= 0 ? "disabled" : "")>
                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
                Zoom Out
            </button>
            <div class="px-4 py-2 bg-gray-50 text-sm font-medium text-gray-700 border-x border-gray-200">
                @zoom.ToUpper()
            </div>
            <button id="zoomIn" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    @(zoomIndex >= zoomLevels.Length - 1 ? "disabled" : "")>
                Zoom In
                <svg class="w-4 h-4 inline ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
            </button>
        </div>
        
        <!-- Date range indicator -->
        @if (viewModel.Dates.Any())
        {
            <div class="px-3 py-2 bg-blue-50 border border-blue-200 rounded-lg text-sm font-medium text-blue-800">
                @if (viewModel.Dates.First().Date == DateTime.Today)
                {
                    <span class="inline-flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Today - @viewModel.Dates.Last().ToString("MMM dd, yyyy")
                    </span>
                }
                else
                {
                    <span>@viewModel.Dates.First().ToString("MMM dd") - @viewModel.Dates.Last().ToString("MMM dd, yyyy")</span>
                }
            </div>
        }
    </div>
    
    <div class="flex items-center gap-4">
        <div class="text-2xl font-bold text-indigo-900 tracking-tight">Production Scheduler</div>
        <button class="opcentrix-button opcentrix-button-primary"
                onclick="openJobModal('TI1', '@DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm")')">
            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Add Job
        </button>
    </div>
</div>

<!-- Loading indicator -->
<div id="loading-indicator" class="loading-indicator hidden">
    <div class="loading-content">
        <svg class="animate-spin h-4 w-4 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 008-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span>Loading...</span>
    </div>
</div>

<!-- MAIN SCHEDULER CONTENT -->
<div id="scheduler-main-content" class="scheduler-main-content">
    @if (!viewModel.Jobs.Any() && !viewModel.Machines.Any())
    {
        <!-- Empty state when no data -->
        <div class="empty-state">
            <div class="empty-state-content">
                <svg class="empty-state-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                </svg>
                <h3 class="empty-state-title">No Machines or Jobs Available</h3>
                <p class="empty-state-text">The scheduler data may be loading or no machines are configured.</p>
                <button class="opcentrix-button opcentrix-button-primary" onclick="location.reload()">
                    Refresh Page
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- CORRECTED Scheduler Grid Container -->
        <div class="scheduler-grid-container opcentrix-card" 
             data-zoom="@zoom"
             data-total-slots="@totalSlots">
            
            <!-- Header Row -->
            <div class="scheduler-header-row">
                <!-- Machine column header -->
                <div class="scheduler-grid-header sticky left-0 top-0 z-20 bg-white border-b border-r font-bold text-indigo-800">
                    <div class="flex items-center justify-center h-full">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 11.172V5l-1-1z"></path>
                        </svg>
                        Machine
                    </div>
                </div>
                
                <!-- Date headers container -->
                <div class="scheduler-date-headers">
                    @foreach (var date in viewModel.Dates)
                    {
                        for (int s = 0; s < slotsPerDay; s++)
                        {
                            var isFirstSlot = s == 0;
                            var slotTime = slotTimes[s];
                            var isToday = date.Date == DateTime.Today;
                            var headerClass = isFirstSlot ? "scheduler-grid-header font-semibold text-gray-800 border-r bg-white" : "scheduler-grid-header text-xs text-gray-600 border-r bg-gray-50";
                            
                            if (isToday && isFirstSlot) headerClass += " bg-blue-50 text-blue-800 border-blue-200";
                            
                            <div class="@headerClass" data-date="@date.ToString("yyyy-MM-dd")" data-slot="@s">
                                @if (isFirstSlot)
                                {
                                    <div class="text-center">
                                        <div class="font-bold">@date.ToString("ddd")</div>
                                        <div class="text-sm">@date.ToString("M/d")</div>
                                        @if (isToday)
                                        {
                                            <div class="text-xs text-blue-600 font-semibold">Today</div>
                                        }
                                    </div>
                                }
                                else if (slotsPerDay > 1)
                                {
                                    <div class="text-center">
                                        @slotTime.ToString(@"h\:mm")
                                        @if (slotTime.Hours >= 12) 
                                        {
                                            <span class="text-xs">PM</span>
                                        } 
                                        else 
                                        {
                                            <span class="text-xs">AM</span>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
            
            <!-- Machine Rows Container -->
            <div class="machine-rows-container">
                @foreach (var machine in viewModel.Machines)
                {
                    var rowHeight = viewModel.MachineRowHeights.GetValueOrDefault(machine, 160);
                    var machineJobs = viewModel.Jobs.Where(j => j.MachineId == machine).ToList();
                    var jobCount = machineJobs.Count;
                    
                    <!-- Individual Machine Row -->
                    <div class="machine-row" id="machine-row-@machine" data-machine="@machine">
                        <!-- Machine Label -->
                        <div class="scheduler-machine-label @machine.ToLower()" 
                             style="height:@(rowHeight)px;"
                             data-machine="@machine">
                            <div class="flex flex-col items-center justify-center h-full p-2">
                                <div class="text-lg font-bold">@machine</div>
                                <div class="text-xs opacity-75 mt-1">@jobCount job@(jobCount != 1 ? "s" : "")</div>
                                @if (machineJobs.Any())
                                {
                                    <div class="text-xs opacity-60">@machineJobs.Sum(j => j.DurationHours).ToString("F1")h total</div>
                                }
                            </div>
                        </div>
                        
                        <!-- Time Slots for this machine -->
                        <div class="time-slots-container">
                            @for (int d = 0; d < viewModel.Dates.Count; d++)
                            {
                                var day = viewModel.Dates[d];
                                for (int s = 0; s < slotsPerDay; s++)
                                {
                                    var slotTime = slotTimes[s];
                                    var slotDateTime = day.Add(slotTime);
                                    var isToday = day.Date == DateTime.Today;
                                    var isCurrentTimeSlot = isToday && 
                                        slotTime <= DateTime.Now.TimeOfDay && 
                                        slotTime.Add(TimeSpan.FromMinutes(slotMinutes)) > DateTime.Now.TimeOfDay;
                                    var isWeekend = day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday;
                                    var isPastWorkHours = slotTime < TimeSpan.FromHours(6) || slotTime >= TimeSpan.FromHours(18);
                                    
                                    var cellClasses = new List<string> { 
                                        "scheduler-grid-cell", "group", "relative", "cursor-pointer"
                                    };
                                    
                                    if (isCurrentTimeSlot) cellClasses.Add("current-time");
                                    else if (isWeekend) cellClasses.Add("weekend");
                                    else if (isPastWorkHours) cellClasses.Add("off-hours");
                                    
                                    <div class="@string.Join(" ", cellClasses)" 
                                         style="height:@(rowHeight)px;"
                                         onclick="openJobModal('@machine', '@slotDateTime.ToString("yyyy-MM-ddTHH:mm")')"
                                         title="Click to add job at @slotDateTime.ToString("MMM dd, yyyy HH:mm")"
                                         data-slot-time="@slotDateTime.ToString("yyyy-MM-ddTHH:mm")"
                                         data-machine="@machine">
                                         
                                        <!-- Jobs in this slot -->
                                        @{ 
                                            var slotJobs = machineJobs.Where(job => 
                                                job.ScheduledStart < slotDateTime.Add(TimeSpan.FromMinutes(slotMinutes)) &&
                                                job.ScheduledEnd > slotDateTime).ToList();
                                        }
                                        
                                        @foreach (var job in slotJobs)
                                        {
                                            // Calculate job position and size within the slot
                                            var startDate = viewModel.Dates.Count > 0 ? viewModel.Dates[0].Date : DateTime.Today;
                                            var leftPosition = job.CalculateGridPosition(startDate, slotMinutes);
                                            var widthSlots = job.CalculateGridWidth(slotMinutes);
                                            
                                            // Only render the job if this is the starting slot
                                            var jobStartSlot = (int)Math.Floor(job.CalculateGridPosition(startDate, slotMinutes));
                                            var currentSlot = d * slotsPerDay + s;
                                            
                                            @if (jobStartSlot == currentSlot)
                                            {
                                                var leftPct = (100.0 * (leftPosition - currentSlot)).ToString("0.###", System.Globalization.CultureInfo.InvariantCulture) + "%";
                                                var widthPct = (100.0 * widthSlots).ToString("0.###", System.Globalization.CultureInfo.InvariantCulture) + "%";
                                                
                                                <div class="absolute top-2 bottom-2 job-block @machine.ToLower() status-@job.Status.ToLower().Replace(" ", "-")"
                                                     style="left:@leftPct; width:@widthPct; min-width:40px; z-index:10;"
                                                     onclick="event.stopPropagation(); openJobModal('@machine', '@job.ScheduledStart.ToString("yyyy-MM-ddTHH:mm")', @job.Id)"
                                                     title="@job.PartNumber - @job.Status (@job.DurationHours.ToString("F1")h)"
                                                     data-job-id="@job.Id">
                                                    <partial name="_JobBlock" model="job" />
                                                </div>
                                            }
                                        }
                                        
                                        <!-- Enhanced Add Job button -->
                                        <div class="absolute z-10 top-2 right-2 opacity-0 group-hover:opacity-100 transition-all duration-300 
                                                    bg-indigo-600 text-white rounded-full w-7 h-7 text-xs font-bold shadow-lg 
                                                    hover:bg-indigo-700 hover:scale-110 flex items-center justify-center pointer-events-none
                                                    transform group-hover:scale-100 scale-90">
                                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M12 4v16m8-8H4"></path>
                                            </svg>
                                        </div>
                                        
                                        <!-- Time indicator for current slot -->
                                        @if (isCurrentTimeSlot)
                                        {
                                            <div class="absolute top-1 left-1 w-2 h-2 bg-blue-600 rounded-full animate-pulse"></div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Enhanced footer summary -->
<div class="max-w-full mt-6" id="footer-summary">
    <partial name="_FooterSummary" model="Model.Summary" />
</div>

<!-- Modal container -->
<div id="modal-container" class="modal-container hidden"></div>

<!-- Notification container -->
<div id="notification-container" class="notification-container"></div>

@section Scripts {
<script>
// OpCentrix Scheduler - Production-Ready JavaScript
// Comprehensive modal and HTMX handling with robust error management
(function() {
    'use strict';
    
    // Application state management
    const SchedulerApp = {
        currentZoom: '@zoom',
        zoomLevels: ['day', 'hour', '30min', '15min'],
        isModalOpen: false,
        isLoading: false,
        modalCloseTimeout: null,
        
        // Initialize the application
        init() {
            this.setupEventListeners();
            this.updateGridStyles(this.currentZoom);
            this.setupZoomControls();
            this.logDebugInfo();
        },
        
        // Setup all event listeners
        setupEventListeners() {
            // HTMX event listeners with improved error handling
            document.body.addEventListener('htmx:beforeRequest', (e) => {
                this.showLoadingIndicator('Processing request...');
            });
            
            document.body.addEventListener('htmx:afterRequest', (e) => {
                this.hideLoadingIndicator();
                this.handleHtmxResponse(e);
            });
            
            document.body.addEventListener('htmx:responseError', (e) => {
                this.hideLoadingIndicator();
                this.handleHtmxError(e);
            });
            
            document.body.addEventListener('htmx:sendError', (e) => {
                this.hideLoadingIndicator();
                this.showErrorNotification('Network error. Please check your connection.');
            });
            
            // Modal management
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && this.isModalOpen) {
                    this.closeJobModal();
                }
            });
            
            // Background click handling
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('modal-backdrop')) {
                    this.closeJobModal();
                }
            });
        },
        
        // Setup zoom controls
        setupZoomControls() {
            const zoomInBtn = document.getElementById('zoomIn');
            const zoomOutBtn = document.getElementById('zoomOut');
            
            if (zoomInBtn && !zoomInBtn.disabled) {
                zoomInBtn.addEventListener('click', () => this.changeZoom(1));
            }
            if (zoomOutBtn && !zoomOutBtn.disabled) {
                zoomOutBtn.addEventListener('click', () => this.changeZoom(-1));
            }
        },
        
        // Handle HTMX responses
        handleHtmxResponse(event) {
            const xhr = event.detail.xhr;
            const target = event.detail.target;
            
            // Check if this was a successful form submission
            if (xhr.status === 200 && target && target.id === 'modal-container') {
                // If modal container received new content, check if it's an error or success
                const content = target.innerHTML;
                
                if (content.includes('error-container') || content.includes('error-list')) {
                    // Form has validation errors - keep modal open
                    this.showJobModal();
                    return;
                }
                
                // Success case - close modal and refresh
                this.closeJobModal();
                this.showSuccessNotification('Job saved successfully!');
                
                // Small delay to ensure modal closes before refresh
                this.modalCloseTimeout = setTimeout(() => {
                    this.refreshScheduler();
                }, 300);
            } else if (xhr.status === 200 && target && target.id === 'scheduler-main-content') {
                // Scheduler content was updated successfully
                this.showSuccessNotification('Schedule updated successfully!');
                this.setupGridInteractions();
            }
        },
        
        // Handle HTMX errors
        handleHtmxError(event) {
            const xhr = event.detail.xhr;
            let errorMessage = 'An error occurred. Please try again.';
            
            if (xhr.status === 404) {
                errorMessage = 'Page not found. Please refresh and try again.';
            } else if (xhr.status === 500) {
                errorMessage = 'Server error. Please contact support if this continues.';
            } else if (xhr.status === 403) {
                errorMessage = 'Access denied. Please check your permissions.';
            }
            
            this.showErrorNotification(errorMessage);
        },
        
        // Grid style management
        updateGridStyles(zoom) {
            const root = document.documentElement;
            const slotWidths = { 
                'day': '120px', 
                'hour': '80px', 
                '30min': '50px', 
                '15min': '30px' 
            };
            root.style.setProperty('--slot-width', slotWidths[zoom] || '120px');
        },
        
        // Zoom functionality
        changeZoom(direction) {
            const currentIndex = this.zoomLevels.indexOf(this.currentZoom);
            const newIndex = currentIndex + direction;
            
            if (newIndex >= 0 && newIndex < this.zoomLevels.length) {
                const newZoom = this.zoomLevels[newIndex];
                const url = new URL(window.location);
                url.searchParams.set('zoom', newZoom);
                
                this.showLoadingIndicator('Changing zoom level...');
                window.location.href = url.toString();
            }
        },
        
        // Date navigation functionality
        navigateDay(direction) {
            const currentUrl = new URL(window.location);
            const currentStartDate = currentUrl.searchParams.get('startDate');
            const currentDate = currentStartDate ? new Date(currentStartDate) : new Date();
            
            const newDate = new Date(currentDate);
            newDate.setDate(newDate.getDate() + direction);
            
            currentUrl.searchParams.set('startDate', newDate.toISOString().split('T')[0]);
            
            this.showLoadingIndicator('Navigating to ' + (direction > 0 ? 'next' : 'previous') + ' day...');
            window.location.href = currentUrl.toString();
        },
        
        navigateToToday() {
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.delete('startDate'); // Remove startDate to default to today
            
            this.showLoadingIndicator('Navigating to today...');
            window.location.href = currentUrl.toString();
        },
        
        // Navigate to a specific day
        navigateTo(date) {
            const url = new URL(window.location);
            url.searchParams.set('date', date.toISOString().split('T')[0]);
            
            this.showLoadingIndicator('Navigating to ' + date.toLocaleDateString());
            window.location.href = url.toString();
        },
        
        // Setup grid interactions after content updates
        setupGridInteractions() {
            // Re-setup any dynamic interactions that may have been lost
            const gridCells = document.querySelectorAll('.scheduler-grid-cell');
            gridCells.forEach(cell => {
                if (!cell.hasAttribute('data-initialized')) {
                    cell.setAttribute('data-initialized', 'true');
                    // Add any additional cell interactions here
                }
            });
        },
        
        // Loading indicator management
        showLoadingIndicator(message = 'Loading...') {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                const messageSpan = indicator.querySelector('span');
                if (messageSpan) messageSpan.textContent = message;
                indicator.classList.remove('hidden');
                this.isLoading = true;
            }
        },
        
        hideLoadingIndicator() {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                indicator.classList.add('hidden');
                this.isLoading = false;
            }
        },
        
        // Refresh the entire scheduler
        refreshScheduler() {
            if (this.isLoading) return;
            
            this.showLoadingIndicator('Refreshing scheduler...');
            window.location.reload();
        },
        
        // Debug logging
        logDebugInfo() {
            @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
            {
                <text>
                console.log('=== OpCentrix Scheduler Debug Info ===');
                console.log('Current zoom:', this.currentZoom);
                console.log('Total slots:', @totalSlots);
                console.log('Machines:', @Html.Raw(System.Text.Json.JsonSerializer.Serialize(viewModel.Machines)));
                console.log('Jobs count:', @viewModel.Jobs.Count);
                console.log('Modal state:', this.isModalOpen);
                console.log('Loading state:', this.isLoading);
                console.log('=======================================');
                </text>
            }
        }
    };
    
    // Modal management functions (global scope for HTMX integration)
    window.openJobModal = function(machineId, date, jobId = null) {
        if (SchedulerApp.isModalOpen || SchedulerApp.isLoading) return;
        
        // Clear any pending close timeouts
        if (SchedulerApp.modalCloseTimeout) {
            clearTimeout(SchedulerApp.modalCloseTimeout);
            SchedulerApp.modalCloseTimeout = null;
        }
        
        const params = new URLSearchParams({
            handler: 'ShowAddModal',
            machineId: machineId || 'TI1',
            date: date || new Date().toISOString()
        });
        
        if (jobId) {
            params.append('id', jobId);
        }
        
        SchedulerApp.showLoadingIndicator('Opening job form...');
        
        htmx.ajax('GET', `/Scheduler?${params.toString()}`, {
            target: '#modal-container',
            swap: 'innerHTML'
        }).then(() => {
            SchedulerApp.showJobModal();
            SchedulerApp.hideLoadingIndicator();
        }).catch((error) => {
            SchedulerApp.hideLoadingIndicator();
            console.error('Error opening modal:', error);
            SchedulerApp.showErrorNotification('Failed to open job form. Please try again.');
        });
    };
    
    // Show modal
    SchedulerApp.showJobModal = function() {
        const modal = document.getElementById('modal-container');
        if (modal && !SchedulerApp.isModalOpen) {
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            document.body.style.overflow = 'hidden';
            SchedulerApp.isModalOpen = true;
            
            // Focus management for accessibility
            setTimeout(() => {
                const firstInput = modal.querySelector('input:not([type="hidden"]), select, textarea');
                if (firstInput) {
                    firstInput.focus();
                }
            }, 150);
        }
    };
    
    // Close modal
    SchedulerApp.closeJobModal = function() {
        const modal = document.getElementById('modal-container');
        if (modal && SchedulerApp.isModalOpen) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            document.body.style.overflow = '';
            SchedulerApp.isModalOpen = false;
            
            // Clear modal content after animation
            setTimeout(() => {
                modal.innerHTML = '';
            }, 300);
        }
    };
    
    // Notification functions
    SchedulerApp.showSuccessNotification = function(message) {
        SchedulerApp.showNotification(message, 'success');
    };
    
    SchedulerApp.showErrorNotification = function(message) {
        SchedulerApp.showNotification(message, 'error');
    };
    
    SchedulerApp.showNotification = function(message, type) {
        // Remove existing notifications
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(n => n.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type} fixed top-20 right-4 px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full text-white font-medium max-w-md`;
        
        const icon = type === 'success' 
            ? '<svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
            : '<svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
        
        notification.innerHTML = `
            <div class="flex items-center">
                ${icon}
                <span class="flex-1">${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white opacity-70 hover:opacity-100 transition-opacity">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Animate in
        requestAnimationFrame(() => {
            notification.classList.remove('translate-x-full');
        });
        
        // Auto remove
        setTimeout(() => {
            notification.classList.add('translate-x-full', 'opacity-0');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, type === 'success' ? 5000 : 8000);
    };
    
    // Expose functions globally
    window.SchedulerApp = SchedulerApp;
    window.showJobModal = SchedulerApp.showJobModal;
    window.closeJobModal = SchedulerApp.closeJobModal;
    window.showLoadingIndicator = SchedulerApp.showLoadingIndicator;
    window.hideLoadingIndicator = SchedulerApp.hideLoadingIndicator;
    window.showSuccessNotification = SchedulerApp.showSuccessNotification;
    window.showErrorNotification = SchedulerApp.showErrorNotification;
    window.navigateDay = SchedulerApp.navigateDay.bind(SchedulerApp);
    window.navigateToToday = SchedulerApp.navigateToToday.bind(SchedulerApp);
    
    // Development debug helper
    @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
    {
        <text>
        window.debugScheduler = function() {
            SchedulerApp.logDebugInfo();
        };
        </text>
    }
    
    // Initialize on DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => SchedulerApp.init());
    } else {
        SchedulerApp.init();
    }
    
})();
</script>
}
