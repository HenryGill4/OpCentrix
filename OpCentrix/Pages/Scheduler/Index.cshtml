@page
@using OpCentrix.Models.ViewModels;
@model OpCentrix.Pages.Scheduler.IndexModel

@{
    ViewData["Title"] = "Production Scheduler";
    
    // Task 9: Enhanced zoom handling with extended levels (12h to 1h, 2 months)
    var zoomLevels = new[] { "2month", "month", "week", "12h", "6h", "4h", "2h", "1h", "30min", "15min" };
    var zoomParam = Request.Query["zoom"].FirstOrDefault() ?? "week";
    var zoomIndex = Array.IndexOf(zoomLevels, zoomParam);
    if (zoomIndex < 0) zoomIndex = 2; // Default to week
    var zoom = zoomLevels[zoomIndex];
    
    // Task 10: Orientation parameter (horizontal/vertical)
    var orientationParam = Request.Query["orientation"].FirstOrDefault() ?? "horizontal";
    var isVertical = orientationParam == "vertical";
    
    // Use the view model data
    var viewModel = Model.ViewModel;
    var slotsPerDay = viewModel.SlotsPerDay; 
    var slotMinutes = viewModel.SlotMinutes;
    var slotTimes = Enumerable.Range(0, slotsPerDay).Select(i => TimeSpan.FromMinutes(i * slotMinutes)).ToList();
    var totalSlots = viewModel.Dates.Count * slotsPerDay;
    
    // Color scheme for enhanced job blocks
    var statusColors = new Dictionary<string, string>
    {
        ["scheduled"] = "#3B82F6",   // blue
        ["running"] = "#F59E0B",     // amber
        ["building"] = "#F59E0B",    // amber (SLS-specific)
        ["cooling"] = "#8B5CF6",     // purple (SLS-specific)
        ["post-processing"] = "#06B6D4", // cyan
        ["completed"] = "#10B981",   // green
        ["delayed"] = "#EF4444",     // red
        ["cancelled"] = "#6B7280",   // gray
        ["on-hold"] = "#F97316",     // orange
        ["preheating"] = "#FBBF24"   // yellow (SLS-specific)
    };
}

@section Styles {
    <link rel="stylesheet" href="~/css/scheduler-modal.css" asp-append-version="true" />
    <style>
        /* Task 9 & 10: Enhanced CSS for new zoom levels and orientation toggle */
        .scheduler-grid-container {
            --slot-width: @(zoom switch {
                "2month" => "30px",
                "month" => "40px", 
                "week" => "120px",
                "12h" => "60px",
                "6h" => "50px",
                "4h" => "40px", 
                "2h" => "30px",
                "1h" => "25px",
                "30min" => "20px",
                "15min" => "15px",
                _ => "120px"
            });
        }
        
        /* Task 10: Vertical orientation styles */
        .scheduler-vertical {
            display: flex;
            flex-direction: column;
        }
        
        .scheduler-vertical .scheduler-machines-header {
            display: flex;
            flex-direction: row;
            border-bottom: 2px solid #e5e7eb;
        }
        
        .scheduler-vertical .scheduler-time-column {
            width: 100px;
            flex-shrink: 0;
        }
        
        .scheduler-vertical .scheduler-machine-columns {
            display: flex;
            flex-direction: row;
            overflow-x: auto;
        }
        
        .scheduler-vertical .machine-column {
            min-width: 150px;
            border-right: 1px solid #e5e7eb;
        }
        
        /* Enhanced job block styles with better colors */
        .job-block {
            border-radius: 6px;
            padding: 4px 8px;
            font-size: 11px;
            font-weight: 600;
            color: white;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.2);
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .job-block:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        /* Enhanced material-based coloring */
        .job-block[data-material*="Ti-6Al-4V"] {
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        }
        
        .job-block[data-material*="Inconel"] {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }
        
        /* Priority indicators */
        .job-block[data-priority="1"]:before {
            content: "??";
            font-size: 10px;
            margin-right: 2px;
        }
        
        .job-block[data-priority="2"]:before {
            content: "?";
            font-size: 10px;
            margin-right: 2px;
        }
        
        /* Orientation toggle button */
        .orientation-toggle {
            position: relative;
            overflow: hidden;
        }
        
        .orientation-toggle input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
        }
        
        .orientation-toggle .slider {
            display: flex;
            align-items: center;
            background: #e5e7eb;
            border-radius: 9999px;
            padding: 4px;
            transition: all 0.3s ease;
            cursor: pointer;
            min-width: 120px;
        }
        
        .orientation-toggle .slider-option {
            flex: 1;
            text-align: center;
            padding: 8px 12px;
            border-radius: 9999px;
            font-size: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .orientation-toggle .slider-option.active {
            background: #3b82f6;
            color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .orientation-toggle .slider-option:not(.active) {
            color: #6b7280;
        }
        
        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .scheduler-grid-container {
                --slot-width: @(zoom switch {
                    "2month" => "20px",
                    "month" => "25px", 
                    "week" => "80px",
                    "12h" => "40px",
                    "6h" => "35px",
                    "4h" => "30px", 
                    "2h" => "25px",
                    "1h" => "20px",
                    "30min" => "15px",
                    "15min" => "12px",
                    _ => "80px"
                });
            }
        }
    </style>
}

<!-- Enhanced scheduler header with orientation toggle -->
<div class="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
    <div class="flex flex-wrap gap-2">
        <!-- Task 10: Orientation Toggle -->
        <div class="orientation-toggle">
            <div class="slider">
                <div class="slider-option @(!isVertical ? "active" : "")" onclick="toggleOrientation('horizontal')">
                    <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                    Horizontal
                </div>
                <div class="slider-option @(isVertical ? "active" : "")" onclick="toggleOrientation('vertical')">
                    <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4V20M20 12H4"></path>
                    </svg>
                    Vertical
                </div>
            </div>
        </div>
        
        <!-- Date Navigation Controls -->
        <div class="flex items-center bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <button id="prevPeriod" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors"
                    onclick="navigatePeriod(-1)"
                    title="Previous Period">
                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Previous
            </button>
            <button id="today" 
                    class="px-4 py-2 text-sm font-semibold text-white bg-indigo-600 hover:bg-indigo-700 transition-colors"
                    onclick="navigateToToday()"
                    title="Go to Today">
                Today
            </button>
            <button id="nextPeriod" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors"
                    onclick="navigatePeriod(1)"
                    title="Next Period">
                Next
                <svg class="w-4 h-4 inline ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </button>
        </div>
        
        <!-- Enhanced Zoom Controls with new levels -->
        <div class="flex items-center bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <button id="zoomOut" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    @(zoomIndex <= 0 ? "disabled" : "")>
                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
                Zoom Out
            </button>
            <div class="px-4 py-2 bg-gray-50 text-sm font-medium text-gray-700 border-x border-gray-200">
                @zoom.ToUpper()
            </div>
            <button id="zoomIn" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    @(zoomIndex >= zoomLevels.Length - 1 ? "disabled" : "")>
                Zoom In
                <svg class="w-4 h-4 inline ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
            </button>
        </div>
        
        <!-- Enhanced Date range indicator -->
        @if (viewModel.Dates.Any())
        {
            <div class="px-3 py-2 bg-blue-50 border border-blue-200 rounded-lg text-sm font-medium text-blue-800">
                @if (viewModel.Dates.Count == 1)
                {
                    <span class="inline-flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        @viewModel.Dates.First().ToString("MMM dd, yyyy")
                    </span>
                }
                else if (viewModel.Dates.Count <= 7)
                {
                    <span>@viewModel.Dates.First().ToString("MMM dd") - @viewModel.Dates.Last().ToString("MMM dd, yyyy")</span>
                }
                else
                {
                    <span>@viewModel.Dates.First().ToString("MMM dd") - @viewModel.Dates.Last().ToString("MMM dd, yyyy") (@viewModel.Dates.Count days)</span>
                }
            </div>
        }
    </div>
    
    <div class="flex items-center gap-4">
        <div class="text-2xl font-bold text-indigo-900 tracking-tight">Production Scheduler</div>
        <button class="opcentrix-button opcentrix-button-primary"
                onclick="openJobModal('@(viewModel.Machines.FirstOrDefault() ?? "DefaultMachine")', '@DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm")')">
            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Add Job
        </button>
    </div>
</div>

<!-- Loading indicator -->
<div id="loading-indicator" class="loading-indicator hidden">
    <div class="loading-content">
        <svg class="animate-spin h-4 w-4 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 008-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span>Loading...</span>
    </div>
</div>

<!-- MAIN SCHEDULER CONTENT with Orientation Support -->
<div id="scheduler-main-content" class="scheduler-main-content @(isVertical ? "scheduler-vertical" : "scheduler-horizontal")">
    @if (!viewModel.Jobs.Any() && !viewModel.Machines.Any())
    {
        <!-- Empty state when no data -->
        <div class="empty-state">
            <div class="empty-state-content">
                <svg class="empty-state-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                </svg>
                <h3 class="empty-state-title">No Machines or Jobs Available</h3>
                <p class="empty-state-text">The scheduler data may be loading or no machines are configured.</p>
                <button class="opcentrix-button opcentrix-button-primary" onclick="location.reload()">
                    Refresh Page
                </button>
            </div>
        </div>
    }
    else
    {
        @if (isVertical)
        {
            <!-- Task 10: Vertical Layout Implementation -->
            <partial name="_SchedulerVertical" model="viewModel" />
        }
        else
        {
            <!-- Horizontal Layout (Enhanced) -->
            <partial name="_SchedulerHorizontal" model="viewModel" />
        }
    }
</div>

<!-- Enhanced footer summary -->
<div class="max-w-full mt-6" id="footer-summary">
    <partial name="_FooterSummary" model="Model.Summary" />
</div>

<!-- Modal container -->
<div id="modal-container" class="modal-container hidden"></div>

<!-- Notification container -->
<div id="notification-container" class="notification-container"></div>

@section Scripts {
<script>
// OpCentrix Scheduler - Enhanced for Tasks 9 & 10
// Comprehensive zoom levels (12h to 1h, 2 months) and orientation toggle
(function() {
    'use strict';
    
    // Application state management
    const SchedulerApp = {
        // Task 9: Extended zoom levels (12h to 1h, 2 months)
        currentZoom: '@zoom',
        zoomLevels: ['2month', 'month', 'week', '12h', '6h', '4h', '2h', '1h', '30min', '15min'],
        
        // Task 10: Orientation state
        currentOrientation: '@(isVertical ? "vertical" : "horizontal")',
        
        isModalOpen: false,
        isLoading: false,
        modalCloseTimeout: null,
        
        // Initialize the application
        init() {
            this.setupEventListeners();
            this.updateGridStyles(this.currentZoom);
            this.setupZoomControls();
            this.setupOrientationToggle();
            this.logDebugInfo();
        },
        
        // Setup all event listeners
        setupEventListeners() {
            // HTMX event listeners with improved error handling
            document.body.addEventListener('htmx:beforeRequest', (e) => {
                this.showLoadingIndicator('Processing request...');
            });
            
            document.body.addEventListener('htmx:afterRequest', (e) => {
                this.hideLoadingIndicator();
                this.handleHtmxResponse(e);
            });
            
            document.body.addEventListener('htmx:responseError', (e) => {
                this.hideLoadingIndicator();
                this.handleHtmxError(e);
            });
            
            document.body.addEventListener('htmx:sendError', (e) => {
                this.hideLoadingIndicator();
                this.showErrorNotification('Network error. Please check your connection.');
            });
            
            // Modal management
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && this.isModalOpen) {
                    this.closeJobModal();
                }
            });
            
            // Background click handling
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('modal-backdrop')) {
                    this.closeJobModal();
                }
            });
        },
        
        // Setup zoom controls
        setupZoomControls() {
            const zoomInBtn = document.getElementById('zoomIn');
            const zoomOutBtn = document.getElementById('zoomOut');
            
            if (zoomInBtn && !zoomInBtn.disabled) {
                zoomInBtn.addEventListener('click', () => this.changeZoom(1));
            }
            if (zoomOutBtn && !zoomOutBtn.disabled) {
                zoomOutBtn.addEventListener('click', () => this.changeZoom(-1));
            }
        },
        
        // Task 10: Setup orientation toggle
        setupOrientationToggle() {
            // Store orientation preference in localStorage
            const savedOrientation = localStorage.getItem('scheduler-orientation');
            if (savedOrientation && savedOrientation !== this.currentOrientation) {
                this.toggleOrientation(savedOrientation);
            }
        },
        
        // Handle HTMX responses
        handleHtmxResponse(event) {
            const xhr = event.detail.xhr;
            const target = event.detail.target;
            
            // Check if this was a successful form submission
            if (xhr.status === 200 && target && target.id === 'modal-container') {
                // If modal container received new content, check if it's an error or success
                const content = target.innerHTML;
                
                if (content.includes('error-container') || content.includes('error-list')) {
                    // Form has validation errors - keep modal open
                    this.showJobModal();
                    return;
                }
                
                // Success case - close modal and refresh
                this.closeJobModal();
                this.showSuccessNotification('Job saved successfully!');
                
                // Small delay to ensure modal closes before refresh
                this.modalCloseTimeout = setTimeout(() => {
                    this.refreshScheduler();
                }, 300);
            } else if (xhr.status === 200 && target && target.id === 'scheduler-main-content') {
                // Scheduler content was updated successfully
                this.showSuccessNotification('Schedule updated successfully!');
                this.setupGridInteractions();
            }
        },
        
        // Handle HTMX errors
        handleHtmxError(event) {
            const xhr = event.detail.xhr;
            let errorMessage = 'An error occurred. Please try again.';
            
            if (xhr.status === 404) {
                errorMessage = 'Page not found. Please refresh and try again.';
            } else if (xhr.status === 500) {
                errorMessage = 'Server error. Please contact support if this continues.';
            } else if (xhr.status === 403) {
                errorMessage = 'Access denied. Please check your permissions.';
            }
            
            this.showErrorNotification(errorMessage);
        },
        
        // Grid style management
        updateGridStyles(zoom) {
            const root = document.documentElement;
            // Task 9: Enhanced slot widths for new zoom levels
            const slotWidths = { 
                '2month': '30px',
                'month': '40px', 
                'week': '120px',
                '12h': '60px',
                '6h': '50px',
                '4h': '40px', 
                '2h': '30px',
                '1h': '25px',
                '30min': '20px',
                '15min': '15px'
            };
            root.style.setProperty('--slot-width', slotWidths[zoom] || '120px');
        },
        
        // Zoom level management
        changeZoom(direction) {
            const currentIndex = this.zoomLevels.indexOf(this.currentZoom);
            const newIndex = currentIndex + direction;
            
            if (newIndex >= 0 && newIndex < this.zoomLevels.length) {
                const newZoom = this.zoomLevels[newIndex];
                const url = new URL(window.location);
                url.searchParams.set('zoom', newZoom);
                
                this.showLoadingIndicator('Changing zoom level...');
                window.location.href = url.toString();
            }
        },
        
        // Task 10: Orientation toggle functionality
        toggleOrientation(orientation) {
            const url = new URL(window.location);
            url.searchParams.set('orientation', orientation);
            
            // Save preference
            localStorage.setItem('scheduler-orientation', orientation);
            
            this.showLoadingIndicator(`Switching to ${orientation} layout...`);
            window.location.href = url.toString();
        },
        
        // Enhanced date navigation functionality
        navigatePeriod(direction) {
            const currentUrl = new URL(window.location);
            const currentStartDate = currentUrl.searchParams.get('startDate');
            const currentDate = currentStartDate ? new Date(currentStartDate) : new Date();
            
            // Calculate period length based on zoom level
            const periodDays = this.getPeriodDays(this.currentZoom);
            
            const newDate = new Date(currentDate);
            newDate.setDate(newDate.getDate() + (direction * periodDays));
            
            currentUrl.searchParams.set('startDate', newDate.toISOString().split('T')[0]);
            
            const periodName = direction > 0 ? 'next' : 'previous';
            this.showLoadingIndicator(`Navigating to ${periodName} period...`);
            window.location.href = currentUrl.toString();
        },
        
        getPeriodDays(zoom) {
            const periodMap = {
                '2month': 60,
                'month': 30,
                'week': 7,
                '12h': 5,
                '6h': 4,
                '4h': 3,
                '2h': 2,
                '1h': 1,
                '30min': 1,
                '15min': 1
            };
            return periodMap[zoom] || 7;
        },
        
        navigateToToday() {
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.delete('startDate'); // Remove startDate to default to today
            
            this.showLoadingIndicator('Navigating to today...');
            window.location.href = currentUrl.toString();
        },
        
        // Setup grid interactions after content updates
        setupGridInteractions() {
            // Re-setup any dynamic interactions that may have been lost
            const gridCells = document.querySelectorAll('.scheduler-grid-cell');
            gridCells.forEach(cell => {
                if (!cell.hasAttribute('data-initialized')) {
                    cell.setAttribute('data-initialized', 'true');
                    // Add any additional cell interactions here
                }
            });
            
            // Setup job block interactions
            const jobBlocks = document.querySelectorAll('.job-block');
            jobBlocks.forEach(block => {
                this.setupJobBlockInteractions(block);
            });
        },
        
        // Task 9: Enhanced job block interactions
        setupJobBlockInteractions(block) {
            // Tooltip enhancement
            block.addEventListener('mouseenter', (e) => {
                const jobId = e.target.getAttribute('data-job-id');
                const material = e.target.getAttribute('data-material');
                const priority = e.target.getAttribute('data-priority');
                const status = e.target.getAttribute('data-status');
                
                // Enhanced tooltip could be implemented here
                console.log(`Job hover: ID=${jobId}, Material=${material}, Priority=${priority}, Status=${status}`);
            });
        },
        
        // Loading indicator management
        showLoadingIndicator(message = 'Loading...') {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                const messageSpan = indicator.querySelector('span');
                if (messageSpan) messageSpan.textContent = message;
                indicator.classList.remove('hidden');
                this.isLoading = true;
            }
        },
        
        hideLoadingIndicator() {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                indicator.classList.add('hidden');
                this.isLoading = false;
            }
        },
        
        // Refresh the entire scheduler
        refreshScheduler() {
            if (this.isLoading) return;
            
            this.showLoadingIndicator('Refreshing scheduler...');
            window.location.reload();
        },
        
        // Debug logging
        logDebugInfo() {
            @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
            {
                <text>
                console.log('=== OpCentrix Enhanced Scheduler Debug Info ===');
                console.log('Current zoom:', this.currentZoom);
                console.log('Current orientation:', this.currentOrientation);
                console.log('Zoom levels:', this.zoomLevels);
                console.log('Total slots:', @totalSlots);
                console.log('Machines:', @Html.Raw(System.Text.Json.JsonSerializer.Serialize(viewModel.Machines)));
                console.log('Jobs count:', @viewModel.Jobs.Count);
                console.log('Modal state:', this.isModalOpen);
                console.log('Loading state:', this.isLoading);
                console.log('==============================================');
                </text>
            }
        };
    
    // Modal management functions (global scope for HTMX integration)
    window.openJobModal = function(machineId, date, jobId = null) {
        if (SchedulerApp.isModalOpen || SchedulerApp.isLoading) return;
        
        // Clear any pending close timeouts
        if (SchedulerApp.modalCloseTimeout) {
            clearTimeout(SchedulerApp.modalCloseTimeout);
            SchedulerApp.modalCloseTimeout = null;
        }
        
        const params = new URLSearchParams({
            handler: 'ShowAddModal',
            machineId: machineId || 'DefaultMachine',
            date: date || new Date().toISOString()
        });
        
        if (jobId) {
            params.append('id', jobId);
        }
        
        SchedulerApp.showLoadingIndicator('Opening job form...');
        
        htmx.ajax('GET', `/Scheduler?${params.toString()}`, {
            target: '#modal-container',
            swap: 'innerHTML'
        }).then(() => {
            SchedulerApp.showJobModal();
            SchedulerApp.hideLoadingIndicator();
        }).catch((error) => {
            SchedulerApp.hideLoadingIndicator();
            console.error('Error opening modal:', error);
            SchedulerApp.showErrorNotification('Failed to open job form. Please try again.');
        });
    };
    
    // Task 10: Global orientation toggle function
    window.toggleOrientation = function(orientation) {
        SchedulerApp.toggleOrientation(orientation);
    };
    
    // Show modal
    SchedulerApp.showJobModal = function() {
        const modal = document.getElementById('modal-container');
        if (modal && !SchedulerApp.isModalOpen) {
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            document.body.style.overflow = 'hidden';
            SchedulerApp.isModalOpen = true;
            
            // Focus management for accessibility
            setTimeout(() => {
                const firstInput = modal.querySelector('input:not([type="hidden"]), select, textarea');
                if (firstInput) {
                    firstInput.focus();
                }
            }, 150);
        }
    };
    
    // Close modal
    SchedulerApp.closeJobModal = function() {
        const modal = document.getElementById('modal-container');
        if (modal && SchedulerApp.isModalOpen) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            document.body.style.overflow = '';
            SchedulerApp.isModalOpen = false;
            
            // Clear modal content after animation
            setTimeout(() => {
                modal.innerHTML = '';
            }, 300);
        }
    };
    
    // Notification functions
    SchedulerApp.showSuccessNotification = function(message) {
        SchedulerApp.showNotification(message, 'success');
    };
    
    SchedulerApp.showErrorNotification = function(message) {
        SchedulerApp.showNotification(message, 'error');
    };
    
    SchedulerApp.showNotification = function(message, type) {
        // Remove existing notifications
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(n => n.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type} fixed top-20 right-4 px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full text-white font-medium max-w-md`;
        
        const icon = type === 'success' 
            ? '<svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
            : '<svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
        
        const bgColor = type === 'success' ? 'bg-green-600' : 'bg-red-600';
        notification.classList.add(bgColor);
        
        notification.innerHTML = `
            <div class="flex items-center">
                ${icon}
                <span class="flex-1">${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white opacity-70 hover:opacity-100 transition-opacity">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Animate in
        requestAnimationFrame(() => {
            notification.classList.remove('translate-x-full');
        });
        
        // Auto remove
        setTimeout(() => {
            notification.classList.add('translate-x-full', 'opacity-0');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, type === 'success' ? 5000 : 8000);
    };
    
    // Expose functions globally
    window.SchedulerApp = SchedulerApp;
    window.showJobModal = SchedulerApp.showJobModal;
    window.closeJobModal = SchedulerApp.closeJobModal;
    window.showLoadingIndicator = SchedulerApp.showLoadingIndicator;
    window.hideLoadingIndicator = SchedulerApp.hideLoadingIndicator;
    window.showSuccessNotification = SchedulerApp.showSuccessNotification;
    window.showErrorNotification = SchedulerApp.showErrorNotification;
    window.navigatePeriod = SchedulerApp.navigatePeriod.bind(SchedulerApp);
    window.navigateToToday = SchedulerApp.navigateToToday.bind(SchedulerApp);
    
    // Development debug helper
    @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
    {
        <text>
        window.debugScheduler = function() {
            SchedulerApp.logDebugInfo();
        };
        </text>
    }
    
    // Initialize on DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => SchedulerApp.init());
    } else {
        SchedulerApp.init();
    }
    
})();
</script>
}
