@page
@using OpCentrix.Models.ViewModels;
@model OpCentrix.Pages.Scheduler.IndexModel

@{
    ViewData["Title"] = "Scheduler";
    
    // Enhanced zoom handling with validation
    var zoomLevels = new[] { "day", "hour", "30min", "15min" };
    var zoomParam = Request.Query["zoom"].FirstOrDefault() ?? "day";
    var zoomIndex = Array.IndexOf(zoomLevels, zoomParam);
    if (zoomIndex < 0) zoomIndex = 0;
    var zoom = zoomLevels[zoomIndex];
    
    // Use the view model data
    var viewModel = Model.ViewModel;
    var slotsPerDay = viewModel.SlotsPerDay;
    var slotMinutes = viewModel.SlotMinutes;
    var slotTimes = Enumerable.Range(0, slotsPerDay).Select(i => TimeSpan.FromMinutes(i * slotMinutes)).ToList();
    var totalSlots = viewModel.Dates.Count * slotsPerDay;
}

<!-- Enhanced scheduler header -->
<div class="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
    <div class="flex flex-wrap gap-2">
        <!-- Zoom controls with enhanced UX -->
        <div class="flex items-center bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <button id="zoomOut" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    @(zoomIndex <= 0 ? "disabled" : "")>
                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                </svg>
                Zoom Out
            </button>
            <div class="px-4 py-2 bg-gray-50 text-sm font-medium text-gray-700 border-x border-gray-200">
                @zoom.ToUpper()
            </div>
            <button id="zoomIn" 
                    class="px-4 py-2 text-sm font-semibold text-indigo-700 hover:bg-indigo-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    @(zoomIndex >= zoomLevels.Length - 1 ? "disabled" : "")>
                Zoom In
                <svg class="w-4 h-4 inline ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
            </button>
        </div>
        
        <!-- Date range indicator -->
        @if (viewModel.Dates.Any())
        {
            <div class="px-3 py-2 bg-blue-50 border border-blue-200 rounded-lg text-sm font-medium text-blue-800">
                @viewModel.Dates.First().ToString("MMM dd") - @viewModel.Dates.Last().ToString("MMM dd, yyyy")
            </div>
        }
    </div>
    
    <div class="flex items-center gap-4">
        <div class="text-2xl font-bold text-indigo-900 tracking-tight">Production Scheduler</div>
        <button class="btn btn-primary"
                hx-get="/Scheduler?handler=ShowAddModal&machineId=TI1&date=@DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm")"
                hx-target="#modal-content" 
                hx-swap="innerHTML"
                hx-indicator=".request-indicator">
            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Add Job
        </button>
    </div>
</div>

<!-- Non-blocking loading indicator for HTMX requests -->
<div class="request-indicator htmx-indicator fixed top-4 left-1/2 transform -translate-x-1/2 z-50 pointer-events-none">
    <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-3 flex items-center space-x-2">
        <svg class="animate-spin h-4 w-4 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span class="text-sm text-gray-700 font-medium">Loading...</span>
    </div>
</div>

<!-- Enhanced scheduler grid -->
<div class="overflow-x-auto pb-8 bg-gray-50 rounded-lg border shadow-sm">
    <div id="schedulerBody" class="text-sm">
        <!-- Main grid header with improved styling -->
        <div class="scheduler-main-grid sticky top-0 z-10 bg-white border-b shadow-sm" 
             id="schedulerGrid" 
             style="grid-template-columns: var(--machine-label-width) repeat(@totalSlots, var(--slot-width)); min-width: max-content;"
             data-zoom="@zoom"
             data-total-slots="@totalSlots">
            
            <!-- Machine label header -->
            <div class="scheduler-machine-label sticky left-0 top-0 z-20 bg-white border-b border-r font-bold text-indigo-800">
                <div class="flex items-center justify-center h-full">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 11.172V5l-1-1z"></path>
                    </svg>
                    Machine
                </div>
            </div>
            
            <!-- Enhanced date and time slot headers -->
            @foreach (var date in viewModel.Dates)
            {
                for (int s = 0; s < slotsPerDay; s++)
                {
                    var isFirstSlot = s == 0;
                    var slotTime = slotTimes[s];
                    var isToday = date.Date == DateTime.Today;
                    var headerClass = isFirstSlot ? "scheduler-grid-header font-semibold text-gray-800 border-r bg-white" : "scheduler-grid-header text-xs text-gray-600 border-r bg-gray-50";
                    
                    if (isToday && isFirstSlot) headerClass += " bg-blue-50 text-blue-800 border-blue-200";
                    
                    <div class="@headerClass" style="min-width: var(--slot-width);" data-date="@date.ToString("yyyy-MM-dd")" data-slot="@s">
                        @if (isFirstSlot)
                        {
                            <div class="text-center">
                                <div class="font-bold">@date.ToString("ddd")</div>
                                <div class="text-sm">@date.ToString("M/d")</div>
                                @if (isToday)
                                {
                                    <div class="text-xs text-blue-600 font-semibold">Today</div>
                                }
                            </div>
                        }
                        else if (slotsPerDay > 1)
                        {
                            <div class="text-center">
                                @slotTime.ToString(@"h\:mm")
                                @if (slotTime.Hours >= 12) 
                                {
                                    <span class="text-xs">PM</span>
                                } 
                                else 
                                {
                                    <span class="text-xs">AM</span>
                                }
                            </div>
                        }
                    </div>
                }
            }
        </div>
        
        <!-- Enhanced machine rows -->
        <div class="bg-white">
            @if (!viewModel.Jobs.Any())
            {
                <div class="text-center py-16">
                    <div class="max-w-md mx-auto">
                        <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                        </svg>
                        <h3 class="text-lg font-semibold text-gray-700 mb-2">No Jobs Scheduled</h3>
                        <p class="text-gray-500 mb-4">Click "Add Job" or click on any time slot to schedule your first job.</p>
                        <button class="btn btn-primary"
                                hx-get="/Scheduler?handler=ShowAddModal&machineId=TI1&date=@DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm")"
                                hx-target="#modal-content" 
                                hx-swap="innerHTML"
                                hx-indicator=".request-indicator">
                            Get Started
                        </button>
                    </div>
                </div>
            }
            else
            {
                @foreach (var machine in viewModel.Machines)
                {
                    var rowHeight = viewModel.MachineRowHeights.GetValueOrDefault(machine, 160);
                    var machineJobs = viewModel.Jobs.Where(j => j.MachineId == machine).ToList();
                    var jobCount = machineJobs.Count;
                    
                    <div class="flex border-b border-gray-200 hover:bg-gray-50 transition-colors group" 
                         style="min-height:@(rowHeight)px;" 
                         data-machine="@machine">
                        
                        <!-- Enhanced machine label -->
                        <div class="scheduler-machine-label sticky left-0 z-10 bg-white border-r" 
                             style="width: var(--machine-label-width); min-width: var(--machine-label-width); height:@(rowHeight)px;">
                            <div class="flex flex-col items-center justify-center h-full p-2">
                                <div class="text-lg font-bold text-indigo-800">@machine</div>
                                <div class="text-xs text-gray-500 mt-1">@jobCount job@(jobCount != 1 ? "s" : "")</div>
                                @if (machineJobs.Any())
                                {
                                    var totalHours = machineJobs.Sum(j => j.DurationHours);
                                    <div class="text-xs text-gray-400">@totalHours.ToString("F1")h total</div>
                                }
                            </div>
                        </div>
                        
                        <!-- Machine row content -->
                        <div class="flex-1" style="min-height:@(rowHeight)px;">
                            <partial name="_MachineRow" 
                                     model="new MachineRowViewModel { 
                                         MachineId = machine, 
                                         Dates = viewModel.Dates, 
                                         Jobs = machineJobs, 
                                         RowHeight = rowHeight,
                                         SlotsPerDay = slotsPerDay,
                                         SlotMinutes = slotMinutes,
                                         Zoom = zoom
                                     }" />
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Enhanced footer summary -->
<div class="max-w-full mt-6" id="footer-summary">
    <partial name="_FooterSummary" model="Model.Summary" />
</div>

<!-- Modal container with enhanced styling -->
<div id="modal-content" class="fixed inset-0 bg-black bg-opacity-40 hidden items-center justify-center z-50 backdrop-blur-sm"></div>

@section Scripts {
<script>
// Enhanced scheduler initialization
window.addEventListener('DOMContentLoaded', function() {
    initializeScheduler();
});

function initializeScheduler() {
    const zoomLevels = ['day', 'hour', '30min', '15min'];
    const currentZoom = '@zoom';
    const currentIndex = zoomLevels.indexOf(currentZoom);
    
    // Update CSS variables based on zoom
    updateGridStyles(currentZoom);
    
    // Enhanced zoom functionality
    function updateZoom(direction) {
        const newIndex = currentIndex + direction;
        if (newIndex >= 0 && newIndex < zoomLevels.length) {
            const newZoom = zoomLevels[newIndex];
            const url = new URL(window.location);
            url.searchParams.set('zoom', newZoom);
            
            // Show loading indicator for navigation
            showLoadingIndicator();
            window.location.href = url.toString();
        }
    }
    
    document.getElementById('zoomIn')?.addEventListener('click', () => updateZoom(1));
    document.getElementById('zoomOut')?.addEventListener('click', () => updateZoom(-1));
}

function updateGridStyles(zoom) {
    const root = document.documentElement;
    const slotWidths = { day: '120px', hour: '80px', '30min': '50px', '15min': '30px' };
    root.style.setProperty('--slot-width', slotWidths[zoom] || '120px');
}

// Enhanced loading indicator management
function showLoadingIndicator(message = 'Loading...') {
    const indicator = document.querySelector('.request-indicator');
    if (indicator) {
        const messageSpan = indicator.querySelector('span');
        if (messageSpan) messageSpan.textContent = message;
        indicator.classList.remove('htmx-indicator');
        indicator.style.display = 'block';
    }
}

function hideLoadingIndicator() {
    const indicator = document.querySelector('.request-indicator');
    if (indicator) {
        indicator.style.display = 'none';
        indicator.classList.add('htmx-indicator');
    }
}

// HTMX event handlers for proper loading indicator management
document.body.addEventListener('htmx:beforeSend', function(e) {
    console.log('HTMX request starting...');
});

document.body.addEventListener('htmx:afterSwap', function (e) {
    // Hide loading indicator after any HTMX request
    hideLoadingIndicator();
    
    if (e.detail.target.id === "modal-content") {
        const container = document.getElementById("modal-content");
        if (container.innerHTML.trim() === "") {
            closeJobModal();
        } else {
            showJobModal();
        }
    }
    
    // Add animation class to updated machine rows
    if (e.detail.target.id && e.detail.target.id.startsWith('machine-row-')) {
        e.detail.target.classList.add('machine-row-updated');
        setTimeout(() => e.detail.target.classList.remove('machine-row-updated'), 300);
    }
});

document.body.addEventListener('htmx:sendError', function(e) {
    hideLoadingIndicator();
    console.error('HTMX send error:', e.detail);
    showErrorMessage('Network error. Please check your connection.');
});

document.body.addEventListener('htmx:responseError', function(e) {
    hideLoadingIndicator();
    console.error('HTMX response error:', e.detail);
    showErrorMessage('Request failed. Please try again.');
});

document.body.addEventListener('htmx:timeout', function(e) {
    hideLoadingIndicator();
    console.error('HTMX timeout:', e.detail);
    showErrorMessage('Request timed out. Please try again.');
});

// Enhanced modal functions
function showJobModal() {
    const modal = document.getElementById('modal-content');
    modal.classList.remove('hidden');
    modal.classList.add('flex');
    document.body.style.overflow = 'hidden';
    
    // Focus first input for accessibility
    setTimeout(() => {
        const firstInput = modal.querySelector('input, select, textarea');
        firstInput?.focus();
    }, 100);
}

function closeJobModal() {
    const modal = document.getElementById('modal-content');
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    modal.innerHTML = '';
    document.body.style.overflow = '';
}

// Enhanced global functions
window.openJobModal = function(machineId, date, jobId = null) {
    const params = new URLSearchParams({
        handler: 'ShowAddModal',
        machineId: machineId,
        date: date
    });
    if (jobId) params.append('id', jobId);
    
    showLoadingIndicator('Opening job form...');
    
    htmx.ajax('GET', `/Scheduler?${params.toString()}`, {
        target: '#modal-content',
        swap: 'innerHTML',
        indicator: '.request-indicator'
    }).catch(function(error) {
        hideLoadingIndicator();
        console.error('Error opening modal:', error);
        showErrorMessage('Failed to open job form. Please try again.');
    });
};

// Enhanced notification system
window.showSuccessMessage = function(message) {
    showNotification(message, 'success');
};

window.showErrorMessage = function(message) {
    showNotification(message, 'error');
};

function showNotification(message, type) {
    // Remove existing notifications
    document.querySelectorAll('.notification').forEach(n => n.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification notification-${type} fixed top-20 right-4 px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full text-white font-medium`;
    notification.innerHTML = `
        <div class="flex items-center">
            ${type === 'success' 
                ? '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
                : '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>'
            }
            ${message}
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => notification.classList.remove('translate-x-full'), 10);
    
    // Auto remove
    setTimeout(() => {
        notification.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => notification.remove(), 300);
    }, type === 'success' ? 3000 : 5000);
}

// Background modal close
document.addEventListener('click', function(e) {
    const modal = document.getElementById('modal-content');
    if (e.target === modal && modal.classList.contains('flex')) {
        closeJobModal();
    }
});

// Escape key modal close
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const modal = document.getElementById('modal-content');
        if (modal.classList.contains('flex')) {
            closeJobModal();
        }
    }
});

// Auto-hide loading indicator on page load
window.addEventListener('load', function() {
    hideLoadingIndicator();
});

// Hide loading indicator after DOM content is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Small delay to ensure all content is loaded
    setTimeout(hideLoadingIndicator, 100);
});

// Debug helpers for development
window.debugScheduler = function() {
    console.log('=== Scheduler Debug Info ===');
    console.log('Current zoom:', '@zoom');
    console.log('Total slots:', @totalSlots);
    console.log('Machine rows:', document.querySelectorAll('[data-machine]').length);
    console.log('Job blocks:', document.querySelectorAll('.job-block').length);
    console.log('Modal state:', document.getElementById('modal-content').classList.contains('flex') ? 'open' : 'closed');
    console.log('Loading indicator visible:', document.querySelector('.request-indicator').style.display !== 'none');
};

// Performance monitoring
if (window.performance && window.performance.mark) {
    window.performance.mark('scheduler-init-complete');
}
</script>
}
