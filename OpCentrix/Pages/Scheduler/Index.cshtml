@page
@using OpCentrix.Models.ViewModels;
@model OpCentrix.Pages.Scheduler.IndexModel

@{
    ViewData["Title"] = "Production Scheduler";
    
    // Task 9: Enhanced zoom handling with extended levels (12h to 1h, 2 months)
    var zoomLevels = new[] { "2month", "month", "week", "12h", "6h", "4h", "2h", "1h", "30min", "15min" };
    var zoomParam = Request.Query["zoom"].FirstOrDefault() ?? "week";
    var zoomIndex = Array.IndexOf(zoomLevels, zoomParam);
    if (zoomIndex < 0) zoomIndex = 2; // Default to week
    var zoom = zoomLevels[zoomIndex];
    
    // Task 10: Orientation parameter (horizontal/vertical)
    var orientationParam = Request.Query["orientation"].FirstOrDefault() ?? "horizontal";
    var isVertical = orientationParam == "vertical";
    
    // Use the view model data
    var viewModel = Model.ViewModel;
    var slotsPerDay = viewModel.SlotsPerDay; 
    var slotMinutes = viewModel.SlotMinutes;
    var slotTimes = Enumerable.Range(0, slotsPerDay).Select(i => TimeSpan.FromMinutes(i * slotMinutes)).ToList();
    var totalSlots = viewModel.Dates.Count * slotsPerDay;
    
    // Check if system is in empty state (no real machines configured)
    var hasRealMachines = viewModel.Machines.Any(m => !m.Contains("Not Configured"));
    var hasJobs = viewModel.Jobs.Any();
    var isEmptyState = !hasRealMachines && !hasJobs;
    
    // Get dynamic slot width values
    var slotWidthDesktop = zoom switch {
        "2month" => "30px",
        "month" => "40px", 
        "week" => "120px",
        "12h" => "60px",
        "6h" => "50px",
        "4h" => "40px", 
        "2h" => "30px",
        "1h" => "25px",
        "30min" => "20px",
        "15min" => "15px",
        _ => "120px"
    };
    
    var slotWidthMobile = zoom switch {
        "2month" => "20px",
        "month" => "25px", 
        "week" => "80px",
        "12h" => "40px",
        "6h" => "35px",
        "4h" => "30px", 
        "2h" => "25px",
        "1h" => "20px",
        "30min" => "15px",
        "15min" => "12px",
        _ => "80px"
    };
    
    // Color scheme for enhanced job blocks
    var statusColors = new Dictionary<string, string>
    {
        ["scheduled"] = "#3B82F6",   // blue
        ["running"] = "#F59E0B",     // amber
        ["building"] = "#F59E0B",    // amber (SLS-specific)
        ["cooling"] = "#8B5CF6",     // purple (SLS-specific)
        ["post-processing"] = "#06B6D4", // cyan
        ["completed"] = "#10B981",   // green
        ["delayed"] = "#EF4444",     // red
        ["cancelled"] = "#6B7280",   // gray
        ["on-hold"] = "#F97316",     // orange
        ["preheating"] = "#FBBF24"   // yellow (SLS-specific)
    };
}
    
@section Styles {
    <link rel="stylesheet" href="~/css/scheduler.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/scheduler-modal.css" asp-append-version="true" />
    <style>
        /* Task 9 & 10: Enhanced CSS for new zoom levels and orientation toggle */
        .scheduler-grid-container {
            --slot-width: @slotWidthDesktop;
        }
        
        /* Task 10: Vertical orientation styles */
        .scheduler-vertical {
            display: flex;
            flex-direction: column;
        }
        
        .scheduler-vertical .scheduler-machines-header {
            display: flex;
            flex-direction: row;
            border-bottom: 2px solid #e5e7eb;
        }
        
        .scheduler-vertical .scheduler-time-column {
            width: 100px;
            flex-shrink: 0;
        }
        
        .scheduler-vertical .scheduler-machine-columns {
            display: flex;
            flex-direction: row;
            overflow-x: auto;
        }
        
        .scheduler-vertical .machine-column {
            min-width: 150px;
            border-right: 1px solid #e5e7eb;
        }
        
        /* Enhanced job block styles with better colors */
        .job-block {
            border-radius: 6px;
            padding: 4px 8px;
            font-size: 11px;
            font-weight: 600;
            color: white;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.2);
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .job-block:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        /* Enhanced material-based coloring */
        .job-block[data-material*="Ti-6Al-4V"] {
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        }
        
        .job-block[data-material*="Inconel"] {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }
        
        /* Priority indicators */
        .job-block[data-priority="1"]:before {
            content: "??";
            font-size: 10px;
            margin-right: 2px;
        }
        
        .job-block[data-priority="2"]:before {
            content: "?";
            font-size: 10px;
            margin-right: 2px;
        }
        
        /* Orientation toggle button */
        .orientation-toggle {
            position: relative;
            overflow: hidden;
        }
        
        .orientation-toggle input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
        }
        
        .orientation-toggle .slider {
            display: flex;
            align-items: center;
            background: #e5e7eb;
            border-radius: 9999px;
            padding: 4px;
            transition: all 0.3s ease;
            cursor: pointer;
            min-width: 120px;
        }
        
        .orientation-toggle .slider-option {
            flex: 1;
            text-align: center;
            padding: 8px 12px;
            border-radius: 9999px;
            font-size: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .orientation-toggle .slider-option.active {
            background: #3b82f6;
            color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .orientation-toggle .slider-option:not(.active) {
            color: #6b7280;
        }
        
        /* Empty state styling */
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 400px;
            padding: 3rem;
            text-align: center;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border-radius: 12px;
            border: 2px dashed #cbd5e1;
            margin: 2rem 0;
        }
        
        .empty-state-icon {
            width: 80px;
            height: 80px;
            color: #64748b;
            margin-bottom: 1.5rem;
        }
        
        .empty-state-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 1rem;
        }
        
        .empty-state-text {
            font-size: 1.125rem;
            color: #64748b;
            margin-bottom: 2rem;
            max-width: 500px;
            line-height: 1.6;
        }
        
        .setup-instructions {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            border: 1px solid #e2e8f0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-top: 1rem;
            text-align: left;
            max-width: 600px;
        }
        
        .setup-instructions h4 {
            color: #1e293b;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }
        
        .setup-instructions ol {
            color: #475569;
            padding-left: 1.25rem;
            line-height: 1.7;
        }
        
        .setup-instructions li {
            margin-bottom: 0.5rem;
        }
        
        .setup-instructions code {
            background: #f1f5f9;
            padding: 0.125rem 0.25rem;
            border-radius: 0.25rem;
            font-family: 'Courier New', monospace;
            font-size: 0.875rem;
        }
        
        .demo-machines-notice {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            color: #92400e;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
        }
        
        .demo-machines-notice svg {
            width: 20px;
            height: 20px;
            margin-right: 0.5rem;
            flex-shrink: 0;
        }
        
        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .scheduler-grid-container {
                --slot-width: @slotWidthMobile;
            }
            
            .empty-state {
                padding: 2rem;
                min-height: 300px;
            }
            
            .empty-state-title {
                font-size: 1.5rem;
            }
            
            .empty-state-text {
                font-size: 1rem;
            }
            
            .setup-instructions {
                padding: 1rem;
            }
        }
    </style>
}

@section Scripts {
<script src="~/js/scheduler-ui.js" asp-append-version="true"></script>
<script>
// OpCentrix Scheduler - Enhanced for Tasks 9 & 10
// Comprehensive zoom levels (12h to 1h, 2 months) and orientation toggle
(function() {
    'use strict';
    
    // CRITICAL FIX: Define openJobModal function immediately
    window.openJobModal = function(machineId, date, jobId = null) {
        console.log('?? [MODAL] Opening job modal for:', { machineId, date, jobId });
        
        if (!machineId || !date) {
            console.error('? [MODAL] Missing required parameters');
            if (window.showErrorNotification) {
                window.showErrorNotification('Missing machine ID or date for opening job modal');
            }
            return false;
        }
        
        // Build URL for modal content
        const params = new URLSearchParams({
            handler: 'ShowAddModal',
            machineId: machineId,
            date: date
        });
        
        if (jobId) {
            params.append('id', jobId);
        }
        
        const url = `/Scheduler?${params.toString()}`;
        
        console.log('?? [MODAL] Fetching modal content from:', url);
        
        // Show loading indicator
        if (window.showLoadingIndicator) {
            window.showLoadingIndicator('Opening job form...');
        }
        
        // Use HTMX to load modal content
        if (typeof htmx !== 'undefined') {
            htmx.ajax('GET', url, {
                target: '#modal-container',
                swap: 'innerHTML'
            }).then(() => {
                showModalContainer();
                if (window.hideLoadingIndicator) {
                    window.hideLoadingIndicator();
                }
                console.log('? [MODAL] Modal opened successfully');
            }).catch((error) => {
                if (window.hideLoadingIndicator) {
                    window.hideLoadingIndicator();
                }
                console.error('? [MODAL] Error loading modal:', error);
                if (window.showErrorNotification) {
                    window.showErrorNotification('Error opening job form. Please try again.');
                }
            });
        } else {
            // Fallback if HTMX is not available
            console.error('? [MODAL] HTMX not available');
            if (window.hideLoadingIndicator) {
                window.hideLoadingIndicator();
            }
            if (window.showErrorNotification) {
                window.showErrorNotification('System error: HTMX not loaded. Please refresh the page.');
            }
        }
        
        return true;
    };
    
    // Show modal container
    function showModalContainer() {
        const modalContainer = document.getElementById('modal-container');
        if (modalContainer) {
            modalContainer.style.display = 'flex';
            modalContainer.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
            
            // Focus management for accessibility
            setTimeout(() => {
                const firstInput = modalContainer.querySelector('input:not([type="hidden"]), select, textarea');
                if (firstInput) {
                    firstInput.focus();
                }
            }, 150);
        }
    }
    
    // Close modal function
    window.closeJobModal = function() {
        console.log('?? [MODAL] Closing job modal');
        
        const modalContainer = document.getElementById('modal-container');
        if (modalContainer) {
            modalContainer.style.display = 'none';
            modalContainer.classList.add('hidden');
            document.body.style.overflow = '';
            
            // Clear modal content after animation
            setTimeout(() => {
                modalContainer.innerHTML = '';
            }, 300);
            
            console.log('? [MODAL] Modal closed successfully');
        }
    };
    
    // Quick start with demo machines function
    window.seedDefaultMachines = function() {
        if (window.showLoadingIndicator) {
            window.showLoadingIndicator('Setting up demo machines...');
        }
        
        // Use HTMX to seed default machines
        if (typeof htmx !== 'undefined') {
            htmx.ajax('POST', '/Scheduler?handler=SeedDefaultMachines', {
                target: '#scheduler-main-content',
                swap: 'outerHTML'
            }).then(() => {
                if (window.hideLoadingIndicator) {
                    window.hideLoadingIndicator();
                }
                if (window.showSuccessNotification) {
                    window.showSuccessNotification('Demo machines created successfully! You can now add jobs and explore the scheduler.');
                }
                // Refresh the page to show the new state
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            }).catch((error) => {
                if (window.hideLoadingIndicator) {
                    window.hideLoadingIndicator();
                }
                console.error('? [SEED] Error seeding default machines:', error);
                if (window.showErrorNotification) {
                    window.showErrorNotification('Error creating demo machines. Please try again or contact support.');
                }
            });
        } else {
            if (window.hideLoadingIndicator) {
                window.hideLoadingIndicator();
            }
            if (window.showErrorNotification) {
                window.showErrorNotification('System error: HTMX not loaded. Please refresh the page.');
            }
        }
    };
    
    // Application state management
    const SchedulerApp = {
        // Task 9: Extended zoom levels (12h to 1h, 2 months)
        currentZoom: '@zoom',
        zoomLevels: ['2month', 'month', 'week', '12h', '6h', '4h', '2h', '1h', '30min', '15min'],
        
        // Task 10: Orientation state
        currentOrientation: '@(isVertical ? "vertical" : "horizontal")',
        
        isModalOpen: false,
        isLoading: false,
        modalCloseTimeout: null,
        
        // Initialize the application
        init() {
            this.setupEventListeners();
            this.updateGridStyles(this.currentZoom);
            this.setupZoomControls();
            this.setupOrientationToggle();
            this.setupAddJobButton();
            this.logDebugInfo();
        },
        
        // Setup Add Job button
        setupAddJobButton() {
            const addJobBtn = document.getElementById('add-job-btn');
            if (addJobBtn) {
                addJobBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const machineId = this.getAttribute('data-machine');
                    const date = this.getAttribute('data-date');
                    
                    console.log('?? [BUTTON] Add Job button clicked:', { machineId, date });
                    
                    if (window.openJobModal) {
                        window.openJobModal(machineId, date);
                    } else {
                        console.error('? [BUTTON] openJobModal function not available');
                    }
                });
                
                console.log('? [INIT] Add Job button event listener attached');
            } else {
                console.log('?? [INIT] Add Job button not found (normal for empty state)');
            }
        },
        
        // Setup all event listeners
        setupEventListeners() {
            // HTMX event listeners with improved error handling
            document.body.addEventListener('htmx:beforeRequest', (e) => {
                this.showLoadingIndicator('Processing request...');
            });
            
            document.body.addEventListener('htmx:afterRequest', (e) => {
                this.hideLoadingIndicator();
                this.handleHtmxResponse(e);
            });
            
            document.body.addEventListener('htmx:responseError', (e) => {
                this.hideLoadingIndicator();
                this.handleHtmxError(e);
            });
            
            document.body.addEventListener('htmx:sendError', (e) => {
                this.hideLoadingIndicator();
                this.showErrorNotification('Network error. Please check your connection.');
            });
            
            // Modal management
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    const modalContainer = document.getElementById('modal-container');
                    if (modalContainer && !modalContainer.classList.contains('hidden')) {
                        window.closeJobModal();
                    }
                }
            });
            
            // Background click handling
            document.addEventListener('click', (e) => {
                if (e.target.id === 'modal-container' || e.target.classList.contains('modal-backdrop')) {
                    window.closeJobModal();
                }
            });
        },
        
        // Setup zoom controls
        setupZoomControls() {
            const zoomInBtn = document.getElementById('zoomIn');
            const zoomOutBtn = document.getElementById('zoomOut');
            
            if (zoomInBtn && !zoomInBtn.disabled) {
                zoomInBtn.addEventListener('click', () => this.changeZoom(1));
            }
            if (zoomOutBtn && !zoomOutBtn.disabled) {
                zoomOutBtn.addEventListener('click', () => this.changeZoom(-1));
            }
        },
        
        // Task 10: Setup orientation toggle
        setupOrientationToggle() {
            // Store orientation preference in localStorage
            const savedOrientation = localStorage.getItem('scheduler-orientation');
            if (savedOrientation && savedOrientation !== this.currentOrientation) {
                this.toggleOrientation(savedOrientation);
            }
        },
        
        // Handle HTMX responses
        handleHtmxResponse(event) {
            const xhr = event.detail.xhr;
            const target = event.detail.target;
            
            // Check if this was a successful form submission
            if (xhr.status === 200 && target && target.id === 'modal-container') {
                // If modal container received new content, check if it's an error or success
                const content = target.innerHTML;
                
                if (content.includes('error-container') || content.includes('error-list')) {
                    // Form has validation errors - keep modal open
                    showModalContainer();
                    return;
                }
                
                // Success case - close modal and refresh
                window.closeJobModal();
                this.showSuccessNotification('Job saved successfully!');
                
                // Small delay to ensure modal closes before refresh
                this.modalCloseTimeout = setTimeout(() => {
                    this.refreshScheduler();
                }, 300);
            } else if (xhr.status === 200 && target && target.id === 'scheduler-main-content') {
                // Scheduler content was updated successfully
                this.showSuccessNotification('Schedule updated successfully!');
                this.setupGridInteractions();
            }
        },
        
        // Handle HTMX errors
        handleHtmxError(event) {
            const xhr = event.detail.xhr;
            let errorMessage = 'An error occurred. Please try again.';
            
            if (xhr.status === 404) {
                errorMessage = 'Page not found. Please refresh and try again.';
            } else if (xhr.status === 500) {
                errorMessage = 'Server error. Please contact support if this continues.';
            } else if (xhr.status === 403) {
                errorMessage = 'Access denied. Please check your permissions.';
            }
            
            this.showErrorNotification(errorMessage);
        },
        
        // Grid style management
        updateGridStyles(zoom) {
            const root = document.documentElement;
            // Task 9: Enhanced slot widths for new zoom levels
            const slotWidths = { 
                '2month': '30px',
                'month': '40px', 
                'week': '120px',
                '12h': '60px',
                '6h': '50px',
                '4h': '40px', 
                '2h': '30px',
                '1h': '25px',
                '30min': '20px',
                '15min': '15px'
            };
            root.style.setProperty('--slot-width', slotWidths[zoom] || '120px');
        },
        
        // Zoom level management
        changeZoom(direction) {
            const currentIndex = this.zoomLevels.indexOf(this.currentZoom);
            const newIndex = currentIndex + direction;
            
            if (newIndex >= 0 && newIndex < this.zoomLevels.length) {
                const newZoom = this.zoomLevels[newIndex];
                const url = new URL(window.location);
                url.searchParams.set('zoom', newZoom);
                
                this.showLoadingIndicator('Changing zoom level...');
                window.location.href = url.toString();
            }
        },
        
        // Task 10: Orientation toggle functionality
        toggleOrientation(orientation) {
            const url = new URL(window.location);
            url.searchParams.set('orientation', orientation);
            
            // Save preference
            localStorage.setItem('scheduler-orientation', orientation);
            
            this.showLoadingIndicator(`Switching to ${orientation} layout...`);
            window.location.href = url.toString();
        },
        
        // Enhanced date navigation functionality
        navigatePeriod(direction) {
            const currentUrl = new URL(window.location);
            const currentStartDate = currentUrl.searchParams.get('startDate');
            const currentDate = currentStartDate ? new Date(currentStartDate) : new Date();
            
            // Calculate period length based on zoom level
            const periodDays = this.getPeriodDays(this.currentZoom);
            
            const newDate = new Date(currentDate);
            newDate.setDate(newDate.getDate() + (direction * periodDays));
            
            currentUrl.searchParams.set('startDate', newDate.toISOString().split('T')[0]);
            
            const periodName = direction > 0 ? 'next' : 'previous';
            this.showLoadingIndicator(`Navigating to ${periodName} period...`);
            window.location.href = currentUrl.toString();
        },
        
        getPeriodDays(zoom) {
            const periodMap = {
                '2month': 60,
                'month': 30,
                'week': 7,
                '12h': 5,
                '6h': 4,
                '4h': 3,
                '2h': 2,
                '1h': 1,
                '30min': 1,
                '15min': 1
            };
            return periodMap[zoom] || 7;
        },
        
        navigateToToday() {
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.delete('startDate'); // Remove startDate to default to today
            
            this.showLoadingIndicator('Navigating to today...');
            window.location.href = currentUrl.toString();
        },
        
        // Setup grid interactions after content updates
        setupGridInteractions() {
            // Re-setup any dynamic interactions that may have been lost
            const gridCells = document.querySelectorAll('.scheduler-grid-cell');
            gridCells.forEach(cell => {
                if (!cell.hasAttribute('data-initialized')) {
                    cell.setAttribute('data-initialized', 'true');
                    // Add any additional cell interactions here
                }
            });
            
            // Setup job block interactions
            const jobBlocks = document.querySelectorAll('.job-block');
            jobBlocks.forEach(block => {
                this.setupJobBlockInteractions(block);
            });
        },
        
        // Task 9: Enhanced job block interactions
        setupJobBlockInteractions(block) {
            // Tooltip enhancement
            block.addEventListener('mouseenter', (e) => {
                const jobId = e.target.getAttribute('data-job-id');
                const material = e.target.getAttribute('data-material');
                const priority = e.target.getAttribute('data-priority');
                const status = e.target.getAttribute('data-status');
                
                // Enhanced tooltip could be implemented here
                console.log(`Job hover: ID=${jobId}, Material=${material}, Priority=${priority}, Status=${status}`);
            });
        },
        
        // Loading indicator management
        showLoadingIndicator(message = 'Loading...') {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                const messageSpan = indicator.querySelector('span');
                if (messageSpan) messageSpan.textContent = message;
                indicator.classList.remove('hidden');
                this.isLoading = true;
            }
        },
        
        hideLoadingIndicator() {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                indicator.classList.add('hidden');
                this.isLoading = false;
            }
        },
        
        // Refresh the entire scheduler
        refreshScheduler() {
            if (this.isLoading) return;
            
            this.showLoadingIndicator('Refreshing scheduler...');
            window.location.reload();
        },
        
        // Notification functions
        showSuccessNotification(message) {
            this.showNotification(message, 'success');
        },
        
        showErrorNotification(message) {
            this.showNotification(message, 'error');
        },
        
        showNotification(message, type) {
            // Remove existing notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(n => n.remove());
            
            const notification = document.createElement('div');
            notification.className = `notification notification-${type} fixed top-20 right-4 px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full text-white font-medium max-w-md`;
            
            const icon = type === 'success' 
                ? '<svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
                : '<svg class="w-5 h-5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
            
            const bgColor = type === 'success' ? 'bg-green-600' : 'bg-red-600';
            notification.classList.add(bgColor);
            
            notification.innerHTML = `
                <div class="flex items-center">
                    ${icon}
                    <span class="flex-1">${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white opacity-70 hover:opacity-100 transition-opacity">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Animate in
            requestAnimationFrame(() => {
                notification.classList.remove('translate-x-full');
            });
            
            // Auto remove
            setTimeout(() => {
                notification.classList.add('translate-x-full', 'opacity-0');
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 300);
            }, type === 'success' ? 5000 : 8000);
        },
        
        // Debug logging
        logDebugInfo() {
            @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
            {
                <text>
                console.log('=== OpCentrix Enhanced Scheduler Debug Info ===');
                console.log('Current zoom:', this.currentZoom);
                console.log('Current orientation:', this.currentOrientation);
                console.log('Zoom levels:', this.zoomLevels);
                console.log('Total slots:', @totalSlots);
                console.log('Machines:', @Html.Raw(System.Text.Json.JsonSerializer.Serialize(viewModel.Machines)));
                console.log('Jobs count:', @viewModel.Jobs.Count);
                console.log('Modal state:', this.isModalOpen);
                console.log('Loading state:', this.isLoading);
                console.log('Is empty state:', @isEmptyState.ToString().ToLower());
                console.log('Has real machines:', @hasRealMachines.ToString().ToLower());
                console.log('openJobModal function available:', typeof window.openJobModal === 'function');
                console.log('==============================================');
                </text>
            }
        }
    };
    
    // Task 10: Global orientation toggle function
    window.toggleOrientation = function(orientation) {
        SchedulerApp.toggleOrientation(orientation);
    };
    
    // Expose functions globally
    window.SchedulerApp = SchedulerApp;
    window.showLoadingIndicator = SchedulerApp.showLoadingIndicator.bind(SchedulerApp);
    window.hideLoadingIndicator = SchedulerApp.hideLoadingIndicator.bind(SchedulerApp);
    window.showSuccessNotification = SchedulerApp.showSuccessNotification.bind(SchedulerApp);
    window.showErrorNotification = SchedulerApp.showErrorNotification.bind(SchedulerApp);
    window.navigatePeriod = SchedulerApp.navigatePeriod.bind(SchedulerApp);
    window.navigateToToday = SchedulerApp.navigateToToday.bind(SchedulerApp);
    
    // Development debug helper
    @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
    {
        <text>
        window.debugScheduler = function() {
            SchedulerApp.logDebugInfo();
        };
        </text>
    }
    
    // Initialize on DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log('?? [INIT] DOM Content Loaded - Initializing Scheduler');
            SchedulerApp.init();
        });
    } else {
        console.log('?? [INIT] DOM Already Ready - Initializing Scheduler');
        SchedulerApp.init();
    }
    
})();
</script>
}
